// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	[System.Diagnostics.DebuggerNonUserCode]
	public partial class OrderShipment : Allors.ObjectBase 
	{
		public static readonly OrderShipmentMeta Meta = OrderShipmentMeta.Instance;

		public OrderShipment(Allors.IStrategy allors) : base(allors) {}

		public static OrderShipment Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (OrderShipment) allorsSession.Instantiate(allorsObjectId);		
		}



		virtual public SalesOrderItem SalesOrderItem
		{ 
			get
			{
				return (SalesOrderItem) Strategy.GetCompositeRole(Meta.SalesOrderItem);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SalesOrderItem ,value);
			}
		}

		virtual public bool ExistSalesOrderItem
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SalesOrderItem);
			}
		}

		virtual public void RemoveSalesOrderItem()
		{
			Strategy.RemoveCompositeRole(Meta.SalesOrderItem);
		}



		virtual public global::System.Boolean? Picked 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.Picked);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Picked, value);
			}
		}

		virtual public bool ExistPicked{
			get
			{
				return Strategy.ExistUnitRole(Meta.Picked);
			}
		}

		virtual public void RemovePicked()
		{
			Strategy.RemoveUnitRole(Meta.Picked);
		}


		virtual public ShipmentItem ShipmentItem
		{ 
			get
			{
				return (ShipmentItem) Strategy.GetCompositeRole(Meta.ShipmentItem);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ShipmentItem ,value);
			}
		}

		virtual public bool ExistShipmentItem
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ShipmentItem);
			}
		}

		virtual public void RemoveShipmentItem()
		{
			Strategy.RemoveCompositeRole(Meta.ShipmentItem);
		}



		virtual public global::System.Decimal? Quantity 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.Quantity);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Quantity, value);
			}
		}

		virtual public bool ExistQuantity{
			get
			{
				return Strategy.ExistUnitRole(Meta.Quantity);
			}
		}

		virtual public void RemoveQuantity()
		{
			Strategy.RemoveUnitRole(Meta.Quantity);
		}


		virtual public PurchaseOrderItem PurchaseOrderItem
		{ 
			get
			{
				return (PurchaseOrderItem) Strategy.GetCompositeRole(Meta.PurchaseOrderItem);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PurchaseOrderItem ,value);
			}
		}

		virtual public bool ExistPurchaseOrderItem
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PurchaseOrderItem);
			}
		}

		virtual public void RemovePurchaseOrderItem()
		{
			Strategy.RemoveCompositeRole(Meta.PurchaseOrderItem);
		}

	}

	public class OrderShipmentMeta
	{
		public static readonly OrderShipmentMeta Instance = new OrderShipmentMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.OrderShipment;

		public global::Allors.Meta.RoleType SalesOrderItem 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrderShipmentSalesOrderItem;
			}
		} 
		public global::Allors.Meta.RoleType Picked 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrderShipmentPicked;
			}
		} 
		public global::Allors.Meta.RoleType ShipmentItem 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrderShipmentShipmentItem;
			}
		} 
		public global::Allors.Meta.RoleType Quantity 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrderShipmentQuantity;
			}
		} 
		public global::Allors.Meta.RoleType PurchaseOrderItem 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.OrderShipmentPurchaseOrderItem;
			}
		} 

	}
}