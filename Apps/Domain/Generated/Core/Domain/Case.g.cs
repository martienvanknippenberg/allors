// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	[System.Diagnostics.DebuggerNonUserCode]
	public partial class Case : Allors.ObjectBase , Searchable, UserInterfaceable, Transitional, UniquelyIdentifiable, SearchResult
	{
		public static readonly CaseMeta Meta = CaseMeta.Instance;

		public Case(Allors.IStrategy allors) : base(allors) {}

		public static Case Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Case) allorsSession.Instantiate(allorsObjectId);		
		}



		virtual public CaseStatus CurrentCaseStatus
		{ 
			get
			{
				return (CaseStatus) Strategy.GetCompositeRole(Meta.CurrentCaseStatus);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CurrentCaseStatus ,value);
			}
		}

		virtual public bool ExistCurrentCaseStatus
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CurrentCaseStatus);
			}
		}

		virtual public void RemoveCurrentCaseStatus()
		{
			Strategy.RemoveCompositeRole(Meta.CurrentCaseStatus);
		}


		virtual public global::Allors.Extent<CaseStatus> CaseStatuses
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CaseStatus);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CaseStatus, value);
			}
		}

		virtual public void AddCaseStatus (CaseStatus value)
		{
			Strategy.AddCompositeRole(Meta.CaseStatus, value);
		}

		virtual public void RemoveCaseStatus (CaseStatus value)
		{
			Strategy.RemoveCompositeRole(Meta.CaseStatus,value);
		}

		virtual public bool ExistCaseStatuses
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CaseStatus);
			}
		}

		virtual public void RemoveCaseStatuses()
		{
			Strategy.RemoveCompositeRoles(Meta.CaseStatus);
		}



		virtual public global::System.DateTime StartDate 
		{
			get
			{
				return (global::System.DateTime) Strategy.GetUnitRole(Meta.StartDate);
			}
			set
			{
				Strategy.SetUnitRole(Meta.StartDate, value);
			}
		}

		virtual public bool ExistStartDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.StartDate);
			}
		}

		virtual public void RemoveStartDate()
		{
			Strategy.RemoveUnitRole(Meta.StartDate);
		}


		virtual public CaseObjectState CurrentObjectState
		{ 
			get
			{
				return (CaseObjectState) Strategy.GetCompositeRole(Meta.CurrentObjectState);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CurrentObjectState ,value);
			}
		}

		virtual public bool ExistCurrentObjectState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CurrentObjectState);
			}
		}

		virtual public void RemoveCurrentObjectState()
		{
			Strategy.RemoveCompositeRole(Meta.CurrentObjectState);
		}



		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description);
		}


		virtual public CaseObjectState PreviousObjectState
		{ 
			get
			{
				return (CaseObjectState) Strategy.GetCompositeRole(Meta.PreviousObjectState);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousObjectState ,value);
			}
		}

		virtual public bool ExistPreviousObjectState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousObjectState);
			}
		}

		virtual public void RemovePreviousObjectState()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousObjectState);
		}


		virtual public SearchData SearchData
		{ 
			get
			{
				return (SearchData) Strategy.GetCompositeRole(Meta.SearchData);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SearchData ,value);
			}
		}

		virtual public bool ExistSearchData
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SearchData);
			}
		}

		virtual public void RemoveSearchData()
		{
			Strategy.RemoveCompositeRole(Meta.SearchData);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}



		virtual public global::System.Guid UniqueId 
		{
			get
			{
				return (global::System.Guid) Strategy.GetUnitRole(Meta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId);
		}



		virtual public global::Allors.Extent<CommunicationEvent> CommunicationEventsWhereCase
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.CommunicationEventsWhereCase);
			}
		}

		virtual public bool ExistCommunicationEventsWhereCase
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.CommunicationEventsWhereCase);
			}
		}

	}

	public class CaseMeta
	{
		public static readonly CaseMeta Instance = new CaseMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.Case;

		public global::Allors.Meta.RoleType CurrentCaseStatus 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CaseCurrentCaseStatus;
			}
		} 
		public global::Allors.Meta.RoleType CaseStatus 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CaseCaseStatus;
			}
		} 
		public global::Allors.Meta.RoleType StartDate 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CaseStartDate;
			}
		} 
		public global::Allors.Meta.RoleType CurrentObjectState 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CaseCurrentObjectState;
			}
		} 
		public global::Allors.Meta.RoleType Description 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CaseDescription;
			}
		} 
		public global::Allors.Meta.RoleType PreviousObjectState 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CasePreviousObjectState;
			}
		} 
		public global::Allors.Meta.RoleType SearchData 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.SearchableSearchData;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 
		public global::Allors.Meta.RoleType UniqueId 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UniquelyIdentifiableUniqueId;
			}
		} 

		public global::Allors.Meta.AssociationType CommunicationEventsWhereCase 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.CommunicationEventCase;
			}
		} 

		public global::Allors.Meta.MethodType Close 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.CaseClose;
			}
		} 
		public global::Allors.Meta.MethodType Complete 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.CaseComplete;
			}
		} 
		public global::Allors.Meta.MethodType Reopen 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.CaseReopen;
			}
		} 

	}
}