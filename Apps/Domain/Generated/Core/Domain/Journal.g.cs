// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class Journal : Allors.ObjectBase , Searchable, UserInterfaceable, AccessControlledObject
	{
		public static readonly JournalMeta Meta = JournalMeta.Instance;

		public Journal(Allors.IStrategy allors) : base(allors) {}

		public static Journal Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Journal) allorsSession.Instantiate(allorsObjectId);		
		}




		virtual public global::System.Boolean UseAsDefault 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.UseAsDefault);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UseAsDefault, value);
			}
		}

		virtual public bool ExistUseAsDefault{
			get
			{
				return Strategy.ExistUnitRole(Meta.UseAsDefault);
			}
		}

		virtual public void RemoveUseAsDefault()
		{
			Strategy.RemoveUnitRole(Meta.UseAsDefault);
		}


		virtual public OrganisationGlAccount GlPaymentInTransit
		{ 
			get
			{
				return (OrganisationGlAccount) Strategy.GetCompositeRole(Meta.GlPaymentInTransit);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.GlPaymentInTransit ,value);
			}
		}

		virtual public bool ExistGlPaymentInTransit
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.GlPaymentInTransit);
			}
		}

		virtual public void RemoveGlPaymentInTransit()
		{
			Strategy.RemoveCompositeRole(Meta.GlPaymentInTransit);
		}


		virtual public JournalType JournalType
		{ 
			get
			{
				return (JournalType) Strategy.GetCompositeRole(Meta.JournalType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.JournalType ,value);
			}
		}

		virtual public bool ExistJournalType
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.JournalType);
			}
		}

		virtual public void RemoveJournalType()
		{
			Strategy.RemoveCompositeRole(Meta.JournalType);
		}



		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description);
		}



		virtual public global::System.Boolean BlockUnpaidTransactions 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.BlockUnpaidTransactions);
			}
			set
			{
				Strategy.SetUnitRole(Meta.BlockUnpaidTransactions, value);
			}
		}

		virtual public bool ExistBlockUnpaidTransactions{
			get
			{
				return Strategy.ExistUnitRole(Meta.BlockUnpaidTransactions);
			}
		}

		virtual public void RemoveBlockUnpaidTransactions()
		{
			Strategy.RemoveUnitRole(Meta.BlockUnpaidTransactions);
		}


		virtual public OrganisationGlAccount ContraAccount
		{ 
			get
			{
				return (OrganisationGlAccount) Strategy.GetCompositeRole(Meta.ContraAccount);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ContraAccount ,value);
			}
		}

		virtual public bool ExistContraAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ContraAccount);
			}
		}

		virtual public void RemoveContraAccount()
		{
			Strategy.RemoveCompositeRole(Meta.ContraAccount);
		}


		virtual public InternalOrganisation InternalOrganisation
		{ 
			get
			{
				return (InternalOrganisation) Strategy.GetCompositeRole(Meta.InternalOrganisation);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.InternalOrganisation ,value);
			}
		}

		virtual public bool ExistInternalOrganisation
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.InternalOrganisation);
			}
		}

		virtual public void RemoveInternalOrganisation()
		{
			Strategy.RemoveCompositeRole(Meta.InternalOrganisation);
		}


		virtual public JournalType PreviousJournalType
		{ 
			get
			{
				return (JournalType) Strategy.GetCompositeRole(Meta.PreviousJournalType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousJournalType ,value);
			}
		}

		virtual public bool ExistPreviousJournalType
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousJournalType);
			}
		}

		virtual public void RemovePreviousJournalType()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousJournalType);
		}


		virtual public OrganisationGlAccount PreviousContraAccount
		{ 
			get
			{
				return (OrganisationGlAccount) Strategy.GetCompositeRole(Meta.PreviousContraAccount);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousContraAccount ,value);
			}
		}

		virtual public bool ExistPreviousContraAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousContraAccount);
			}
		}

		virtual public void RemovePreviousContraAccount()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousContraAccount);
		}


		virtual public global::Allors.Extent<JournalEntry> JournalEntries
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.JournalEntry);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.JournalEntry, value);
			}
		}

		virtual public void AddJournalEntry (JournalEntry value)
		{
			Strategy.AddCompositeRole(Meta.JournalEntry, value);
		}

		virtual public void RemoveJournalEntry (JournalEntry value)
		{
			Strategy.RemoveCompositeRole(Meta.JournalEntry,value);
		}

		virtual public bool ExistJournalEntries
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.JournalEntry);
			}
		}

		virtual public void RemoveJournalEntries()
		{
			Strategy.RemoveCompositeRoles(Meta.JournalEntry);
		}



		virtual public global::System.Boolean CloseWhenInBalance 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.CloseWhenInBalance);
			}
			set
			{
				Strategy.SetUnitRole(Meta.CloseWhenInBalance, value);
			}
		}

		virtual public bool ExistCloseWhenInBalance{
			get
			{
				return Strategy.ExistUnitRole(Meta.CloseWhenInBalance);
			}
		}

		virtual public void RemoveCloseWhenInBalance()
		{
			Strategy.RemoveUnitRole(Meta.CloseWhenInBalance);
		}


		virtual public SearchData SearchData
		{ 
			get
			{
				return (SearchData) Strategy.GetCompositeRole(Meta.SearchData);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SearchData ,value);
			}
		}

		virtual public bool ExistSearchData
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SearchData);
			}
		}

		virtual public void RemoveSearchData()
		{
			Strategy.RemoveCompositeRole(Meta.SearchData);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}



		virtual public global::Allors.Extent<PaymentMethod> PaymentMethodsWhereJournal
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PaymentMethodsWhereJournal);
			}
		}

		virtual public bool ExistPaymentMethodsWhereJournal
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PaymentMethodsWhereJournal);
			}
		}

	}

	public class JournalMeta
	{
		public static readonly JournalMeta Instance = new JournalMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.Journal;

		public global::Allors.Meta.RoleType UseAsDefault 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.JournalUseAsDefault;
			}
		} 
		public global::Allors.Meta.RoleType GlPaymentInTransit 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.JournalGlPaymentInTransit;
			}
		} 
		public global::Allors.Meta.RoleType JournalType 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.JournalJournalType;
			}
		} 
		public global::Allors.Meta.RoleType Description 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.JournalDescription;
			}
		} 
		public global::Allors.Meta.RoleType BlockUnpaidTransactions 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.JournalBlockUnpaidTransactions;
			}
		} 
		public global::Allors.Meta.RoleType ContraAccount 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.JournalContraAccount;
			}
		} 
		public global::Allors.Meta.RoleType InternalOrganisation 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.JournalInternalOrganisation;
			}
		} 
		public global::Allors.Meta.RoleType PreviousJournalType 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.JournalPreviousJournalType;
			}
		} 
		public global::Allors.Meta.RoleType PreviousContraAccount 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.JournalPreviousContraAccount;
			}
		} 
		public global::Allors.Meta.RoleType JournalEntry 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.JournalJournalEntry;
			}
		} 
		public global::Allors.Meta.RoleType CloseWhenInBalance 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.JournalCloseWhenInBalance;
			}
		} 
		public global::Allors.Meta.RoleType SearchData 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.SearchableSearchData;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 

		public global::Allors.Meta.AssociationType PaymentMethodsWhereJournal 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.PaymentMethodJournal;
			}
		} 

	}
}