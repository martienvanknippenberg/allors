// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	[System.Diagnostics.DebuggerNonUserCode]
	public partial class Engagement : Allors.ObjectBase , UserInterfaceable, Searchable, SearchResult
	{
		public static readonly EngagementMeta Meta = EngagementMeta.Instance;

		public Engagement(Allors.IStrategy allors) : base(allors) {}

		public static Engagement Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Engagement) allorsSession.Instantiate(allorsObjectId);		
		}



		virtual public Agreement Agreement
		{ 
			get
			{
				return (Agreement) Strategy.GetCompositeRole(Meta.Agreement);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Agreement ,value);
			}
		}

		virtual public bool ExistAgreement
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Agreement);
			}
		}

		virtual public void RemoveAgreement()
		{
			Strategy.RemoveCompositeRole(Meta.Agreement);
		}


		virtual public ContactMechanism PlacingContactMechanism
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.PlacingContactMechanism);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PlacingContactMechanism ,value);
			}
		}

		virtual public bool ExistPlacingContactMechanism
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PlacingContactMechanism);
			}
		}

		virtual public void RemovePlacingContactMechanism()
		{
			Strategy.RemoveCompositeRole(Meta.PlacingContactMechanism);
		}



		virtual public global::System.Decimal? MaximumAmount 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.MaximumAmount);
			}
			set
			{
				Strategy.SetUnitRole(Meta.MaximumAmount, value);
			}
		}

		virtual public bool ExistMaximumAmount{
			get
			{
				return Strategy.ExistUnitRole(Meta.MaximumAmount);
			}
		}

		virtual public void RemoveMaximumAmount()
		{
			Strategy.RemoveUnitRole(Meta.MaximumAmount);
		}


		virtual public ContactMechanism BillToContactMechanism
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.BillToContactMechanism);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BillToContactMechanism ,value);
			}
		}

		virtual public bool ExistBillToContactMechanism
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BillToContactMechanism);
			}
		}

		virtual public void RemoveBillToContactMechanism()
		{
			Strategy.RemoveCompositeRole(Meta.BillToContactMechanism);
		}



		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description);
		}


		virtual public Party BillToParty
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.BillToParty);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BillToParty ,value);
			}
		}

		virtual public bool ExistBillToParty
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BillToParty);
			}
		}

		virtual public void RemoveBillToParty()
		{
			Strategy.RemoveCompositeRole(Meta.BillToParty);
		}


		virtual public Party PlacingParty
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.PlacingParty);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PlacingParty ,value);
			}
		}

		virtual public bool ExistPlacingParty
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PlacingParty);
			}
		}

		virtual public void RemovePlacingParty()
		{
			Strategy.RemoveCompositeRole(Meta.PlacingParty);
		}


		virtual public InternalOrganisation TakenViaInternalOrganisation
		{ 
			get
			{
				return (InternalOrganisation) Strategy.GetCompositeRole(Meta.TakenViaInternalOrganisation);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.TakenViaInternalOrganisation ,value);
			}
		}

		virtual public bool ExistTakenViaInternalOrganisation
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.TakenViaInternalOrganisation);
			}
		}

		virtual public void RemoveTakenViaInternalOrganisation()
		{
			Strategy.RemoveCompositeRole(Meta.TakenViaInternalOrganisation);
		}



		virtual public global::System.DateTime? StartDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.StartDate);
			}
			set
			{
				Strategy.SetUnitRole(Meta.StartDate, value);
			}
		}

		virtual public bool ExistStartDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.StartDate);
			}
		}

		virtual public void RemoveStartDate()
		{
			Strategy.RemoveUnitRole(Meta.StartDate);
		}


		virtual public ContactMechanism TakenViaContactMechanism
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.TakenViaContactMechanism);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.TakenViaContactMechanism ,value);
			}
		}

		virtual public bool ExistTakenViaContactMechanism
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.TakenViaContactMechanism);
			}
		}

		virtual public void RemoveTakenViaContactMechanism()
		{
			Strategy.RemoveCompositeRole(Meta.TakenViaContactMechanism);
		}



		virtual public global::System.Decimal? EstimatedAmount 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.EstimatedAmount);
			}
			set
			{
				Strategy.SetUnitRole(Meta.EstimatedAmount, value);
			}
		}

		virtual public bool ExistEstimatedAmount{
			get
			{
				return Strategy.ExistUnitRole(Meta.EstimatedAmount);
			}
		}

		virtual public void RemoveEstimatedAmount()
		{
			Strategy.RemoveUnitRole(Meta.EstimatedAmount);
		}



		virtual public global::System.DateTime? EndDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.EndDate);
			}
			set
			{
				Strategy.SetUnitRole(Meta.EndDate, value);
			}
		}

		virtual public bool ExistEndDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.EndDate);
			}
		}

		virtual public void RemoveEndDate()
		{
			Strategy.RemoveUnitRole(Meta.EndDate);
		}



		virtual public global::System.DateTime? ContractDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ContractDate);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ContractDate, value);
			}
		}

		virtual public bool ExistContractDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.ContractDate);
			}
		}

		virtual public void RemoveContractDate()
		{
			Strategy.RemoveUnitRole(Meta.ContractDate);
		}


		virtual public global::Allors.Extent<EngagementItem> EngagementItems
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.EngagementItem);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.EngagementItem, value);
			}
		}

		virtual public void AddEngagementItem (EngagementItem value)
		{
			Strategy.AddCompositeRole(Meta.EngagementItem, value);
		}

		virtual public void RemoveEngagementItem (EngagementItem value)
		{
			Strategy.RemoveCompositeRole(Meta.EngagementItem,value);
		}

		virtual public bool ExistEngagementItems
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.EngagementItem);
			}
		}

		virtual public void RemoveEngagementItems()
		{
			Strategy.RemoveCompositeRoles(Meta.EngagementItem);
		}



		virtual public global::System.String ClientPurchaseOrderNumber 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.ClientPurchaseOrderNumber);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ClientPurchaseOrderNumber, value);
			}
		}

		virtual public bool ExistClientPurchaseOrderNumber{
			get
			{
				return Strategy.ExistUnitRole(Meta.ClientPurchaseOrderNumber);
			}
		}

		virtual public void RemoveClientPurchaseOrderNumber()
		{
			Strategy.RemoveUnitRole(Meta.ClientPurchaseOrderNumber);
		}


		virtual public OrganisationContactRelationship TakenViaOrganisationContactRelationship
		{ 
			get
			{
				return (OrganisationContactRelationship) Strategy.GetCompositeRole(Meta.TakenViaOrganisationContactRelationship);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.TakenViaOrganisationContactRelationship ,value);
			}
		}

		virtual public bool ExistTakenViaOrganisationContactRelationship
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.TakenViaOrganisationContactRelationship);
			}
		}

		virtual public void RemoveTakenViaOrganisationContactRelationship()
		{
			Strategy.RemoveCompositeRole(Meta.TakenViaOrganisationContactRelationship);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}


		virtual public SearchData SearchData
		{ 
			get
			{
				return (SearchData) Strategy.GetCompositeRole(Meta.SearchData);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SearchData ,value);
			}
		}

		virtual public bool ExistSearchData
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SearchData);
			}
		}

		virtual public void RemoveSearchData()
		{
			Strategy.RemoveCompositeRole(Meta.SearchData);
		}

	}

	public class EngagementMeta
	{
		public static readonly EngagementMeta Instance = new EngagementMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.Engagement;

		public global::Allors.Meta.RoleType Agreement 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngagementAgreement;
			}
		} 
		public global::Allors.Meta.RoleType PlacingContactMechanism 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngagementPlacingContactMechanism;
			}
		} 
		public global::Allors.Meta.RoleType MaximumAmount 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngagementMaximumAmount;
			}
		} 
		public global::Allors.Meta.RoleType BillToContactMechanism 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngagementBillToContactMechanism;
			}
		} 
		public global::Allors.Meta.RoleType Description 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngagementDescription;
			}
		} 
		public global::Allors.Meta.RoleType BillToParty 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngagementBillToParty;
			}
		} 
		public global::Allors.Meta.RoleType PlacingParty 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngagementPlacingParty;
			}
		} 
		public global::Allors.Meta.RoleType TakenViaInternalOrganisation 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngagementTakenViaInternalOrganisation;
			}
		} 
		public global::Allors.Meta.RoleType StartDate 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngagementStartDate;
			}
		} 
		public global::Allors.Meta.RoleType TakenViaContactMechanism 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngagementTakenViaContactMechanism;
			}
		} 
		public global::Allors.Meta.RoleType EstimatedAmount 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngagementEstimatedAmount;
			}
		} 
		public global::Allors.Meta.RoleType EndDate 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngagementEndDate;
			}
		} 
		public global::Allors.Meta.RoleType ContractDate 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngagementContractDate;
			}
		} 
		public global::Allors.Meta.RoleType EngagementItem 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngagementEngagementItem;
			}
		} 
		public global::Allors.Meta.RoleType ClientPurchaseOrderNumber 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngagementClientPurchaseOrderNumber;
			}
		} 
		public global::Allors.Meta.RoleType TakenViaOrganisationContactRelationship 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngagementTakenViaOrganisationContactRelationship;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 
		public global::Allors.Meta.RoleType SearchData 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.SearchableSearchData;
			}
		} 

	}
}