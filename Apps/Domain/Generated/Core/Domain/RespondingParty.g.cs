// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class RespondingParty : Allors.ObjectBase , UserInterfaceable
	{
		public static readonly RespondingPartyMeta Meta = RespondingPartyMeta.Instance;

		public RespondingParty(Allors.IStrategy allors) : base(allors) {}

		public static RespondingParty Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (RespondingParty) allorsSession.Instantiate(allorsObjectId);		
		}




		virtual public global::System.DateTime SendingDate 
		{
			get
			{
				return (global::System.DateTime) Strategy.GetUnitRole(Meta.SendingDate);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SendingDate, value);
			}
		}

		virtual public bool ExistSendingDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.SendingDate);
			}
		}

		virtual public void RemoveSendingDate()
		{
			Strategy.RemoveUnitRole(Meta.SendingDate);
		}


		virtual public ContactMechanism ContactMechanism
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.ContactMechanism);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ContactMechanism ,value);
			}
		}

		virtual public bool ExistContactMechanism
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ContactMechanism);
			}
		}

		virtual public void RemoveContactMechanism()
		{
			Strategy.RemoveCompositeRole(Meta.ContactMechanism);
		}


		virtual public Party Party
		{ 
			get
			{
				return (Party) Strategy.GetCompositeRole(Meta.Party);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Party ,value);
			}
		}

		virtual public bool ExistParty
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Party);
			}
		}

		virtual public void RemoveParty()
		{
			Strategy.RemoveCompositeRole(Meta.Party);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}



		virtual public global::Allors.Extent<Request> RequestsWhereRespondingParty
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequestsWhereRespondingParty);
			}
		}

		virtual public bool ExistRequestsWhereRespondingParty
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequestsWhereRespondingParty);
			}
		}

	}

	public class RespondingPartyMeta
	{
		public static readonly RespondingPartyMeta Instance = new RespondingPartyMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.RespondingParty;

		public global::Allors.Meta.RoleType SendingDate 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.RespondingPartySendingDate;
			}
		} 
		public global::Allors.Meta.RoleType ContactMechanism 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.RespondingPartyContactMechanism;
			}
		} 
		public global::Allors.Meta.RoleType Party 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.RespondingPartyParty;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 

		public global::Allors.Meta.AssociationType RequestsWhereRespondingParty 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.RequestRespondingParty;
			}
		} 

	}
}