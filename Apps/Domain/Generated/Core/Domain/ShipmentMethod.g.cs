// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	[System.Diagnostics.DebuggerNonUserCode]
	public partial class ShipmentMethod : Allors.ObjectBase , Enumeration
	{
		public static readonly ShipmentMethodMeta Meta = ShipmentMethodMeta.Instance;

		public ShipmentMethod(Allors.IStrategy allors) : base(allors) {}

		public static ShipmentMethod Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (ShipmentMethod) allorsSession.Instantiate(allorsObjectId);		
		}



		virtual public global::Allors.Extent<LocalisedText> LocalisedNames
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LocalisedName);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LocalisedName, value);
			}
		}

		virtual public void AddLocalisedName (LocalisedText value)
		{
			Strategy.AddCompositeRole(Meta.LocalisedName, value);
		}

		virtual public void RemoveLocalisedName (LocalisedText value)
		{
			Strategy.RemoveCompositeRole(Meta.LocalisedName,value);
		}

		virtual public bool ExistLocalisedNames
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LocalisedName);
			}
		}

		virtual public void RemoveLocalisedNames()
		{
			Strategy.RemoveCompositeRoles(Meta.LocalisedName);
		}



		virtual public global::System.Boolean? IsActive 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.IsActive);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IsActive, value);
			}
		}

		virtual public bool ExistIsActive{
			get
			{
				return Strategy.ExistUnitRole(Meta.IsActive);
			}
		}

		virtual public void RemoveIsActive()
		{
			Strategy.RemoveUnitRole(Meta.IsActive);
		}



		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}



		virtual public global::System.Guid? UniqueId 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId);
		}



		virtual public global::Allors.Extent<ShippingAndHandlingComponent> ShippingAndHandlingComponentsWhereShipmentMethod
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShippingAndHandlingComponentsWhereShipmentMethod);
			}
		}

		virtual public bool ExistShippingAndHandlingComponentsWhereShipmentMethod
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShippingAndHandlingComponentsWhereShipmentMethod);
			}
		}


		virtual public global::Allors.Extent<Party> PartiesWhereDefaultShipmentMethod
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartiesWhereDefaultShipmentMethod);
			}
		}

		virtual public bool ExistPartiesWhereDefaultShipmentMethod
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartiesWhereDefaultShipmentMethod);
			}
		}


		virtual public global::Allors.Extent<SalesOrder> SalesOrdersWhereShipmentMethod
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrdersWhereShipmentMethod);
			}
		}

		virtual public bool ExistSalesOrdersWhereShipmentMethod
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrdersWhereShipmentMethod);
			}
		}


		virtual public global::Allors.Extent<ShipmentRouteSegment> ShipmentRouteSegmentsWhereShipmentMethod
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentRouteSegmentsWhereShipmentMethod);
			}
		}

		virtual public bool ExistShipmentRouteSegmentsWhereShipmentMethod
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentRouteSegmentsWhereShipmentMethod);
			}
		}


		virtual public global::Allors.Extent<Shipment> ShipmentsWhereShipmentMethod
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentsWhereShipmentMethod);
			}
		}

		virtual public bool ExistShipmentsWhereShipmentMethod
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentsWhereShipmentMethod);
			}
		}


		virtual public global::Allors.Extent<Store> StoresWhereDefaultShipmentMethod
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.StoresWhereDefaultShipmentMethod);
			}
		}

		virtual public bool ExistStoresWhereDefaultShipmentMethod
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.StoresWhereDefaultShipmentMethod);
			}
		}

	}

	public class ShipmentMethodMeta
	{
		public static readonly ShipmentMethodMeta Instance = new ShipmentMethodMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.ShipmentMethod;

		public global::Allors.Meta.RoleType LocalisedName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EnumerationLocalisedName;
			}
		} 
		public global::Allors.Meta.RoleType IsActive 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EnumerationIsActive;
			}
		} 
		public global::Allors.Meta.RoleType Name 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EnumerationName;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 
		public global::Allors.Meta.RoleType UniqueId 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UniquelyIdentifiableUniqueId;
			}
		} 

		public global::Allors.Meta.AssociationType ShippingAndHandlingComponentsWhereShipmentMethod 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.ShippingAndHandlingComponentShipmentMethod;
			}
		} 
		public global::Allors.Meta.AssociationType PartiesWhereDefaultShipmentMethod 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.PartyDefaultShipmentMethod;
			}
		} 
		public global::Allors.Meta.AssociationType SalesOrdersWhereShipmentMethod 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.SalesOrderShipmentMethod;
			}
		} 
		public global::Allors.Meta.AssociationType ShipmentRouteSegmentsWhereShipmentMethod 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.ShipmentRouteSegmentShipmentMethod;
			}
		} 
		public global::Allors.Meta.AssociationType ShipmentsWhereShipmentMethod 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.ShipmentShipmentMethod;
			}
		} 
		public global::Allors.Meta.AssociationType StoresWhereDefaultShipmentMethod 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.StoreDefaultShipmentMethod;
			}
		} 

	}
}