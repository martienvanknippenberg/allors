// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	[System.Diagnostics.DebuggerNonUserCode]
	public partial class Media : Allors.ObjectBase , UniquelyIdentifiable, UserInterfaceable
	{
		public static readonly MediaMeta Meta = MediaMeta.Instance;

		public Media(Allors.IStrategy allors) : base(allors) {}

		public static Media Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Media) allorsSession.Instantiate(allorsObjectId);		
		}



		virtual public MediaType MediaType
		{ 
			get
			{
				return (MediaType) Strategy.GetCompositeRole(Meta.MediaType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.MediaType ,value);
			}
		}

		virtual public bool ExistMediaType
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.MediaType);
			}
		}

		virtual public void RemoveMediaType()
		{
			Strategy.RemoveCompositeRole(Meta.MediaType);
		}


		virtual public MediaContent MediaContent
		{ 
			get
			{
				return (MediaContent) Strategy.GetCompositeRole(Meta.MediaContent);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.MediaContent ,value);
			}
		}

		virtual public bool ExistMediaContent
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.MediaContent);
			}
		}

		virtual public void RemoveMediaContent()
		{
			Strategy.RemoveCompositeRole(Meta.MediaContent);
		}



		virtual public global::System.Guid? UniqueId 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}



		virtual public global::Allors.Extent<Image> ImagesWhereOriginal
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ImagesWhereOriginal);
			}
		}

		virtual public bool ExistImagesWhereOriginal
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ImagesWhereOriginal);
			}
		}


		virtual public Image ImageWhereResponsive
		{ 
			get
			{
				return (Image) Strategy.GetCompositeAssociation(Meta.ImageWhereResponsive);
			}
		} 

		virtual public bool ExistImageWhereResponsive
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.ImageWhereResponsive);
			}
		}


		virtual public global::Allors.Extent<Organisation> OrganisationsWhereLogoImage
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrganisationsWhereLogoImage);
			}
		}

		virtual public bool ExistOrganisationsWhereLogoImage
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrganisationsWhereLogoImage);
			}
		}


		virtual public Party PartyWhereContent
		{ 
			get
			{
				return (Party) Strategy.GetCompositeAssociation(Meta.PartyWhereContent);
			}
		} 

		virtual public bool ExistPartyWhereContent
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.PartyWhereContent);
			}
		}


		virtual public global::Allors.Extent<Bank> BanksWhereLogo
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.BanksWhereLogo);
			}
		}

		virtual public bool ExistBanksWhereLogo
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.BanksWhereLogo);
			}
		}


		virtual public global::Allors.Extent<Event> EventsWherePhoto
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EventsWherePhoto);
			}
		}

		virtual public bool ExistEventsWherePhoto
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EventsWherePhoto);
			}
		}


		virtual public CommunicationEvent CommunicationEventWhereDocument
		{ 
			get
			{
				return (CommunicationEvent) Strategy.GetCompositeAssociation(Meta.CommunicationEventWhereDocument);
			}
		} 

		virtual public bool ExistCommunicationEventWhereDocument
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.CommunicationEventWhereDocument);
			}
		}


		virtual public global::Allors.Extent<InternalOrganisation> InternalOrganisationsWhereLogoImage
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.InternalOrganisationsWhereLogoImage);
			}
		}

		virtual public bool ExistInternalOrganisationsWhereLogoImage
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.InternalOrganisationsWhereLogoImage);
			}
		}


		virtual public global::Allors.Extent<Store> StoresWhereLogoImage
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.StoresWhereLogoImage);
			}
		}

		virtual public bool ExistStoresWhereLogoImage
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.StoresWhereLogoImage);
			}
		}


		virtual public global::Allors.Extent<Good> GoodsWhereThumbnail
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.GoodsWhereThumbnail);
			}
		}

		virtual public bool ExistGoodsWhereThumbnail
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.GoodsWhereThumbnail);
			}
		}


		virtual public global::Allors.Extent<Good> GoodsWherePhoto
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.GoodsWherePhoto);
			}
		}

		virtual public bool ExistGoodsWherePhoto
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.GoodsWherePhoto);
			}
		}


		virtual public global::Allors.Extent<ProductCategory> ProductCategoriesWhereNoImageAvailableImage
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductCategoriesWhereNoImageAvailableImage);
			}
		}

		virtual public bool ExistProductCategoriesWhereNoImageAvailableImage
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductCategoriesWhereNoImageAvailableImage);
			}
		}


		virtual public global::Allors.Extent<ProductCategory> ProductCategoriesWhereCategoryImage
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductCategoriesWhereCategoryImage);
			}
		}

		virtual public bool ExistProductCategoriesWhereCategoryImage
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductCategoriesWhereCategoryImage);
			}
		}


		virtual public Person PersonWherePicture
		{ 
			get
			{
				return (Person) Strategy.GetCompositeAssociation(Meta.PersonWherePicture);
			}
		} 

		virtual public bool ExistPersonWherePicture
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.PersonWherePicture);
			}
		}


		virtual public global::Allors.Extent<Singleton> SingletonsWhereNoImageAvailableImage
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SingletonsWhereNoImageAvailableImage);
			}
		}

		virtual public bool ExistSingletonsWhereNoImageAvailableImage
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SingletonsWhereNoImageAvailableImage);
			}
		}

	}

	public class MediaMeta
	{
		public static readonly MediaMeta Instance = new MediaMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.Media;

		public global::Allors.Meta.RoleType MediaType 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.MediaMediaType;
			}
		} 
		public global::Allors.Meta.RoleType MediaContent 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.MediaMediaContent;
			}
		} 
		public global::Allors.Meta.RoleType UniqueId 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UniquelyIdentifiableUniqueId;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 

		public global::Allors.Meta.AssociationType ImagesWhereOriginal 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.ImageOriginal;
			}
		} 
		public global::Allors.Meta.AssociationType ImageWhereResponsive 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.ImageResponsive;
			}
		} 
		public global::Allors.Meta.AssociationType OrganisationsWhereLogoImage 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.OrganisationLogoImage;
			}
		} 
		public global::Allors.Meta.AssociationType PartyWhereContent 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.PartyContent;
			}
		} 
		public global::Allors.Meta.AssociationType BanksWhereLogo 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.BankLogo;
			}
		} 
		public global::Allors.Meta.AssociationType EventsWherePhoto 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.EventPhoto;
			}
		} 
		public global::Allors.Meta.AssociationType CommunicationEventWhereDocument 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.CommunicationEventDocument;
			}
		} 
		public global::Allors.Meta.AssociationType InternalOrganisationsWhereLogoImage 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.InternalOrganisationLogoImage;
			}
		} 
		public global::Allors.Meta.AssociationType StoresWhereLogoImage 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.StoreLogoImage;
			}
		} 
		public global::Allors.Meta.AssociationType GoodsWhereThumbnail 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.GoodThumbnail;
			}
		} 
		public global::Allors.Meta.AssociationType GoodsWherePhoto 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.GoodPhoto;
			}
		} 
		public global::Allors.Meta.AssociationType ProductCategoriesWhereNoImageAvailableImage 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.ProductCategoryNoImageAvailableImage;
			}
		} 
		public global::Allors.Meta.AssociationType ProductCategoriesWhereCategoryImage 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.ProductCategoryCategoryImage;
			}
		} 
		public global::Allors.Meta.AssociationType PersonWherePicture 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.PersonPicture;
			}
		} 
		public global::Allors.Meta.AssociationType SingletonsWhereNoImageAvailableImage 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.SingletonNoImageAvailableImage;
			}
		} 

	}
}