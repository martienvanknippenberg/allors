// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	[System.Diagnostics.DebuggerNonUserCode]
	public partial class PartyBenefit : Allors.ObjectBase , UserInterfaceable
	{
		public static readonly PartyBenefitMeta Meta = PartyBenefitMeta.Instance;

		public PartyBenefit(Allors.IStrategy allors) : base(allors) {}

		public static PartyBenefit Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (PartyBenefit) allorsSession.Instantiate(allorsObjectId);		
		}



		virtual public TimeFrequency TimeFrequency
		{ 
			get
			{
				return (TimeFrequency) Strategy.GetCompositeRole(Meta.TimeFrequency);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.TimeFrequency ,value);
			}
		}

		virtual public bool ExistTimeFrequency
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.TimeFrequency);
			}
		}

		virtual public void RemoveTimeFrequency()
		{
			Strategy.RemoveCompositeRole(Meta.TimeFrequency);
		}



		virtual public global::System.Decimal Cost 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.Cost);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Cost, value);
			}
		}

		virtual public bool ExistCost{
			get
			{
				return Strategy.ExistUnitRole(Meta.Cost);
			}
		}

		virtual public void RemoveCost()
		{
			Strategy.RemoveUnitRole(Meta.Cost);
		}



		virtual public global::System.Decimal ActualEmployerPaidPercentage 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.ActualEmployerPaidPercentage);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ActualEmployerPaidPercentage, value);
			}
		}

		virtual public bool ExistActualEmployerPaidPercentage{
			get
			{
				return Strategy.ExistUnitRole(Meta.ActualEmployerPaidPercentage);
			}
		}

		virtual public void RemoveActualEmployerPaidPercentage()
		{
			Strategy.RemoveUnitRole(Meta.ActualEmployerPaidPercentage);
		}


		virtual public Benefit Benefit
		{ 
			get
			{
				return (Benefit) Strategy.GetCompositeRole(Meta.Benefit);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Benefit ,value);
			}
		}

		virtual public bool ExistBenefit
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Benefit);
			}
		}

		virtual public void RemoveBenefit()
		{
			Strategy.RemoveCompositeRole(Meta.Benefit);
		}



		virtual public global::System.Decimal ActualAvailableTime 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.ActualAvailableTime);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ActualAvailableTime, value);
			}
		}

		virtual public bool ExistActualAvailableTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.ActualAvailableTime);
			}
		}

		virtual public void RemoveActualAvailableTime()
		{
			Strategy.RemoveUnitRole(Meta.ActualAvailableTime);
		}


		virtual public Employment Employment
		{ 
			get
			{
				return (Employment) Strategy.GetCompositeRole(Meta.Employment);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Employment ,value);
			}
		}

		virtual public bool ExistEmployment
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Employment);
			}
		}

		virtual public void RemoveEmployment()
		{
			Strategy.RemoveCompositeRole(Meta.Employment);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}

	}

	public class PartyBenefitMeta
	{
		public static readonly PartyBenefitMeta Instance = new PartyBenefitMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.PartyBenefit;

		public global::Allors.Meta.RoleType TimeFrequency 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PartyBenefitTimeFrequency;
			}
		} 
		public global::Allors.Meta.RoleType Cost 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PartyBenefitCost;
			}
		} 
		public global::Allors.Meta.RoleType ActualEmployerPaidPercentage 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PartyBenefitActualEmployerPaidPercentage;
			}
		} 
		public global::Allors.Meta.RoleType Benefit 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PartyBenefitBenefit;
			}
		} 
		public global::Allors.Meta.RoleType ActualAvailableTime 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PartyBenefitActualAvailableTime;
			}
		} 
		public global::Allors.Meta.RoleType Employment 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PartyBenefitEmployment;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 

	}
}