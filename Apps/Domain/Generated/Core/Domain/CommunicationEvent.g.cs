// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial interface CommunicationEvent :  Transitional,UserInterfaceable,SearchResult,Searchable,Commentable,UniquelyIdentifiable, Allors.IObjectBase
	{


		global::System.DateTime ScheduledStart 
		{
			get;
			set;
		}

		bool ExistScheduledStart{get;}

		void RemoveScheduledStart();


		global::Allors.Extent<CommunicationEventStatus> CommunicationEventStatuses
		{ 
			get;
			set;
		}

		void AddCommunicationEventStatus (CommunicationEventStatus value);

		void RemoveCommunicationEventStatus (CommunicationEventStatus value);

		bool ExistCommunicationEventStatuses
		{
			get;
		}

		void RemoveCommunicationEventStatuses();


		global::Allors.Extent<Party> InvolvedParties
		{ 
			get;
			set;
		}

		void AddInvolvedParty (Party value);

		void RemoveInvolvedParty (Party value);

		bool ExistInvolvedParties
		{
			get;
		}

		void RemoveInvolvedParties();


		global::System.DateTime InitialScheduledStartDate 
		{
			get;
			set;
		}

		bool ExistInitialScheduledStartDate{get;}

		void RemoveInitialScheduledStartDate();


		CommunicationEventObjectState CurrentObjectState
		{ 
			get;
			set;
		}

		bool ExistCurrentObjectState
		{
			get;
		}

		void RemoveCurrentObjectState();


		global::Allors.Extent<CommunicationEventPurpose> EventPurposes
		{ 
			get;
			set;
		}

		void AddEventPurpose (CommunicationEventPurpose value);

		void RemoveEventPurpose (CommunicationEventPurpose value);

		bool ExistEventPurposes
		{
			get;
		}

		void RemoveEventPurposes();


		global::Allors.Extent<WorkEffort> WorkEfforts
		{ 
			get;
			set;
		}

		void AddWorkEffort (WorkEffort value);

		void RemoveWorkEffort (WorkEffort value);

		bool ExistWorkEfforts
		{
			get;
		}

		void RemoveWorkEfforts();


		global::System.String Description 
		{
			get;
			set;
		}

		bool ExistDescription{get;}

		void RemoveDescription();


		global::System.String Subject 
		{
			get;
			set;
		}

		bool ExistSubject{get;}

		void RemoveSubject();


		CommunicationEventObjectState PreviousObjectState
		{ 
			get;
			set;
		}

		bool ExistPreviousObjectState
		{
			get;
		}

		void RemovePreviousObjectState();


		global::Allors.Extent<Media> Documents
		{ 
			get;
			set;
		}

		void AddDocument (Media value);

		void RemoveDocument (Media value);

		bool ExistDocuments
		{
			get;
		}

		void RemoveDocuments();


		Case Case
		{ 
			get;
			set;
		}

		bool ExistCase
		{
			get;
		}

		void RemoveCase();


		Person Owner
		{ 
			get;
			set;
		}

		bool ExistOwner
		{
			get;
		}

		void RemoveOwner();


		CommunicationEventStatus CurrentCommunicationEventStatus
		{ 
			get;
			set;
		}

		bool ExistCurrentCommunicationEventStatus
		{
			get;
		}

		void RemoveCurrentCommunicationEventStatus();


		global::System.DateTime ActualStart 
		{
			get;
			set;
		}

		bool ExistActualStart{get;}

		void RemoveActualStart();



		PartyRelationship PartyRelationshipWhereCommunicationEvent
		{
			get;
		}

		bool ExistPartyRelationshipWhereCommunicationEvent
		{
			get;
		}


		global::Allors.Extent<RequirementCommunication> RequirementCommunicationsWhereCommunicationEvent
		{ 
			get;
		}

		bool ExistRequirementCommunicationsWhereCommunicationEvent
		{
			get;
		}

	}

	public class CommunicationEventMeta
	{
		public static readonly CommunicationEventMeta Instance = new CommunicationEventMeta();

		public global::Allors.Meta.Interface ObjectType = global::Allors.Meta.Interfaces.CommunicationEvent;

		public global::Allors.Meta.RoleType ScheduledStart 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CommunicationEventScheduledStart;
			}
		} 
		public global::Allors.Meta.RoleType CommunicationEventStatus 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CommunicationEventCommunicationEventStatus;
			}
		} 
		public global::Allors.Meta.RoleType InvolvedParty 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CommunicationEventInvolvedParty;
			}
		} 
		public global::Allors.Meta.RoleType InitialScheduledStartDate 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CommunicationEventInitialScheduledStartDate;
			}
		} 
		public global::Allors.Meta.RoleType CurrentObjectState 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CommunicationEventCurrentObjectState;
			}
		} 
		public global::Allors.Meta.RoleType EventPurpose 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CommunicationEventEventPurpose;
			}
		} 
		public global::Allors.Meta.RoleType WorkEffort 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CommunicationEventWorkEffort;
			}
		} 
		public global::Allors.Meta.RoleType Description 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CommunicationEventDescription;
			}
		} 
		public global::Allors.Meta.RoleType Subject 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CommunicationEventSubject;
			}
		} 
		public global::Allors.Meta.RoleType PreviousObjectState 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CommunicationEventPreviousObjectState;
			}
		} 
		public global::Allors.Meta.RoleType Document 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CommunicationEventDocument;
			}
		} 
		public global::Allors.Meta.RoleType Case 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CommunicationEventCase;
			}
		} 
		public global::Allors.Meta.RoleType Owner 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CommunicationEventOwner;
			}
		} 
		public global::Allors.Meta.RoleType CurrentCommunicationEventStatus 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CommunicationEventCurrentCommunicationEventStatus;
			}
		} 
		public global::Allors.Meta.RoleType ActualStart 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CommunicationEventActualStart;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType SearchData 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.SearchableSearchData;
			}
		} 
		public global::Allors.Meta.RoleType Comment 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CommentableComment;
			}
		} 
		public global::Allors.Meta.RoleType UniqueId 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UniquelyIdentifiableUniqueId;
			}
		} 

		public global::Allors.Meta.AssociationType PartyRelationshipWhereCommunicationEvent 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.PartyRelationshipCommunicationEvent;
			}
		} 
		public global::Allors.Meta.AssociationType RequirementCommunicationsWhereCommunicationEvent 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.RequirementCommunicationCommunicationEvent;
			}
		} 

		public global::Allors.Meta.MethodType Close 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.CommunicationEventClose;
			}
		} 
		public global::Allors.Meta.MethodType Reopen 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.CommunicationEventReopen;
			}
		} 
		public global::Allors.Meta.MethodType Cancel 
		{
			get
			{
				return global::Allors.Meta.MethodTypes.CommunicationEventCancel;
			}
		} 

	}
}