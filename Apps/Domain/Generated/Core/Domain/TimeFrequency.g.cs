// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	[System.Diagnostics.DebuggerNonUserCode]
	public partial class TimeFrequency : Allors.ObjectBase , Enumeration, IUnitOfMeasure
	{
		public static readonly TimeFrequencyMeta Meta = TimeFrequencyMeta.Instance;

		public TimeFrequency(Allors.IStrategy allors) : base(allors) {}

		public static TimeFrequency Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (TimeFrequency) allorsSession.Instantiate(allorsObjectId);		
		}



		virtual public global::Allors.Extent<LocalisedText> LocalisedNames
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LocalisedName);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LocalisedName, value);
			}
		}

		virtual public void AddLocalisedName (LocalisedText value)
		{
			Strategy.AddCompositeRole(Meta.LocalisedName, value);
		}

		virtual public void RemoveLocalisedName (LocalisedText value)
		{
			Strategy.RemoveCompositeRole(Meta.LocalisedName,value);
		}

		virtual public bool ExistLocalisedNames
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LocalisedName);
			}
		}

		virtual public void RemoveLocalisedNames()
		{
			Strategy.RemoveCompositeRoles(Meta.LocalisedName);
		}



		virtual public global::System.Boolean? IsActive 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.IsActive);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IsActive, value);
			}
		}

		virtual public bool ExistIsActive{
			get
			{
				return Strategy.ExistUnitRole(Meta.IsActive);
			}
		}

		virtual public void RemoveIsActive()
		{
			Strategy.RemoveUnitRole(Meta.IsActive);
		}



		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}



		virtual public global::System.Guid? UniqueId 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId);
		}



		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description);
		}


		virtual public global::Allors.Extent<UnitOfMeasureConversion> UnitOfMeasureConversions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.UnitOfMeasureConversion);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.UnitOfMeasureConversion, value);
			}
		}

		virtual public void AddUnitOfMeasureConversion (UnitOfMeasureConversion value)
		{
			Strategy.AddCompositeRole(Meta.UnitOfMeasureConversion, value);
		}

		virtual public void RemoveUnitOfMeasureConversion (UnitOfMeasureConversion value)
		{
			Strategy.RemoveCompositeRole(Meta.UnitOfMeasureConversion,value);
		}

		virtual public bool ExistUnitOfMeasureConversions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.UnitOfMeasureConversion);
			}
		}

		virtual public void RemoveUnitOfMeasureConversions()
		{
			Strategy.RemoveCompositeRoles(Meta.UnitOfMeasureConversion);
		}



		virtual public global::System.String Abbreviation 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Abbreviation);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Abbreviation, value);
			}
		}

		virtual public bool ExistAbbreviation{
			get
			{
				return Strategy.ExistUnitRole(Meta.Abbreviation);
			}
		}

		virtual public void RemoveAbbreviation()
		{
			Strategy.RemoveUnitRole(Meta.Abbreviation);
		}


		virtual public SearchData SearchData
		{ 
			get
			{
				return (SearchData) Strategy.GetCompositeRole(Meta.SearchData);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SearchData ,value);
			}
		}

		virtual public bool ExistSearchData
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SearchData);
			}
		}

		virtual public void RemoveSearchData()
		{
			Strategy.RemoveCompositeRole(Meta.SearchData);
		}



		virtual public global::Allors.Extent<PositionTypeRate> PositionTypeRatesWhereTimeFrequency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PositionTypeRatesWhereTimeFrequency);
			}
		}

		virtual public bool ExistPositionTypeRatesWhereTimeFrequency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PositionTypeRatesWhereTimeFrequency);
			}
		}


		virtual public global::Allors.Extent<PayHistory> PayHistoriesWhereTimeFrequency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PayHistoriesWhereTimeFrequency);
			}
		}

		virtual public bool ExistPayHistoriesWhereTimeFrequency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PayHistoriesWhereTimeFrequency);
			}
		}


		virtual public global::Allors.Extent<AccountingPeriod> AccountingPeriodsWhereTimeFrequency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.AccountingPeriodsWhereTimeFrequency);
			}
		}

		virtual public bool ExistAccountingPeriodsWhereTimeFrequency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.AccountingPeriodsWhereTimeFrequency);
			}
		}


		virtual public global::Allors.Extent<PayrollPreference> PayrollPreferencesWhereTimeFrequency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PayrollPreferencesWhereTimeFrequency);
			}
		}

		virtual public bool ExistPayrollPreferencesWhereTimeFrequency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PayrollPreferencesWhereTimeFrequency);
			}
		}


		virtual public global::Allors.Extent<VatRate> VatRatesWherePaymentFrequency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.VatRatesWherePaymentFrequency);
			}
		}

		virtual public bool ExistVatRatesWherePaymentFrequency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.VatRatesWherePaymentFrequency);
			}
		}


		virtual public global::Allors.Extent<RecurringCharge> RecurringChargesWhereTimeFrequency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RecurringChargesWhereTimeFrequency);
			}
		}

		virtual public bool ExistRecurringChargesWhereTimeFrequency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RecurringChargesWhereTimeFrequency);
			}
		}


		virtual public global::Allors.Extent<DeploymentUsage> DeploymentUsagesWhereTimeFrequency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.DeploymentUsagesWhereTimeFrequency);
			}
		}

		virtual public bool ExistDeploymentUsagesWhereTimeFrequency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.DeploymentUsagesWhereTimeFrequency);
			}
		}


		virtual public global::Allors.Extent<PartyBenefit> PartyBenefitsWhereTimeFrequency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyBenefitsWhereTimeFrequency);
			}
		}

		virtual public bool ExistPartyBenefitsWhereTimeFrequency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyBenefitsWhereTimeFrequency);
			}
		}


		virtual public global::Allors.Extent<UnitOfMeasureConversion> UnitOfMeasureConversionsWhereToUnitOfMeasure
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.UnitOfMeasureConversionsWhereToUnitOfMeasure);
			}
		}

		virtual public bool ExistUnitOfMeasureConversionsWhereToUnitOfMeasure
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.UnitOfMeasureConversionsWhereToUnitOfMeasure);
			}
		}

	}

	public class TimeFrequencyMeta
	{
		public static readonly TimeFrequencyMeta Instance = new TimeFrequencyMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.TimeFrequency;

		public global::Allors.Meta.RoleType LocalisedName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EnumerationLocalisedName;
			}
		} 
		public global::Allors.Meta.RoleType IsActive 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EnumerationIsActive;
			}
		} 
		public global::Allors.Meta.RoleType Name 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EnumerationName;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 
		public global::Allors.Meta.RoleType UniqueId 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UniquelyIdentifiableUniqueId;
			}
		} 
		public global::Allors.Meta.RoleType Description 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.IUnitOfMeasureDescription;
			}
		} 
		public global::Allors.Meta.RoleType UnitOfMeasureConversion 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.IUnitOfMeasureUnitOfMeasureConversion;
			}
		} 
		public global::Allors.Meta.RoleType Abbreviation 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.IUnitOfMeasureAbbreviation;
			}
		} 
		public global::Allors.Meta.RoleType SearchData 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.SearchableSearchData;
			}
		} 

		public global::Allors.Meta.AssociationType PositionTypeRatesWhereTimeFrequency 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.PositionTypeRateTimeFrequency;
			}
		} 
		public global::Allors.Meta.AssociationType PayHistoriesWhereTimeFrequency 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.PayHistoryTimeFrequency;
			}
		} 
		public global::Allors.Meta.AssociationType AccountingPeriodsWhereTimeFrequency 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.AccountingPeriodTimeFrequency;
			}
		} 
		public global::Allors.Meta.AssociationType PayrollPreferencesWhereTimeFrequency 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.PayrollPreferenceTimeFrequency;
			}
		} 
		public global::Allors.Meta.AssociationType VatRatesWherePaymentFrequency 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.VatRatePaymentFrequency;
			}
		} 
		public global::Allors.Meta.AssociationType RecurringChargesWhereTimeFrequency 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.RecurringChargeTimeFrequency;
			}
		} 
		public global::Allors.Meta.AssociationType DeploymentUsagesWhereTimeFrequency 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.DeploymentUsageTimeFrequency;
			}
		} 
		public global::Allors.Meta.AssociationType PartyBenefitsWhereTimeFrequency 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.PartyBenefitTimeFrequency;
			}
		} 
		public global::Allors.Meta.AssociationType UnitOfMeasureConversionsWhereToUnitOfMeasure 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.UnitOfMeasureConversionToUnitOfMeasure;
			}
		} 

	}
}