// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	[System.Diagnostics.DebuggerNonUserCode]
	public partial class PartyContactMechanism : Allors.ObjectBase , Commentable, UserInterfaceable
	{
		public static readonly PartyContactMechanismMeta Meta = PartyContactMechanismMeta.Instance;

		public PartyContactMechanism(Allors.IStrategy allors) : base(allors) {}

		public static PartyContactMechanism Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (PartyContactMechanism) allorsSession.Instantiate(allorsObjectId);		
		}



		virtual public ContactMechanismPurpose ContactPurpose
		{ 
			get
			{
				return (ContactMechanismPurpose) Strategy.GetCompositeRole(Meta.ContactPurpose);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ContactPurpose ,value);
			}
		}

		virtual public bool ExistContactPurpose
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ContactPurpose);
			}
		}

		virtual public void RemoveContactPurpose()
		{
			Strategy.RemoveCompositeRole(Meta.ContactPurpose);
		}


		virtual public ContactMechanism ContactMechanism
		{ 
			get
			{
				return (ContactMechanism) Strategy.GetCompositeRole(Meta.ContactMechanism);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ContactMechanism ,value);
			}
		}

		virtual public bool ExistContactMechanism
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ContactMechanism);
			}
		}

		virtual public void RemoveContactMechanism()
		{
			Strategy.RemoveCompositeRole(Meta.ContactMechanism);
		}



		virtual public global::System.Boolean? UseAsDefault 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.UseAsDefault);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UseAsDefault, value);
			}
		}

		virtual public bool ExistUseAsDefault{
			get
			{
				return Strategy.ExistUnitRole(Meta.UseAsDefault);
			}
		}

		virtual public void RemoveUseAsDefault()
		{
			Strategy.RemoveUnitRole(Meta.UseAsDefault);
		}



		virtual public global::System.Boolean? NonSolicitationIndicator 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.NonSolicitationIndicator);
			}
			set
			{
				Strategy.SetUnitRole(Meta.NonSolicitationIndicator, value);
			}
		}

		virtual public bool ExistNonSolicitationIndicator{
			get
			{
				return Strategy.ExistUnitRole(Meta.NonSolicitationIndicator);
			}
		}

		virtual public void RemoveNonSolicitationIndicator()
		{
			Strategy.RemoveUnitRole(Meta.NonSolicitationIndicator);
		}



		virtual public global::System.String Comment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Comment);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Comment, value);
			}
		}

		virtual public bool ExistComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.Comment);
			}
		}

		virtual public void RemoveComment()
		{
			Strategy.RemoveUnitRole(Meta.Comment);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}



		virtual public Party PartyWherePartyContactMechanism
		{ 
			get
			{
				return (Party) Strategy.GetCompositeAssociation(Meta.PartyWherePartyContactMechanism);
			}
		} 

		virtual public bool ExistPartyWherePartyContactMechanism
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.PartyWherePartyContactMechanism);
			}
		}

	}

	public class PartyContactMechanismMeta
	{
		public static readonly PartyContactMechanismMeta Instance = new PartyContactMechanismMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.PartyContactMechanism;

		public global::Allors.Meta.RoleType ContactPurpose 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PartyContactMechanismContactPurpose;
			}
		} 
		public global::Allors.Meta.RoleType ContactMechanism 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PartyContactMechanismContactMechanism;
			}
		} 
		public global::Allors.Meta.RoleType UseAsDefault 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PartyContactMechanismUseAsDefault;
			}
		} 
		public global::Allors.Meta.RoleType NonSolicitationIndicator 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PartyContactMechanismNonSolicitationIndicator;
			}
		} 
		public global::Allors.Meta.RoleType Comment 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CommentableComment;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 

		public global::Allors.Meta.AssociationType PartyWherePartyContactMechanism 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.PartyPartyContactMechanism;
			}
		} 

	}
}