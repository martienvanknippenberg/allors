// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class AccountingTransactionNumber : Allors.ObjectBase , AccessControlledObject, UserInterfaceable
	{
		public static readonly AccountingTransactionNumberMeta Meta = AccountingTransactionNumberMeta.Instance;

		public AccountingTransactionNumber(Allors.IStrategy allors) : base(allors) {}

		public static AccountingTransactionNumber Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (AccountingTransactionNumber) allorsSession.Instantiate(allorsObjectId);		
		}




		virtual public global::System.Int64 Number 
		{
			get
			{
				return (global::System.Int64) Strategy.GetUnitRole(Meta.Number);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Number, value);
			}
		}

		virtual public bool ExistNumber{
			get
			{
				return Strategy.ExistUnitRole(Meta.Number);
			}
		}

		virtual public void RemoveNumber()
		{
			Strategy.RemoveUnitRole(Meta.Number);
		}



		virtual public global::System.Int32 Year 
		{
			get
			{
				return (global::System.Int32) Strategy.GetUnitRole(Meta.Year);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Year, value);
			}
		}

		virtual public bool ExistYear{
			get
			{
				return Strategy.ExistUnitRole(Meta.Year);
			}
		}

		virtual public void RemoveYear()
		{
			Strategy.RemoveUnitRole(Meta.Year);
		}


		virtual public AccountingTransactionType AccountingTransactionType
		{ 
			get
			{
				return (AccountingTransactionType) Strategy.GetCompositeRole(Meta.AccountingTransactionType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.AccountingTransactionType ,value);
			}
		}

		virtual public bool ExistAccountingTransactionType
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.AccountingTransactionType);
			}
		}

		virtual public void RemoveAccountingTransactionType()
		{
			Strategy.RemoveCompositeRole(Meta.AccountingTransactionType);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}



		virtual public AccountingTransaction AccountingTransactionWhereAccountingTransactionNumber
		{ 
			get
			{
				return (AccountingTransaction) Strategy.GetCompositeAssociation(Meta.AccountingTransactionWhereAccountingTransactionNumber);
			}
		} 

		virtual public bool ExistAccountingTransactionWhereAccountingTransactionNumber
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.AccountingTransactionWhereAccountingTransactionNumber);
			}
		}


		virtual public InternalOrganisation InternalOrganisationWhereAccountingTransactionNumber
		{ 
			get
			{
				return (InternalOrganisation) Strategy.GetCompositeAssociation(Meta.InternalOrganisationWhereAccountingTransactionNumber);
			}
		} 

		virtual public bool ExistInternalOrganisationWhereAccountingTransactionNumber
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.InternalOrganisationWhereAccountingTransactionNumber);
			}
		}

	}

	public class AccountingTransactionNumberMeta
	{
		public static readonly AccountingTransactionNumberMeta Instance = new AccountingTransactionNumberMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.AccountingTransactionNumber;

		public global::Allors.Meta.RoleType Number 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccountingTransactionNumberNumber;
			}
		} 
		public global::Allors.Meta.RoleType Year 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccountingTransactionNumberYear;
			}
		} 
		public global::Allors.Meta.RoleType AccountingTransactionType 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccountingTransactionNumberAccountingTransactionType;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 

		public global::Allors.Meta.AssociationType AccountingTransactionWhereAccountingTransactionNumber 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.AccountingTransactionAccountingTransactionNumber;
			}
		} 
		public global::Allors.Meta.AssociationType InternalOrganisationWhereAccountingTransactionNumber 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.InternalOrganisationAccountingTransactionNumber;
			}
		} 

	}
}