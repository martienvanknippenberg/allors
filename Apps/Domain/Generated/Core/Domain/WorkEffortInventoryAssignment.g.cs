// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	[System.Diagnostics.DebuggerNonUserCode]
	public partial class WorkEffortInventoryAssignment : Allors.ObjectBase , UserInterfaceable
	{
		public static readonly WorkEffortInventoryAssignmentMeta Meta = WorkEffortInventoryAssignmentMeta.Instance;

		public WorkEffortInventoryAssignment(Allors.IStrategy allors) : base(allors) {}

		public static WorkEffortInventoryAssignment Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (WorkEffortInventoryAssignment) allorsSession.Instantiate(allorsObjectId);		
		}



		virtual public WorkEffort Assignment
		{ 
			get
			{
				return (WorkEffort) Strategy.GetCompositeRole(Meta.Assignment);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Assignment ,value);
			}
		}

		virtual public bool ExistAssignment
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Assignment);
			}
		}

		virtual public void RemoveAssignment()
		{
			Strategy.RemoveCompositeRole(Meta.Assignment);
		}


		virtual public InventoryItem InventoryItem
		{ 
			get
			{
				return (InventoryItem) Strategy.GetCompositeRole(Meta.InventoryItem);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.InventoryItem ,value);
			}
		}

		virtual public bool ExistInventoryItem
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.InventoryItem);
			}
		}

		virtual public void RemoveInventoryItem()
		{
			Strategy.RemoveCompositeRole(Meta.InventoryItem);
		}



		virtual public global::System.Int32? Quantity 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.Quantity);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Quantity, value);
			}
		}

		virtual public bool ExistQuantity{
			get
			{
				return Strategy.ExistUnitRole(Meta.Quantity);
			}
		}

		virtual public void RemoveQuantity()
		{
			Strategy.RemoveUnitRole(Meta.Quantity);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}



		virtual public WorkEffort WorkEffortWhereInventoryItemNeeded
		{ 
			get
			{
				return (WorkEffort) Strategy.GetCompositeAssociation(Meta.WorkEffortWhereInventoryItemNeeded);
			}
		} 

		virtual public bool ExistWorkEffortWhereInventoryItemNeeded
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.WorkEffortWhereInventoryItemNeeded);
			}
		}

	}

	public class WorkEffortInventoryAssignmentMeta
	{
		public static readonly WorkEffortInventoryAssignmentMeta Instance = new WorkEffortInventoryAssignmentMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.WorkEffortInventoryAssignment;

		public global::Allors.Meta.RoleType Assignment 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.WorkEffortInventoryAssignmentAssignment;
			}
		} 
		public global::Allors.Meta.RoleType InventoryItem 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.WorkEffortInventoryAssignmentInventoryItem;
			}
		} 
		public global::Allors.Meta.RoleType Quantity 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.WorkEffortInventoryAssignmentQuantity;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 

		public global::Allors.Meta.AssociationType WorkEffortWhereInventoryItemNeeded 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.WorkEffortInventoryItemNeeded;
			}
		} 

	}
}