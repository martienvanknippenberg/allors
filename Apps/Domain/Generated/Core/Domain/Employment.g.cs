// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	[System.Diagnostics.DebuggerNonUserCode]
	public partial class Employment : Allors.ObjectBase , PartyRelationship
	{
		public static readonly EmploymentMeta Meta = EmploymentMeta.Instance;

		public Employment(Allors.IStrategy allors) : base(allors) {}

		public static Employment Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Employment) allorsSession.Instantiate(allorsObjectId);		
		}



		virtual public InternalOrganisation Employer
		{ 
			get
			{
				return (InternalOrganisation) Strategy.GetCompositeRole(Meta.Employer);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Employer ,value);
			}
		}

		virtual public bool ExistEmployer
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Employer);
			}
		}

		virtual public void RemoveEmployer()
		{
			Strategy.RemoveCompositeRole(Meta.Employer);
		}


		virtual public Person Employee
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.Employee);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Employee ,value);
			}
		}

		virtual public bool ExistEmployee
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Employee);
			}
		}

		virtual public void RemoveEmployee()
		{
			Strategy.RemoveCompositeRole(Meta.Employee);
		}


		virtual public global::Allors.Extent<PayrollPreference> PayrollPreferences
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PayrollPreference);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PayrollPreference, value);
			}
		}

		virtual public void AddPayrollPreference (PayrollPreference value)
		{
			Strategy.AddCompositeRole(Meta.PayrollPreference, value);
		}

		virtual public void RemovePayrollPreference (PayrollPreference value)
		{
			Strategy.RemoveCompositeRole(Meta.PayrollPreference,value);
		}

		virtual public bool ExistPayrollPreferences
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PayrollPreference);
			}
		}

		virtual public void RemovePayrollPreferences()
		{
			Strategy.RemoveCompositeRoles(Meta.PayrollPreference);
		}


		virtual public EmploymentTerminationReason EmploymentTerminationReason
		{ 
			get
			{
				return (EmploymentTerminationReason) Strategy.GetCompositeRole(Meta.EmploymentTerminationReason);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.EmploymentTerminationReason ,value);
			}
		}

		virtual public bool ExistEmploymentTerminationReason
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.EmploymentTerminationReason);
			}
		}

		virtual public void RemoveEmploymentTerminationReason()
		{
			Strategy.RemoveCompositeRole(Meta.EmploymentTerminationReason);
		}


		virtual public EmploymentTermination EmploymentTermination
		{ 
			get
			{
				return (EmploymentTermination) Strategy.GetCompositeRole(Meta.EmploymentTermination);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.EmploymentTermination ,value);
			}
		}

		virtual public bool ExistEmploymentTermination
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.EmploymentTermination);
			}
		}

		virtual public void RemoveEmploymentTermination()
		{
			Strategy.RemoveCompositeRole(Meta.EmploymentTermination);
		}


		virtual public PartyRelationshipStatus PartyRelationshipStatus
		{ 
			get
			{
				return (PartyRelationshipStatus) Strategy.GetCompositeRole(Meta.PartyRelationshipStatus);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PartyRelationshipStatus ,value);
			}
		}

		virtual public bool ExistPartyRelationshipStatus
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PartyRelationshipStatus);
			}
		}

		virtual public void RemovePartyRelationshipStatus()
		{
			Strategy.RemoveCompositeRole(Meta.PartyRelationshipStatus);
		}


		virtual public global::Allors.Extent<Agreement> Agreements
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Agreement);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Agreement, value);
			}
		}

		virtual public void AddAgreement (Agreement value)
		{
			Strategy.AddCompositeRole(Meta.Agreement, value);
		}

		virtual public void RemoveAgreement (Agreement value)
		{
			Strategy.RemoveCompositeRole(Meta.Agreement,value);
		}

		virtual public bool ExistAgreements
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Agreement);
			}
		}

		virtual public void RemoveAgreements()
		{
			Strategy.RemoveCompositeRoles(Meta.Agreement);
		}


		virtual public PartyRelationshipPriority PartyRelationshipPriority
		{ 
			get
			{
				return (PartyRelationshipPriority) Strategy.GetCompositeRole(Meta.PartyRelationshipPriority);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PartyRelationshipPriority ,value);
			}
		}

		virtual public bool ExistPartyRelationshipPriority
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PartyRelationshipPriority);
			}
		}

		virtual public void RemovePartyRelationshipPriority()
		{
			Strategy.RemoveCompositeRole(Meta.PartyRelationshipPriority);
		}



		virtual public global::System.Decimal SimpleMovingAverage 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.SimpleMovingAverage);
			}
			set
			{
				Strategy.SetUnitRole(Meta.SimpleMovingAverage, value);
			}
		}

		virtual public bool ExistSimpleMovingAverage{
			get
			{
				return Strategy.ExistUnitRole(Meta.SimpleMovingAverage);
			}
		}

		virtual public void RemoveSimpleMovingAverage()
		{
			Strategy.RemoveUnitRole(Meta.SimpleMovingAverage);
		}


		virtual public global::Allors.Extent<CommunicationEvent> CommunicationEvents
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.CommunicationEvent);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.CommunicationEvent, value);
			}
		}

		virtual public void AddCommunicationEvent (CommunicationEvent value)
		{
			Strategy.AddCompositeRole(Meta.CommunicationEvent, value);
		}

		virtual public void RemoveCommunicationEvent (CommunicationEvent value)
		{
			Strategy.RemoveCompositeRole(Meta.CommunicationEvent,value);
		}

		virtual public bool ExistCommunicationEvents
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.CommunicationEvent);
			}
		}

		virtual public void RemoveCommunicationEvents()
		{
			Strategy.RemoveCompositeRoles(Meta.CommunicationEvent);
		}



		virtual public global::System.DateTime FromDate 
		{
			get
			{
				return (global::System.DateTime) Strategy.GetUnitRole(Meta.FromDate);
			}
			set
			{
				Strategy.SetUnitRole(Meta.FromDate, value);
			}
		}

		virtual public bool ExistFromDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.FromDate);
			}
		}

		virtual public void RemoveFromDate()
		{
			Strategy.RemoveUnitRole(Meta.FromDate);
		}



		virtual public global::System.DateTime ThroughDate 
		{
			get
			{
				return (global::System.DateTime) Strategy.GetUnitRole(Meta.ThroughDate);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ThroughDate, value);
			}
		}

		virtual public bool ExistThroughDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.ThroughDate);
			}
		}

		virtual public void RemoveThroughDate()
		{
			Strategy.RemoveUnitRole(Meta.ThroughDate);
		}



		virtual public global::System.String Comment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Comment);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Comment, value);
			}
		}

		virtual public bool ExistComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.Comment);
			}
		}

		virtual public void RemoveComment()
		{
			Strategy.RemoveUnitRole(Meta.Comment);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}



		virtual public global::Allors.Extent<PayHistory> PayHistoriesWhereEmployment
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PayHistoriesWhereEmployment);
			}
		}

		virtual public bool ExistPayHistoriesWhereEmployment
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PayHistoriesWhereEmployment);
			}
		}


		virtual public global::Allors.Extent<PartyBenefit> PartyBenefitsWhereEmployment
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyBenefitsWhereEmployment);
			}
		}

		virtual public bool ExistPartyBenefitsWhereEmployment
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyBenefitsWhereEmployment);
			}
		}


		virtual public global::Allors.Extent<PayCheck> PayChecksWhereEmployment
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PayChecksWhereEmployment);
			}
		}

		virtual public bool ExistPayChecksWhereEmployment
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PayChecksWhereEmployment);
			}
		}


		virtual public global::Allors.Extent<Person> PersonsWhereCurrentEmployment
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PersonsWhereCurrentEmployment);
			}
		}

		virtual public bool ExistPersonsWhereCurrentEmployment
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PersonsWhereCurrentEmployment);
			}
		}

	}

	public class EmploymentMeta
	{
		public static readonly EmploymentMeta Instance = new EmploymentMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.Employment;

		public global::Allors.Meta.RoleType Employer 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EmploymentEmployer;
			}
		} 
		public global::Allors.Meta.RoleType Employee 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EmploymentEmployee;
			}
		} 
		public global::Allors.Meta.RoleType PayrollPreference 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EmploymentPayrollPreference;
			}
		} 
		public global::Allors.Meta.RoleType EmploymentTerminationReason 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EmploymentEmploymentTerminationReason;
			}
		} 
		public global::Allors.Meta.RoleType EmploymentTermination 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EmploymentEmploymentTermination;
			}
		} 
		public global::Allors.Meta.RoleType PartyRelationshipStatus 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PartyRelationshipPartyRelationshipStatus;
			}
		} 
		public global::Allors.Meta.RoleType Agreement 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PartyRelationshipAgreement;
			}
		} 
		public global::Allors.Meta.RoleType PartyRelationshipPriority 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PartyRelationshipPartyRelationshipPriority;
			}
		} 
		public global::Allors.Meta.RoleType SimpleMovingAverage 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PartyRelationshipSimpleMovingAverage;
			}
		} 
		public global::Allors.Meta.RoleType CommunicationEvent 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PartyRelationshipCommunicationEvent;
			}
		} 
		public global::Allors.Meta.RoleType FromDate 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PeriodFromDate;
			}
		} 
		public global::Allors.Meta.RoleType ThroughDate 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PeriodThroughDate;
			}
		} 
		public global::Allors.Meta.RoleType Comment 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CommentableComment;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 

		public global::Allors.Meta.AssociationType PayHistoriesWhereEmployment 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.PayHistoryEmployment;
			}
		} 
		public global::Allors.Meta.AssociationType PartyBenefitsWhereEmployment 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.PartyBenefitEmployment;
			}
		} 
		public global::Allors.Meta.AssociationType PayChecksWhereEmployment 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.PayCheckEmployment;
			}
		} 
		public global::Allors.Meta.AssociationType PersonsWhereCurrentEmployment 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.PersonCurrentEmployment;
			}
		} 

	}
}