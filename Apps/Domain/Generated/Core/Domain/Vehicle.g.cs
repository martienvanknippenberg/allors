// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	[System.Diagnostics.DebuggerNonUserCode]
	public partial class Vehicle : Allors.ObjectBase , FixedAsset
	{
		public static readonly VehicleMeta Meta = VehicleMeta.Instance;

		public Vehicle(Allors.IStrategy allors) : base(allors) {}

		public static Vehicle Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Vehicle) allorsSession.Instantiate(allorsObjectId);		
		}




		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}



		virtual public global::System.DateTime LastServiceDate 
		{
			get
			{
				return (global::System.DateTime) Strategy.GetUnitRole(Meta.LastServiceDate);
			}
			set
			{
				Strategy.SetUnitRole(Meta.LastServiceDate, value);
			}
		}

		virtual public bool ExistLastServiceDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.LastServiceDate);
			}
		}

		virtual public void RemoveLastServiceDate()
		{
			Strategy.RemoveUnitRole(Meta.LastServiceDate);
		}



		virtual public global::System.DateTime AcquiredDate 
		{
			get
			{
				return (global::System.DateTime) Strategy.GetUnitRole(Meta.AcquiredDate);
			}
			set
			{
				Strategy.SetUnitRole(Meta.AcquiredDate, value);
			}
		}

		virtual public bool ExistAcquiredDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.AcquiredDate);
			}
		}

		virtual public void RemoveAcquiredDate()
		{
			Strategy.RemoveUnitRole(Meta.AcquiredDate);
		}



		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description);
		}



		virtual public global::System.Decimal ProductionCapacity 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.ProductionCapacity);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ProductionCapacity, value);
			}
		}

		virtual public bool ExistProductionCapacity{
			get
			{
				return Strategy.ExistUnitRole(Meta.ProductionCapacity);
			}
		}

		virtual public void RemoveProductionCapacity()
		{
			Strategy.RemoveUnitRole(Meta.ProductionCapacity);
		}



		virtual public global::System.DateTime NextServiceDate 
		{
			get
			{
				return (global::System.DateTime) Strategy.GetUnitRole(Meta.NextServiceDate);
			}
			set
			{
				Strategy.SetUnitRole(Meta.NextServiceDate, value);
			}
		}

		virtual public bool ExistNextServiceDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.NextServiceDate);
			}
		}

		virtual public void RemoveNextServiceDate()
		{
			Strategy.RemoveUnitRole(Meta.NextServiceDate);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}


		virtual public SearchData SearchData
		{ 
			get
			{
				return (SearchData) Strategy.GetCompositeRole(Meta.SearchData);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SearchData ,value);
			}
		}

		virtual public bool ExistSearchData
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SearchData);
			}
		}

		virtual public void RemoveSearchData()
		{
			Strategy.RemoveCompositeRole(Meta.SearchData);
		}



		virtual public global::Allors.Extent<ShipmentRouteSegment> ShipmentRouteSegmentsWhereVehicle
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentRouteSegmentsWhereVehicle);
			}
		}

		virtual public bool ExistShipmentRouteSegmentsWhereVehicle
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentRouteSegmentsWhereVehicle);
			}
		}


		virtual public global::Allors.Extent<WorkEffortFixedAssetAssignment> WorkEffortFixedAssetAssignmentsWhereFixedAsset
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortFixedAssetAssignmentsWhereFixedAsset);
			}
		}

		virtual public bool ExistWorkEffortFixedAssetAssignmentsWhereFixedAsset
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortFixedAssetAssignmentsWhereFixedAsset);
			}
		}


		virtual public global::Allors.Extent<PartyFixedAssetAssignment> PartyFixedAssetAssignmentsWhereFixedAsset
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartyFixedAssetAssignmentsWhereFixedAsset);
			}
		}

		virtual public bool ExistPartyFixedAssetAssignmentsWhereFixedAsset
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartyFixedAssetAssignmentsWhereFixedAsset);
			}
		}


		virtual public global::Allors.Extent<Depreciation> DepreciationsWhereFixedAsset
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.DepreciationsWhereFixedAsset);
			}
		}

		virtual public bool ExistDepreciationsWhereFixedAsset
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.DepreciationsWhereFixedAsset);
			}
		}


		virtual public global::Allors.Extent<WorkEffortType> WorkEffortTypesWhereFixedAssetToRepair
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortTypesWhereFixedAssetToRepair);
			}
		}

		virtual public bool ExistWorkEffortTypesWhereFixedAssetToRepair
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortTypesWhereFixedAssetToRepair);
			}
		}


		virtual public global::Allors.Extent<WorkEffortFixedAssetStandard> WorkEffortFixedAssetStandardsWhereFixedAsset
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortFixedAssetStandardsWhereFixedAsset);
			}
		}

		virtual public bool ExistWorkEffortFixedAssetStandardsWhereFixedAsset
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortFixedAssetStandardsWhereFixedAsset);
			}
		}


		virtual public global::Allors.Extent<WorkRequirement> WorkRequirementsWhereFixedAsset
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkRequirementsWhereFixedAsset);
			}
		}

		virtual public bool ExistWorkRequirementsWhereFixedAsset
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkRequirementsWhereFixedAsset);
			}
		}

	}

	public class VehicleMeta
	{
		public static readonly VehicleMeta Instance = new VehicleMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.Vehicle;

		public global::Allors.Meta.RoleType Name 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.FixedAssetName;
			}
		} 
		public global::Allors.Meta.RoleType LastServiceDate 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.FixedAssetLastServiceDate;
			}
		} 
		public global::Allors.Meta.RoleType AcquiredDate 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.FixedAssetAcquiredDate;
			}
		} 
		public global::Allors.Meta.RoleType Description 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.FixedAssetDescription;
			}
		} 
		public global::Allors.Meta.RoleType ProductionCapacity 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.FixedAssetProductionCapacity;
			}
		} 
		public global::Allors.Meta.RoleType NextServiceDate 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.FixedAssetNextServiceDate;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 
		public global::Allors.Meta.RoleType SearchData 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.SearchableSearchData;
			}
		} 

		public global::Allors.Meta.AssociationType ShipmentRouteSegmentsWhereVehicle 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.ShipmentRouteSegmentVehicle;
			}
		} 
		public global::Allors.Meta.AssociationType WorkEffortFixedAssetAssignmentsWhereFixedAsset 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.WorkEffortFixedAssetAssignmentFixedAsset;
			}
		} 
		public global::Allors.Meta.AssociationType PartyFixedAssetAssignmentsWhereFixedAsset 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.PartyFixedAssetAssignmentFixedAsset;
			}
		} 
		public global::Allors.Meta.AssociationType DepreciationsWhereFixedAsset 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.DepreciationFixedAsset;
			}
		} 
		public global::Allors.Meta.AssociationType WorkEffortTypesWhereFixedAssetToRepair 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.WorkEffortTypeFixedAssetToRepair;
			}
		} 
		public global::Allors.Meta.AssociationType WorkEffortFixedAssetStandardsWhereFixedAsset 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.WorkEffortFixedAssetStandardFixedAsset;
			}
		} 
		public global::Allors.Meta.AssociationType WorkRequirementsWhereFixedAsset 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.WorkRequirementFixedAsset;
			}
		} 

	}
}