// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	[System.Diagnostics.DebuggerNonUserCode]
	public partial class EngineeringChange : Allors.ObjectBase , Searchable, Transitional, UserInterfaceable, SearchResult
	{
		public static readonly EngineeringChangeMeta Meta = EngineeringChangeMeta.Instance;

		public EngineeringChange(Allors.IStrategy allors) : base(allors) {}

		public static EngineeringChange Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (EngineeringChange) allorsSession.Instantiate(allorsObjectId);		
		}



		virtual public Person Requestor
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.Requestor);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Requestor ,value);
			}
		}

		virtual public bool ExistRequestor
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Requestor);
			}
		}

		virtual public void RemoveRequestor()
		{
			Strategy.RemoveCompositeRole(Meta.Requestor);
		}


		virtual public Person Authorizer
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.Authorizer);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Authorizer ,value);
			}
		}

		virtual public bool ExistAuthorizer
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Authorizer);
			}
		}

		virtual public void RemoveAuthorizer()
		{
			Strategy.RemoveCompositeRole(Meta.Authorizer);
		}



		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description);
		}


		virtual public EngineeringChangeObjectState PreviousObjectState
		{ 
			get
			{
				return (EngineeringChangeObjectState) Strategy.GetCompositeRole(Meta.PreviousObjectState);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PreviousObjectState ,value);
			}
		}

		virtual public bool ExistPreviousObjectState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PreviousObjectState);
			}
		}

		virtual public void RemovePreviousObjectState()
		{
			Strategy.RemoveCompositeRole(Meta.PreviousObjectState);
		}


		virtual public Person Designer
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.Designer);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Designer ,value);
			}
		}

		virtual public bool ExistDesigner
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Designer);
			}
		}

		virtual public void RemoveDesigner()
		{
			Strategy.RemoveCompositeRole(Meta.Designer);
		}


		virtual public global::Allors.Extent<PartSpecification> PartSpecifications
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PartSpecification);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PartSpecification, value);
			}
		}

		virtual public void AddPartSpecification (PartSpecification value)
		{
			Strategy.AddCompositeRole(Meta.PartSpecification, value);
		}

		virtual public void RemovePartSpecification (PartSpecification value)
		{
			Strategy.RemoveCompositeRole(Meta.PartSpecification,value);
		}

		virtual public bool ExistPartSpecifications
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PartSpecification);
			}
		}

		virtual public void RemovePartSpecifications()
		{
			Strategy.RemoveCompositeRoles(Meta.PartSpecification);
		}


		virtual public global::Allors.Extent<PartBillOfMaterial> PartBillOfMaterials
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PartBillOfMaterial);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PartBillOfMaterial, value);
			}
		}

		virtual public void AddPartBillOfMaterial (PartBillOfMaterial value)
		{
			Strategy.AddCompositeRole(Meta.PartBillOfMaterial, value);
		}

		virtual public void RemovePartBillOfMaterial (PartBillOfMaterial value)
		{
			Strategy.RemoveCompositeRole(Meta.PartBillOfMaterial,value);
		}

		virtual public bool ExistPartBillOfMaterials
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PartBillOfMaterial);
			}
		}

		virtual public void RemovePartBillOfMaterials()
		{
			Strategy.RemoveCompositeRoles(Meta.PartBillOfMaterial);
		}


		virtual public EngineeringChangeObjectState CurrentObjectState
		{ 
			get
			{
				return (EngineeringChangeObjectState) Strategy.GetCompositeRole(Meta.CurrentObjectState);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CurrentObjectState ,value);
			}
		}

		virtual public bool ExistCurrentObjectState
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CurrentObjectState);
			}
		}

		virtual public void RemoveCurrentObjectState()
		{
			Strategy.RemoveCompositeRole(Meta.CurrentObjectState);
		}


		virtual public global::Allors.Extent<EngineeringChangeStatus> EngineeringChangeStatuses
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.EngineeringChangeStatus);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.EngineeringChangeStatus, value);
			}
		}

		virtual public void AddEngineeringChangeStatus (EngineeringChangeStatus value)
		{
			Strategy.AddCompositeRole(Meta.EngineeringChangeStatus, value);
		}

		virtual public void RemoveEngineeringChangeStatus (EngineeringChangeStatus value)
		{
			Strategy.RemoveCompositeRole(Meta.EngineeringChangeStatus,value);
		}

		virtual public bool ExistEngineeringChangeStatuses
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.EngineeringChangeStatus);
			}
		}

		virtual public void RemoveEngineeringChangeStatuses()
		{
			Strategy.RemoveCompositeRoles(Meta.EngineeringChangeStatus);
		}


		virtual public Person Tester
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.Tester);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Tester ,value);
			}
		}

		virtual public bool ExistTester
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Tester);
			}
		}

		virtual public void RemoveTester()
		{
			Strategy.RemoveCompositeRole(Meta.Tester);
		}


		virtual public EngineeringChangeStatus CurrentEngineeringChangeStatus
		{ 
			get
			{
				return (EngineeringChangeStatus) Strategy.GetCompositeRole(Meta.CurrentEngineeringChangeStatus);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.CurrentEngineeringChangeStatus ,value);
			}
		}

		virtual public bool ExistCurrentEngineeringChangeStatus
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.CurrentEngineeringChangeStatus);
			}
		}

		virtual public void RemoveCurrentEngineeringChangeStatus()
		{
			Strategy.RemoveCompositeRole(Meta.CurrentEngineeringChangeStatus);
		}


		virtual public SearchData SearchData
		{ 
			get
			{
				return (SearchData) Strategy.GetCompositeRole(Meta.SearchData);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SearchData ,value);
			}
		}

		virtual public bool ExistSearchData
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SearchData);
			}
		}

		virtual public void RemoveSearchData()
		{
			Strategy.RemoveCompositeRole(Meta.SearchData);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}

	}

	public class EngineeringChangeMeta
	{
		public static readonly EngineeringChangeMeta Instance = new EngineeringChangeMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.EngineeringChange;

		public global::Allors.Meta.RoleType Requestor 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngineeringChangeRequestor;
			}
		} 
		public global::Allors.Meta.RoleType Authorizer 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngineeringChangeAuthorizer;
			}
		} 
		public global::Allors.Meta.RoleType Description 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngineeringChangeDescription;
			}
		} 
		public global::Allors.Meta.RoleType PreviousObjectState 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngineeringChangePreviousObjectState;
			}
		} 
		public global::Allors.Meta.RoleType Designer 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngineeringChangeDesigner;
			}
		} 
		public global::Allors.Meta.RoleType PartSpecification 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngineeringChangePartSpecification;
			}
		} 
		public global::Allors.Meta.RoleType PartBillOfMaterial 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngineeringChangePartBillOfMaterial;
			}
		} 
		public global::Allors.Meta.RoleType CurrentObjectState 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngineeringChangeCurrentObjectState;
			}
		} 
		public global::Allors.Meta.RoleType EngineeringChangeStatus 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngineeringChangeEngineeringChangeStatus;
			}
		} 
		public global::Allors.Meta.RoleType Tester 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngineeringChangeTester;
			}
		} 
		public global::Allors.Meta.RoleType CurrentEngineeringChangeStatus 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EngineeringChangeCurrentEngineeringChangeStatus;
			}
		} 
		public global::Allors.Meta.RoleType SearchData 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.SearchableSearchData;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 

	}
}