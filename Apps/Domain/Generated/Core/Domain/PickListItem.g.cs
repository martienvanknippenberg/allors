// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	[System.Diagnostics.DebuggerNonUserCode]
	public partial class PickListItem : Allors.ObjectBase , UserInterfaceable
	{
		public static readonly PickListItemMeta Meta = PickListItemMeta.Instance;

		public PickListItem(Allors.IStrategy allors) : base(allors) {}

		public static PickListItem Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (PickListItem) allorsSession.Instantiate(allorsObjectId);		
		}




		virtual public global::System.Decimal? RequestedQuantity 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.RequestedQuantity);
			}
			set
			{
				Strategy.SetUnitRole(Meta.RequestedQuantity, value);
			}
		}

		virtual public bool ExistRequestedQuantity{
			get
			{
				return Strategy.ExistUnitRole(Meta.RequestedQuantity);
			}
		}

		virtual public void RemoveRequestedQuantity()
		{
			Strategy.RemoveUnitRole(Meta.RequestedQuantity);
		}


		virtual public InventoryItem InventoryItem
		{ 
			get
			{
				return (InventoryItem) Strategy.GetCompositeRole(Meta.InventoryItem);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.InventoryItem ,value);
			}
		}

		virtual public bool ExistInventoryItem
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.InventoryItem);
			}
		}

		virtual public void RemoveInventoryItem()
		{
			Strategy.RemoveCompositeRole(Meta.InventoryItem);
		}



		virtual public global::System.Decimal? ActualQuantity 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.ActualQuantity);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ActualQuantity, value);
			}
		}

		virtual public bool ExistActualQuantity{
			get
			{
				return Strategy.ExistUnitRole(Meta.ActualQuantity);
			}
		}

		virtual public void RemoveActualQuantity()
		{
			Strategy.RemoveUnitRole(Meta.ActualQuantity);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}



		virtual public PickList PickListWherePickListItem
		{ 
			get
			{
				return (PickList) Strategy.GetCompositeAssociation(Meta.PickListWherePickListItem);
			}
		} 

		virtual public bool ExistPickListWherePickListItem
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.PickListWherePickListItem);
			}
		}


		virtual public global::Allors.Extent<ItemIssuance> ItemIssuancesWherePickListItem
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ItemIssuancesWherePickListItem);
			}
		}

		virtual public bool ExistItemIssuancesWherePickListItem
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ItemIssuancesWherePickListItem);
			}
		}

	}

	public class PickListItemMeta
	{
		public static readonly PickListItemMeta Instance = new PickListItemMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.PickListItem;

		public global::Allors.Meta.RoleType RequestedQuantity 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PickListItemRequestedQuantity;
			}
		} 
		public global::Allors.Meta.RoleType InventoryItem 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PickListItemInventoryItem;
			}
		} 
		public global::Allors.Meta.RoleType ActualQuantity 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PickListItemActualQuantity;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 

		public global::Allors.Meta.AssociationType PickListWherePickListItem 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.PickListPickListItem;
			}
		} 
		public global::Allors.Meta.AssociationType ItemIssuancesWherePickListItem 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.ItemIssuancePickListItem;
			}
		} 

	}
}