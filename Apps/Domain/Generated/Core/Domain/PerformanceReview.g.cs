// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	[System.Diagnostics.DebuggerNonUserCode]
	public partial class PerformanceReview : Allors.ObjectBase , Searchable, UserInterfaceable, Commentable, SearchResult, Period
	{
		public static readonly PerformanceReviewMeta Meta = PerformanceReviewMeta.Instance;

		public PerformanceReview(Allors.IStrategy allors) : base(allors) {}

		public static PerformanceReview Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (PerformanceReview) allorsSession.Instantiate(allorsObjectId);		
		}



		virtual public Person Manager
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.Manager);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Manager ,value);
			}
		}

		virtual public bool ExistManager
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Manager);
			}
		}

		virtual public void RemoveManager()
		{
			Strategy.RemoveCompositeRole(Meta.Manager);
		}


		virtual public PayHistory PayHistory
		{ 
			get
			{
				return (PayHistory) Strategy.GetCompositeRole(Meta.PayHistory);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PayHistory ,value);
			}
		}

		virtual public bool ExistPayHistory
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PayHistory);
			}
		}

		virtual public void RemovePayHistory()
		{
			Strategy.RemoveCompositeRole(Meta.PayHistory);
		}


		virtual public PayCheck BonusPayCheck
		{ 
			get
			{
				return (PayCheck) Strategy.GetCompositeRole(Meta.BonusPayCheck);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.BonusPayCheck ,value);
			}
		}

		virtual public bool ExistBonusPayCheck
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.BonusPayCheck);
			}
		}

		virtual public void RemoveBonusPayCheck()
		{
			Strategy.RemoveCompositeRole(Meta.BonusPayCheck);
		}


		virtual public global::Allors.Extent<PerformanceReviewItem> PerformanceReviewItems
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.PerformanceReviewItem);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.PerformanceReviewItem, value);
			}
		}

		virtual public void AddPerformanceReviewItem (PerformanceReviewItem value)
		{
			Strategy.AddCompositeRole(Meta.PerformanceReviewItem, value);
		}

		virtual public void RemovePerformanceReviewItem (PerformanceReviewItem value)
		{
			Strategy.RemoveCompositeRole(Meta.PerformanceReviewItem,value);
		}

		virtual public bool ExistPerformanceReviewItems
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.PerformanceReviewItem);
			}
		}

		virtual public void RemovePerformanceReviewItems()
		{
			Strategy.RemoveCompositeRoles(Meta.PerformanceReviewItem);
		}


		virtual public Person Employee
		{ 
			get
			{
				return (Person) Strategy.GetCompositeRole(Meta.Employee);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Employee ,value);
			}
		}

		virtual public bool ExistEmployee
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Employee);
			}
		}

		virtual public void RemoveEmployee()
		{
			Strategy.RemoveCompositeRole(Meta.Employee);
		}


		virtual public Position ResultingPosition
		{ 
			get
			{
				return (Position) Strategy.GetCompositeRole(Meta.ResultingPosition);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.ResultingPosition ,value);
			}
		}

		virtual public bool ExistResultingPosition
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.ResultingPosition);
			}
		}

		virtual public void RemoveResultingPosition()
		{
			Strategy.RemoveCompositeRole(Meta.ResultingPosition);
		}


		virtual public SearchData SearchData
		{ 
			get
			{
				return (SearchData) Strategy.GetCompositeRole(Meta.SearchData);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SearchData ,value);
			}
		}

		virtual public bool ExistSearchData
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SearchData);
			}
		}

		virtual public void RemoveSearchData()
		{
			Strategy.RemoveCompositeRole(Meta.SearchData);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}



		virtual public global::System.String Comment 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Comment);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Comment, value);
			}
		}

		virtual public bool ExistComment{
			get
			{
				return Strategy.ExistUnitRole(Meta.Comment);
			}
		}

		virtual public void RemoveComment()
		{
			Strategy.RemoveUnitRole(Meta.Comment);
		}



		virtual public global::System.DateTime? FromDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.FromDate);
			}
			set
			{
				Strategy.SetUnitRole(Meta.FromDate, value);
			}
		}

		virtual public bool ExistFromDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.FromDate);
			}
		}

		virtual public void RemoveFromDate()
		{
			Strategy.RemoveUnitRole(Meta.FromDate);
		}



		virtual public global::System.DateTime? ThroughDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.ThroughDate);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ThroughDate, value);
			}
		}

		virtual public bool ExistThroughDate{
			get
			{
				return Strategy.ExistUnitRole(Meta.ThroughDate);
			}
		}

		virtual public void RemoveThroughDate()
		{
			Strategy.RemoveUnitRole(Meta.ThroughDate);
		}

	}

	public class PerformanceReviewMeta
	{
		public static readonly PerformanceReviewMeta Instance = new PerformanceReviewMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.PerformanceReview;

		public global::Allors.Meta.RoleType Manager 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PerformanceReviewManager;
			}
		} 
		public global::Allors.Meta.RoleType PayHistory 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PerformanceReviewPayHistory;
			}
		} 
		public global::Allors.Meta.RoleType BonusPayCheck 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PerformanceReviewBonusPayCheck;
			}
		} 
		public global::Allors.Meta.RoleType PerformanceReviewItem 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PerformanceReviewPerformanceReviewItem;
			}
		} 
		public global::Allors.Meta.RoleType Employee 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PerformanceReviewEmployee;
			}
		} 
		public global::Allors.Meta.RoleType ResultingPosition 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PerformanceReviewResultingPosition;
			}
		} 
		public global::Allors.Meta.RoleType SearchData 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.SearchableSearchData;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 
		public global::Allors.Meta.RoleType Comment 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.CommentableComment;
			}
		} 
		public global::Allors.Meta.RoleType FromDate 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PeriodFromDate;
			}
		} 
		public global::Allors.Meta.RoleType ThroughDate 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.PeriodThroughDate;
			}
		} 

	}
}