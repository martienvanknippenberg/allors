// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class VatRate : Allors.ObjectBase , UserInterfaceable
	{
		public static readonly VatRateMeta Meta = VatRateMeta.Instance;

		public VatRate(Allors.IStrategy allors) : base(allors) {}

		public static VatRate Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (VatRate) allorsSession.Instantiate(allorsObjectId);		
		}



		virtual public VatCalculationMethod VatCalculationMethod
		{ 
			get
			{
				return (VatCalculationMethod) Strategy.GetCompositeRole(Meta.VatCalculationMethod);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatCalculationMethod ,value);
			}
		}

		virtual public bool ExistVatCalculationMethod
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatCalculationMethod);
			}
		}

		virtual public void RemoveVatCalculationMethod()
		{
			Strategy.RemoveCompositeRole(Meta.VatCalculationMethod);
		}


		virtual public global::Allors.Extent<VatReturnBox> VatReturnBoxes
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.VatReturnBox);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.VatReturnBox, value);
			}
		}

		virtual public void AddVatReturnBox (VatReturnBox value)
		{
			Strategy.AddCompositeRole(Meta.VatReturnBox, value);
		}

		virtual public void RemoveVatReturnBox (VatReturnBox value)
		{
			Strategy.RemoveCompositeRole(Meta.VatReturnBox,value);
		}

		virtual public bool ExistVatReturnBoxes
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.VatReturnBox);
			}
		}

		virtual public void RemoveVatReturnBoxes()
		{
			Strategy.RemoveCompositeRoles(Meta.VatReturnBox);
		}



		virtual public global::System.Decimal Rate 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.Rate);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Rate, value);
			}
		}

		virtual public bool ExistRate{
			get
			{
				return Strategy.ExistUnitRole(Meta.Rate);
			}
		}

		virtual public void RemoveRate()
		{
			Strategy.RemoveUnitRole(Meta.Rate);
		}


		virtual public OrganisationGlAccount VatPayableAccount
		{ 
			get
			{
				return (OrganisationGlAccount) Strategy.GetCompositeRole(Meta.VatPayableAccount);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatPayableAccount ,value);
			}
		}

		virtual public bool ExistVatPayableAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatPayableAccount);
			}
		}

		virtual public void RemoveVatPayableAccount()
		{
			Strategy.RemoveCompositeRole(Meta.VatPayableAccount);
		}


		virtual public Organisation TaxAuthority
		{ 
			get
			{
				return (Organisation) Strategy.GetCompositeRole(Meta.TaxAuthority);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.TaxAuthority ,value);
			}
		}

		virtual public bool ExistTaxAuthority
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.TaxAuthority);
			}
		}

		virtual public void RemoveTaxAuthority()
		{
			Strategy.RemoveCompositeRole(Meta.TaxAuthority);
		}


		virtual public VatRateUsage VatRateUsage
		{ 
			get
			{
				return (VatRateUsage) Strategy.GetCompositeRole(Meta.VatRateUsage);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatRateUsage ,value);
			}
		}

		virtual public bool ExistVatRateUsage
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatRateUsage);
			}
		}

		virtual public void RemoveVatRateUsage()
		{
			Strategy.RemoveCompositeRole(Meta.VatRateUsage);
		}


		virtual public VatRatePurchaseKind VatRatePurchaseKind
		{ 
			get
			{
				return (VatRatePurchaseKind) Strategy.GetCompositeRole(Meta.VatRatePurchaseKind);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatRatePurchaseKind ,value);
			}
		}

		virtual public bool ExistVatRatePurchaseKind
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatRatePurchaseKind);
			}
		}

		virtual public void RemoveVatRatePurchaseKind()
		{
			Strategy.RemoveCompositeRole(Meta.VatRatePurchaseKind);
		}


		virtual public VatTariff VatTariff
		{ 
			get
			{
				return (VatTariff) Strategy.GetCompositeRole(Meta.VatTariff);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatTariff ,value);
			}
		}

		virtual public bool ExistVatTariff
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatTariff);
			}
		}

		virtual public void RemoveVatTariff()
		{
			Strategy.RemoveCompositeRole(Meta.VatTariff);
		}


		virtual public TimeFrequency PaymentFrequency
		{ 
			get
			{
				return (TimeFrequency) Strategy.GetCompositeRole(Meta.PaymentFrequency);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.PaymentFrequency ,value);
			}
		}

		virtual public bool ExistPaymentFrequency
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.PaymentFrequency);
			}
		}

		virtual public void RemovePaymentFrequency()
		{
			Strategy.RemoveCompositeRole(Meta.PaymentFrequency);
		}


		virtual public OrganisationGlAccount VatToPayAccount
		{ 
			get
			{
				return (OrganisationGlAccount) Strategy.GetCompositeRole(Meta.VatToPayAccount);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatToPayAccount ,value);
			}
		}

		virtual public bool ExistVatToPayAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatToPayAccount);
			}
		}

		virtual public void RemoveVatToPayAccount()
		{
			Strategy.RemoveCompositeRole(Meta.VatToPayAccount);
		}


		virtual public EuSalesListType EuSalesListType
		{ 
			get
			{
				return (EuSalesListType) Strategy.GetCompositeRole(Meta.EuSalesListType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.EuSalesListType ,value);
			}
		}

		virtual public bool ExistEuSalesListType
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.EuSalesListType);
			}
		}

		virtual public void RemoveEuSalesListType()
		{
			Strategy.RemoveCompositeRole(Meta.EuSalesListType);
		}


		virtual public OrganisationGlAccount VatToReceiveAccount
		{ 
			get
			{
				return (OrganisationGlAccount) Strategy.GetCompositeRole(Meta.VatToReceiveAccount);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatToReceiveAccount ,value);
			}
		}

		virtual public bool ExistVatToReceiveAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatToReceiveAccount);
			}
		}

		virtual public void RemoveVatToReceiveAccount()
		{
			Strategy.RemoveCompositeRole(Meta.VatToReceiveAccount);
		}


		virtual public OrganisationGlAccount VatReceivableAccount
		{ 
			get
			{
				return (OrganisationGlAccount) Strategy.GetCompositeRole(Meta.VatReceivableAccount);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatReceivableAccount ,value);
			}
		}

		virtual public bool ExistVatReceivableAccount
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatReceivableAccount);
			}
		}

		virtual public void RemoveVatReceivableAccount()
		{
			Strategy.RemoveCompositeRole(Meta.VatReceivableAccount);
		}



		virtual public global::System.Boolean ReverseCharge 
		{
			get
			{
				return (global::System.Boolean) Strategy.GetUnitRole(Meta.ReverseCharge);
			}
			set
			{
				Strategy.SetUnitRole(Meta.ReverseCharge, value);
			}
		}

		virtual public bool ExistReverseCharge{
			get
			{
				return Strategy.ExistUnitRole(Meta.ReverseCharge);
			}
		}

		virtual public void RemoveReverseCharge()
		{
			Strategy.RemoveUnitRole(Meta.ReverseCharge);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}



		virtual public global::Allors.Extent<Product> ProductsWhereVatRate
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductsWhereVatRate);
			}
		}

		virtual public bool ExistProductsWhereVatRate
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductsWhereVatRate);
			}
		}


		virtual public global::Allors.Extent<VatRegime> VatRegimesWhereVatRate
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.VatRegimesWhereVatRate);
			}
		}

		virtual public bool ExistVatRegimesWhereVatRate
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.VatRegimesWhereVatRate);
			}
		}


		virtual public global::Allors.Extent<InvoiceVatRateItem> InvoiceVatRateItemsWhereVatRate
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.InvoiceVatRateItemsWhereVatRate);
			}
		}

		virtual public bool ExistInvoiceVatRateItemsWhereVatRate
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.InvoiceVatRateItemsWhereVatRate);
			}
		}


		virtual public global::Allors.Extent<OrderAdjustment> OrderAdjustmentsWhereVatRate
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderAdjustmentsWhereVatRate);
			}
		}

		virtual public bool ExistOrderAdjustmentsWhereVatRate
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderAdjustmentsWhereVatRate);
			}
		}


		virtual public global::Allors.Extent<ProductFeature> ProductFeaturesWhereVatRate
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductFeaturesWhereVatRate);
			}
		}

		virtual public bool ExistProductFeaturesWhereVatRate
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductFeaturesWhereVatRate);
			}
		}


		virtual public global::Allors.Extent<InvoiceItem> InvoiceItemsWhereDerivedVatRate
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.InvoiceItemsWhereDerivedVatRate);
			}
		}

		virtual public bool ExistInvoiceItemsWhereDerivedVatRate
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.InvoiceItemsWhereDerivedVatRate);
			}
		}


		virtual public global::Allors.Extent<OrderItem> OrderItemsWhereDerivedVatRate
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.OrderItemsWhereDerivedVatRate);
			}
		}

		virtual public bool ExistOrderItemsWhereDerivedVatRate
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.OrderItemsWhereDerivedVatRate);
			}
		}


		virtual public Country CountryWhereVatRate
		{ 
			get
			{
				return (Country) Strategy.GetCompositeAssociation(Meta.CountryWhereVatRate);
			}
		} 

		virtual public bool ExistCountryWhereVatRate
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.CountryWhereVatRate);
			}
		}

	}

	public class VatRateMeta
	{
		public static readonly VatRateMeta Instance = new VatRateMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.VatRate;

		public global::Allors.Meta.RoleType VatCalculationMethod 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.VatRateVatCalculationMethod;
			}
		} 
		public global::Allors.Meta.RoleType VatReturnBox 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.VatRateVatReturnBox;
			}
		} 
		public global::Allors.Meta.RoleType Rate 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.VatRateRate;
			}
		} 
		public global::Allors.Meta.RoleType VatPayableAccount 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.VatRateVatPayableAccount;
			}
		} 
		public global::Allors.Meta.RoleType TaxAuthority 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.VatRateTaxAuthority;
			}
		} 
		public global::Allors.Meta.RoleType VatRateUsage 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.VatRateVatRateUsage;
			}
		} 
		public global::Allors.Meta.RoleType VatRatePurchaseKind 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.VatRateVatRatePurchaseKind;
			}
		} 
		public global::Allors.Meta.RoleType VatTariff 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.VatRateVatTariff;
			}
		} 
		public global::Allors.Meta.RoleType PaymentFrequency 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.VatRatePaymentFrequency;
			}
		} 
		public global::Allors.Meta.RoleType VatToPayAccount 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.VatRateVatToPayAccount;
			}
		} 
		public global::Allors.Meta.RoleType EuSalesListType 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.VatRateEuSalesListType;
			}
		} 
		public global::Allors.Meta.RoleType VatToReceiveAccount 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.VatRateVatToReceiveAccount;
			}
		} 
		public global::Allors.Meta.RoleType VatReceivableAccount 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.VatRateVatReceivableAccount;
			}
		} 
		public global::Allors.Meta.RoleType ReverseCharge 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.VatRateReverseCharge;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 

		public global::Allors.Meta.AssociationType ProductsWhereVatRate 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.ProductVatRate;
			}
		} 
		public global::Allors.Meta.AssociationType VatRegimesWhereVatRate 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.VatRegimeVatRate;
			}
		} 
		public global::Allors.Meta.AssociationType InvoiceVatRateItemsWhereVatRate 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.InvoiceVatRateItemVatRate;
			}
		} 
		public global::Allors.Meta.AssociationType OrderAdjustmentsWhereVatRate 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.OrderAdjustmentVatRate;
			}
		} 
		public global::Allors.Meta.AssociationType ProductFeaturesWhereVatRate 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.ProductFeatureVatRate;
			}
		} 
		public global::Allors.Meta.AssociationType InvoiceItemsWhereDerivedVatRate 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.InvoiceItemDerivedVatRate;
			}
		} 
		public global::Allors.Meta.AssociationType OrderItemsWhereDerivedVatRate 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.OrderItemDerivedVatRate;
			}
		} 
		public global::Allors.Meta.AssociationType CountryWhereVatRate 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.CountryVatRate;
			}
		} 

	}
}