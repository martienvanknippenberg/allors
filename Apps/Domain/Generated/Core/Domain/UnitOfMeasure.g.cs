// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	[System.Diagnostics.DebuggerNonUserCode]
	public partial class UnitOfMeasure : Allors.ObjectBase , IUnitOfMeasure, UniquelyIdentifiable, UserInterfaceable, Searchable, Enumeration
	{
		public static readonly UnitOfMeasureMeta Meta = UnitOfMeasureMeta.Instance;

		public UnitOfMeasure(Allors.IStrategy allors) : base(allors) {}

		public static UnitOfMeasure Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (UnitOfMeasure) allorsSession.Instantiate(allorsObjectId);		
		}




		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description);
		}


		virtual public global::Allors.Extent<UnitOfMeasureConversion> UnitOfMeasureConversions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.UnitOfMeasureConversion);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.UnitOfMeasureConversion, value);
			}
		}

		virtual public void AddUnitOfMeasureConversion (UnitOfMeasureConversion value)
		{
			Strategy.AddCompositeRole(Meta.UnitOfMeasureConversion, value);
		}

		virtual public void RemoveUnitOfMeasureConversion (UnitOfMeasureConversion value)
		{
			Strategy.RemoveCompositeRole(Meta.UnitOfMeasureConversion,value);
		}

		virtual public bool ExistUnitOfMeasureConversions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.UnitOfMeasureConversion);
			}
		}

		virtual public void RemoveUnitOfMeasureConversions()
		{
			Strategy.RemoveCompositeRoles(Meta.UnitOfMeasureConversion);
		}



		virtual public global::System.String Abbreviation 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Abbreviation);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Abbreviation, value);
			}
		}

		virtual public bool ExistAbbreviation{
			get
			{
				return Strategy.ExistUnitRole(Meta.Abbreviation);
			}
		}

		virtual public void RemoveAbbreviation()
		{
			Strategy.RemoveUnitRole(Meta.Abbreviation);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}



		virtual public global::System.Guid? UniqueId 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId);
		}


		virtual public SearchData SearchData
		{ 
			get
			{
				return (SearchData) Strategy.GetCompositeRole(Meta.SearchData);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SearchData ,value);
			}
		}

		virtual public bool ExistSearchData
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SearchData);
			}
		}

		virtual public void RemoveSearchData()
		{
			Strategy.RemoveCompositeRole(Meta.SearchData);
		}


		virtual public global::Allors.Extent<LocalisedText> LocalisedNames
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LocalisedName);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LocalisedName, value);
			}
		}

		virtual public void AddLocalisedName (LocalisedText value)
		{
			Strategy.AddCompositeRole(Meta.LocalisedName, value);
		}

		virtual public void RemoveLocalisedName (LocalisedText value)
		{
			Strategy.RemoveCompositeRole(Meta.LocalisedName,value);
		}

		virtual public bool ExistLocalisedNames
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LocalisedName);
			}
		}

		virtual public void RemoveLocalisedNames()
		{
			Strategy.RemoveCompositeRoles(Meta.LocalisedName);
		}



		virtual public global::System.Boolean? IsActive 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.IsActive);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IsActive, value);
			}
		}

		virtual public bool ExistIsActive{
			get
			{
				return Strategy.ExistUnitRole(Meta.IsActive);
			}
		}

		virtual public void RemoveIsActive()
		{
			Strategy.RemoveUnitRole(Meta.IsActive);
		}



		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}



		virtual public global::Allors.Extent<QuoteItem> QuoteItemsWhereUnitOfMeasure
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.QuoteItemsWhereUnitOfMeasure);
			}
		}

		virtual public bool ExistQuoteItemsWhereUnitOfMeasure
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.QuoteItemsWhereUnitOfMeasure);
			}
		}


		virtual public global::Allors.Extent<Dimension> DimensionsWhereUnitOfMeasure
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.DimensionsWhereUnitOfMeasure);
			}
		}

		virtual public bool ExistDimensionsWhereUnitOfMeasure
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.DimensionsWhereUnitOfMeasure);
			}
		}


		virtual public global::Allors.Extent<ProductPurchasePrice> ProductPurchasePricesWhereUnitOfMeasure
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductPurchasePricesWhereUnitOfMeasure);
			}
		}

		virtual public bool ExistProductPurchasePricesWhereUnitOfMeasure
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductPurchasePricesWhereUnitOfMeasure);
			}
		}


		virtual public global::Allors.Extent<Product> ProductsWhereUnitOfMeasure
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductsWhereUnitOfMeasure);
			}
		}

		virtual public bool ExistProductsWhereUnitOfMeasure
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductsWhereUnitOfMeasure);
			}
		}


		virtual public global::Allors.Extent<InventoryItem> InventoryItemsWhereUnitOfMeasure
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.InventoryItemsWhereUnitOfMeasure);
			}
		}

		virtual public bool ExistInventoryItemsWhereUnitOfMeasure
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.InventoryItemsWhereUnitOfMeasure);
			}
		}


		virtual public global::Allors.Extent<TimeEntry> TimeEntriesWhereUnitOfMeasure
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.TimeEntriesWhereUnitOfMeasure);
			}
		}

		virtual public bool ExistTimeEntriesWhereUnitOfMeasure
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.TimeEntriesWhereUnitOfMeasure);
			}
		}


		virtual public global::Allors.Extent<EngagementRate> EngagementRatesWhereUnitOfMeasure
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EngagementRatesWhereUnitOfMeasure);
			}
		}

		virtual public bool ExistEngagementRatesWhereUnitOfMeasure
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EngagementRatesWhereUnitOfMeasure);
			}
		}


		virtual public global::Allors.Extent<Part> PartsWhereUnitOfMeasure
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PartsWhereUnitOfMeasure);
			}
		}

		virtual public bool ExistPartsWhereUnitOfMeasure
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PartsWhereUnitOfMeasure);
			}
		}


		virtual public global::Allors.Extent<UtilizationCharge> UtilizationChargesWhereUnitOfMeasure
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.UtilizationChargesWhereUnitOfMeasure);
			}
		}

		virtual public bool ExistUtilizationChargesWhereUnitOfMeasure
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.UtilizationChargesWhereUnitOfMeasure);
			}
		}


		virtual public global::Allors.Extent<VolumeUsage> VolumeUsagesWhereUnitOfMeasure
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.VolumeUsagesWhereUnitOfMeasure);
			}
		}

		virtual public bool ExistVolumeUsagesWhereUnitOfMeasure
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.VolumeUsagesWhereUnitOfMeasure);
			}
		}


		virtual public global::Allors.Extent<ActivityUsage> ActivityUsagesWhereUnitOfMeasure
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ActivityUsagesWhereUnitOfMeasure);
			}
		}

		virtual public bool ExistActivityUsagesWhereUnitOfMeasure
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ActivityUsagesWhereUnitOfMeasure);
			}
		}


		virtual public global::Allors.Extent<UnitOfMeasureConversion> UnitOfMeasureConversionsWhereToUnitOfMeasure
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.UnitOfMeasureConversionsWhereToUnitOfMeasure);
			}
		}

		virtual public bool ExistUnitOfMeasureConversionsWhereToUnitOfMeasure
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.UnitOfMeasureConversionsWhereToUnitOfMeasure);
			}
		}

	}

	public class UnitOfMeasureMeta
	{
		public static readonly UnitOfMeasureMeta Instance = new UnitOfMeasureMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.UnitOfMeasure;

		public global::Allors.Meta.RoleType Description 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.IUnitOfMeasureDescription;
			}
		} 
		public global::Allors.Meta.RoleType UnitOfMeasureConversion 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.IUnitOfMeasureUnitOfMeasureConversion;
			}
		} 
		public global::Allors.Meta.RoleType Abbreviation 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.IUnitOfMeasureAbbreviation;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 
		public global::Allors.Meta.RoleType UniqueId 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UniquelyIdentifiableUniqueId;
			}
		} 
		public global::Allors.Meta.RoleType SearchData 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.SearchableSearchData;
			}
		} 
		public global::Allors.Meta.RoleType LocalisedName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EnumerationLocalisedName;
			}
		} 
		public global::Allors.Meta.RoleType IsActive 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EnumerationIsActive;
			}
		} 
		public global::Allors.Meta.RoleType Name 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EnumerationName;
			}
		} 

		public global::Allors.Meta.AssociationType QuoteItemsWhereUnitOfMeasure 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.QuoteItemUnitOfMeasure;
			}
		} 
		public global::Allors.Meta.AssociationType DimensionsWhereUnitOfMeasure 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.DimensionUnitOfMeasure;
			}
		} 
		public global::Allors.Meta.AssociationType ProductPurchasePricesWhereUnitOfMeasure 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.ProductPurchasePriceUnitOfMeasure;
			}
		} 
		public global::Allors.Meta.AssociationType ProductsWhereUnitOfMeasure 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.ProductUnitOfMeasure;
			}
		} 
		public global::Allors.Meta.AssociationType InventoryItemsWhereUnitOfMeasure 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.InventoryItemUnitOfMeasure;
			}
		} 
		public global::Allors.Meta.AssociationType TimeEntriesWhereUnitOfMeasure 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.TimeEntryUnitOfMeasure;
			}
		} 
		public global::Allors.Meta.AssociationType EngagementRatesWhereUnitOfMeasure 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.EngagementRateUnitOfMeasure;
			}
		} 
		public global::Allors.Meta.AssociationType PartsWhereUnitOfMeasure 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.PartUnitOfMeasure;
			}
		} 
		public global::Allors.Meta.AssociationType UtilizationChargesWhereUnitOfMeasure 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.UtilizationChargeUnitOfMeasure;
			}
		} 
		public global::Allors.Meta.AssociationType VolumeUsagesWhereUnitOfMeasure 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.VolumeUsageUnitOfMeasure;
			}
		} 
		public global::Allors.Meta.AssociationType ActivityUsagesWhereUnitOfMeasure 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.ActivityUsageUnitOfMeasure;
			}
		} 
		public global::Allors.Meta.AssociationType UnitOfMeasureConversionsWhereToUnitOfMeasure 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.UnitOfMeasureConversionToUnitOfMeasure;
			}
		} 

	}
}