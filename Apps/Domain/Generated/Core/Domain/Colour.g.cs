// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	[System.Diagnostics.DebuggerNonUserCode]
	public partial class Colour : Allors.ObjectBase , Enumeration, ProductFeature
	{
		public static readonly ColourMeta Meta = ColourMeta.Instance;

		public Colour(Allors.IStrategy allors) : base(allors) {}

		public static Colour Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Colour) allorsSession.Instantiate(allorsObjectId);		
		}



		virtual public global::Allors.Extent<LocalisedText> LocalisedNames
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.LocalisedName);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.LocalisedName, value);
			}
		}

		virtual public void AddLocalisedName (LocalisedText value)
		{
			Strategy.AddCompositeRole(Meta.LocalisedName, value);
		}

		virtual public void RemoveLocalisedName (LocalisedText value)
		{
			Strategy.RemoveCompositeRole(Meta.LocalisedName,value);
		}

		virtual public bool ExistLocalisedNames
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.LocalisedName);
			}
		}

		virtual public void RemoveLocalisedNames()
		{
			Strategy.RemoveCompositeRoles(Meta.LocalisedName);
		}



		virtual public global::System.Boolean? IsActive 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.IsActive);
			}
			set
			{
				Strategy.SetUnitRole(Meta.IsActive, value);
			}
		}

		virtual public bool ExistIsActive{
			get
			{
				return Strategy.ExistUnitRole(Meta.IsActive);
			}
		}

		virtual public void RemoveIsActive()
		{
			Strategy.RemoveUnitRole(Meta.IsActive);
		}



		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}



		virtual public global::System.Guid? UniqueId 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(Meta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(Meta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(Meta.UniqueId);
		}


		virtual public global::Allors.Extent<EstimatedProductCost> EstimatedProductCosts
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.EstimatedProductCost);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.EstimatedProductCost, value);
			}
		}

		virtual public void AddEstimatedProductCost (EstimatedProductCost value)
		{
			Strategy.AddCompositeRole(Meta.EstimatedProductCost, value);
		}

		virtual public void RemoveEstimatedProductCost (EstimatedProductCost value)
		{
			Strategy.RemoveCompositeRole(Meta.EstimatedProductCost,value);
		}

		virtual public bool ExistEstimatedProductCosts
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.EstimatedProductCost);
			}
		}

		virtual public void RemoveEstimatedProductCosts()
		{
			Strategy.RemoveCompositeRoles(Meta.EstimatedProductCost);
		}


		virtual public global::Allors.Extent<PriceComponent> BasePrices
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.BasePrice);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.BasePrice, value);
			}
		}

		virtual public void AddBasePrice (PriceComponent value)
		{
			Strategy.AddCompositeRole(Meta.BasePrice, value);
		}

		virtual public void RemoveBasePrice (PriceComponent value)
		{
			Strategy.RemoveCompositeRole(Meta.BasePrice,value);
		}

		virtual public bool ExistBasePrices
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.BasePrice);
			}
		}

		virtual public void RemoveBasePrices()
		{
			Strategy.RemoveCompositeRoles(Meta.BasePrice);
		}



		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Description);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Description, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(Meta.Description);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(Meta.Description);
		}


		virtual public global::Allors.Extent<ProductFeature> DependentFeatures
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DependentFeature);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DependentFeature, value);
			}
		}

		virtual public void AddDependentFeature (ProductFeature value)
		{
			Strategy.AddCompositeRole(Meta.DependentFeature, value);
		}

		virtual public void RemoveDependentFeature (ProductFeature value)
		{
			Strategy.RemoveCompositeRole(Meta.DependentFeature,value);
		}

		virtual public bool ExistDependentFeatures
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DependentFeature);
			}
		}

		virtual public void RemoveDependentFeatures()
		{
			Strategy.RemoveCompositeRoles(Meta.DependentFeature);
		}


		virtual public global::Allors.Extent<ProductFeature> IncompatibleFeatures
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.IncompatibleFeature);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.IncompatibleFeature, value);
			}
		}

		virtual public void AddIncompatibleFeature (ProductFeature value)
		{
			Strategy.AddCompositeRole(Meta.IncompatibleFeature, value);
		}

		virtual public void RemoveIncompatibleFeature (ProductFeature value)
		{
			Strategy.RemoveCompositeRole(Meta.IncompatibleFeature,value);
		}

		virtual public bool ExistIncompatibleFeatures
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.IncompatibleFeature);
			}
		}

		virtual public void RemoveIncompatibleFeatures()
		{
			Strategy.RemoveCompositeRoles(Meta.IncompatibleFeature);
		}


		virtual public VatRate VatRate
		{ 
			get
			{
				return (VatRate) Strategy.GetCompositeRole(Meta.VatRate);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.VatRate ,value);
			}
		}

		virtual public bool ExistVatRate
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.VatRate);
			}
		}

		virtual public void RemoveVatRate()
		{
			Strategy.RemoveCompositeRole(Meta.VatRate);
		}


		virtual public SearchData SearchData
		{ 
			get
			{
				return (SearchData) Strategy.GetCompositeRole(Meta.SearchData);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SearchData ,value);
			}
		}

		virtual public bool ExistSearchData
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SearchData);
			}
		}

		virtual public void RemoveSearchData()
		{
			Strategy.RemoveCompositeRole(Meta.SearchData);
		}



		virtual public global::Allors.Extent<ProductFeatureApplicabilityRelationship> ProductFeatureApplicabilityRelationshipsWhereUsedToDefine
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductFeatureApplicabilityRelationshipsWhereUsedToDefine);
			}
		}

		virtual public bool ExistProductFeatureApplicabilityRelationshipsWhereUsedToDefine
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductFeatureApplicabilityRelationshipsWhereUsedToDefine);
			}
		}


		virtual public global::Allors.Extent<QuoteItem> QuoteItemsWhereProductFeature
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.QuoteItemsWhereProductFeature);
			}
		}

		virtual public bool ExistQuoteItemsWhereProductFeature
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.QuoteItemsWhereProductFeature);
			}
		}


		virtual public global::Allors.Extent<PriceComponent> PriceComponentsWhereProductFeature
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.PriceComponentsWhereProductFeature);
			}
		}

		virtual public bool ExistPriceComponentsWhereProductFeature
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.PriceComponentsWhereProductFeature);
			}
		}


		virtual public global::Allors.Extent<Product> ProductsWhereOptionalFeature
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductsWhereOptionalFeature);
			}
		}

		virtual public bool ExistProductsWhereOptionalFeature
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductsWhereOptionalFeature);
			}
		}


		virtual public global::Allors.Extent<Product> ProductsWhereStandardFeature
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductsWhereStandardFeature);
			}
		}

		virtual public bool ExistProductsWhereStandardFeature
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductsWhereStandardFeature);
			}
		}


		virtual public global::Allors.Extent<Product> ProductsWhereSelectableFeature
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductsWhereSelectableFeature);
			}
		}

		virtual public bool ExistProductsWhereSelectableFeature
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductsWhereSelectableFeature);
			}
		}


		virtual public global::Allors.Extent<SalesOrderItem> SalesOrderItemsWhereProductFeature
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesOrderItemsWhereProductFeature);
			}
		}

		virtual public bool ExistSalesOrderItemsWhereProductFeature
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesOrderItemsWhereProductFeature);
			}
		}


		virtual public global::Allors.Extent<SalesInvoiceItem> SalesInvoiceItemsWhereProductFeature
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.SalesInvoiceItemsWhereProductFeature);
			}
		}

		virtual public bool ExistSalesInvoiceItemsWhereProductFeature
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.SalesInvoiceItemsWhereProductFeature);
			}
		}


		virtual public global::Allors.Extent<EngagementItem> EngagementItemsWhereProductFeature
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.EngagementItemsWhereProductFeature);
			}
		}

		virtual public bool ExistEngagementItemsWhereProductFeature
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.EngagementItemsWhereProductFeature);
			}
		}


		virtual public global::Allors.Extent<ShipmentItem> ShipmentItemsWhereProductFeature
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ShipmentItemsWhereProductFeature);
			}
		}

		virtual public bool ExistShipmentItemsWhereProductFeature
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ShipmentItemsWhereProductFeature);
			}
		}


		virtual public global::Allors.Extent<ProductFeature> ProductFeaturesWhereDependentFeature
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductFeaturesWhereDependentFeature);
			}
		}

		virtual public bool ExistProductFeaturesWhereDependentFeature
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductFeaturesWhereDependentFeature);
			}
		}


		virtual public global::Allors.Extent<ProductFeature> ProductFeaturesWhereIncompatibleFeature
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProductFeaturesWhereIncompatibleFeature);
			}
		}

		virtual public bool ExistProductFeaturesWhereIncompatibleFeature
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProductFeaturesWhereIncompatibleFeature);
			}
		}


		virtual public global::Allors.Extent<RequestItem> RequestItemsWhereProductFeature
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequestItemsWhereProductFeature);
			}
		}

		virtual public bool ExistRequestItemsWhereProductFeature
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequestItemsWhereProductFeature);
			}
		}


		virtual public global::Allors.Extent<DesiredProductFeature> DesiredProductFeaturesWhereProductFeature
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.DesiredProductFeaturesWhereProductFeature);
			}
		}

		virtual public bool ExistDesiredProductFeaturesWhereProductFeature
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.DesiredProductFeaturesWhereProductFeature);
			}
		}

	}

	public class ColourMeta
	{
		public static readonly ColourMeta Instance = new ColourMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.Colour;

		public global::Allors.Meta.RoleType LocalisedName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EnumerationLocalisedName;
			}
		} 
		public global::Allors.Meta.RoleType IsActive 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EnumerationIsActive;
			}
		} 
		public global::Allors.Meta.RoleType Name 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.EnumerationName;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 
		public global::Allors.Meta.RoleType UniqueId 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UniquelyIdentifiableUniqueId;
			}
		} 
		public global::Allors.Meta.RoleType EstimatedProductCost 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.ProductFeatureEstimatedProductCost;
			}
		} 
		public global::Allors.Meta.RoleType BasePrice 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.ProductFeatureBasePrice;
			}
		} 
		public global::Allors.Meta.RoleType Description 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.ProductFeatureDescription;
			}
		} 
		public global::Allors.Meta.RoleType DependentFeature 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.ProductFeatureDependentFeature;
			}
		} 
		public global::Allors.Meta.RoleType IncompatibleFeature 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.ProductFeatureIncompatibleFeature;
			}
		} 
		public global::Allors.Meta.RoleType VatRate 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.ProductFeatureVatRate;
			}
		} 
		public global::Allors.Meta.RoleType SearchData 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.SearchableSearchData;
			}
		} 

		public global::Allors.Meta.AssociationType ProductFeatureApplicabilityRelationshipsWhereUsedToDefine 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.ProductFeatureApplicabilityRelationshipUsedToDefine;
			}
		} 
		public global::Allors.Meta.AssociationType QuoteItemsWhereProductFeature 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.QuoteItemProductFeature;
			}
		} 
		public global::Allors.Meta.AssociationType PriceComponentsWhereProductFeature 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.PriceComponentProductFeature;
			}
		} 
		public global::Allors.Meta.AssociationType ProductsWhereOptionalFeature 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.ProductOptionalFeature;
			}
		} 
		public global::Allors.Meta.AssociationType ProductsWhereStandardFeature 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.ProductStandardFeature;
			}
		} 
		public global::Allors.Meta.AssociationType ProductsWhereSelectableFeature 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.ProductSelectableFeature;
			}
		} 
		public global::Allors.Meta.AssociationType SalesOrderItemsWhereProductFeature 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.SalesOrderItemProductFeature;
			}
		} 
		public global::Allors.Meta.AssociationType SalesInvoiceItemsWhereProductFeature 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.SalesInvoiceItemProductFeature;
			}
		} 
		public global::Allors.Meta.AssociationType EngagementItemsWhereProductFeature 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.EngagementItemProductFeature;
			}
		} 
		public global::Allors.Meta.AssociationType ShipmentItemsWhereProductFeature 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.ShipmentItemProductFeature;
			}
		} 
		public global::Allors.Meta.AssociationType ProductFeaturesWhereDependentFeature 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.ProductFeatureDependentFeature;
			}
		} 
		public global::Allors.Meta.AssociationType ProductFeaturesWhereIncompatibleFeature 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.ProductFeatureIncompatibleFeature;
			}
		} 
		public global::Allors.Meta.AssociationType RequestItemsWhereProductFeature 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.RequestItemProductFeature;
			}
		} 
		public global::Allors.Meta.AssociationType DesiredProductFeaturesWhereProductFeature 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.DesiredProductFeatureProductFeature;
			}
		} 

	}
}