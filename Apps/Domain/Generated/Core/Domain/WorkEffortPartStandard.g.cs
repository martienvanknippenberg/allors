// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class WorkEffortPartStandard : Allors.ObjectBase , UserInterfaceable
	{
		public static readonly WorkEffortPartStandardMeta Meta = WorkEffortPartStandardMeta.Instance;

		public WorkEffortPartStandard(Allors.IStrategy allors) : base(allors) {}

		public static WorkEffortPartStandard Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (WorkEffortPartStandard) allorsSession.Instantiate(allorsObjectId);		
		}



		virtual public Part Part
		{ 
			get
			{
				return (Part) Strategy.GetCompositeRole(Meta.Part);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.Part ,value);
			}
		}

		virtual public bool ExistPart
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.Part);
			}
		}

		virtual public void RemovePart()
		{
			Strategy.RemoveCompositeRole(Meta.Part);
		}



		virtual public global::System.Decimal EstimatedCost 
		{
			get
			{
				return (global::System.Decimal) Strategy.GetUnitRole(Meta.EstimatedCost);
			}
			set
			{
				Strategy.SetUnitRole(Meta.EstimatedCost, value);
			}
		}

		virtual public bool ExistEstimatedCost{
			get
			{
				return Strategy.ExistUnitRole(Meta.EstimatedCost);
			}
		}

		virtual public void RemoveEstimatedCost()
		{
			Strategy.RemoveUnitRole(Meta.EstimatedCost);
		}



		virtual public global::System.Int32 EstimatedQuantity 
		{
			get
			{
				return (global::System.Int32) Strategy.GetUnitRole(Meta.EstimatedQuantity);
			}
			set
			{
				Strategy.SetUnitRole(Meta.EstimatedQuantity, value);
			}
		}

		virtual public bool ExistEstimatedQuantity{
			get
			{
				return Strategy.ExistUnitRole(Meta.EstimatedQuantity);
			}
		}

		virtual public void RemoveEstimatedQuantity()
		{
			Strategy.RemoveUnitRole(Meta.EstimatedQuantity);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}



		virtual public WorkEffortType WorkEffortTypeWhereWorkEffortPartStandard
		{ 
			get
			{
				return (WorkEffortType) Strategy.GetCompositeAssociation(Meta.WorkEffortTypeWhereWorkEffortPartStandard);
			}
		} 

		virtual public bool ExistWorkEffortTypeWhereWorkEffortPartStandard
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.WorkEffortTypeWhereWorkEffortPartStandard);
			}
		}

	}

	public class WorkEffortPartStandardMeta
	{
		public static readonly WorkEffortPartStandardMeta Instance = new WorkEffortPartStandardMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.WorkEffortPartStandard;

		public global::Allors.Meta.RoleType Part 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.WorkEffortPartStandardPart;
			}
		} 
		public global::Allors.Meta.RoleType EstimatedCost 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.WorkEffortPartStandardEstimatedCost;
			}
		} 
		public global::Allors.Meta.RoleType EstimatedQuantity 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.WorkEffortPartStandardEstimatedQuantity;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 

		public global::Allors.Meta.AssociationType WorkEffortTypeWhereWorkEffortPartStandard 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.WorkEffortTypeWorkEffortPartStandard;
			}
		} 

	}
}