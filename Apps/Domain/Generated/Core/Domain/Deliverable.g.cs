// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	[System.Diagnostics.DebuggerNonUserCode]
	public partial class Deliverable : Allors.ObjectBase , Searchable, UserInterfaceable
	{
		public static readonly DeliverableMeta Meta = DeliverableMeta.Instance;

		public Deliverable(Allors.IStrategy allors) : base(allors) {}

		public static Deliverable Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Deliverable) allorsSession.Instantiate(allorsObjectId);		
		}




		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}


		virtual public DeliverableType DeliverableType
		{ 
			get
			{
				return (DeliverableType) Strategy.GetCompositeRole(Meta.DeliverableType);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.DeliverableType ,value);
			}
		}

		virtual public bool ExistDeliverableType
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.DeliverableType);
			}
		}

		virtual public void RemoveDeliverableType()
		{
			Strategy.RemoveCompositeRole(Meta.DeliverableType);
		}


		virtual public SearchData SearchData
		{ 
			get
			{
				return (SearchData) Strategy.GetCompositeRole(Meta.SearchData);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SearchData ,value);
			}
		}

		virtual public bool ExistSearchData
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SearchData);
			}
		}

		virtual public void RemoveSearchData()
		{
			Strategy.RemoveCompositeRole(Meta.SearchData);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}



		virtual public global::Allors.Extent<QuoteItem> QuoteItemsWhereDeliverable
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.QuoteItemsWhereDeliverable);
			}
		}

		virtual public bool ExistQuoteItemsWhereDeliverable
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.QuoteItemsWhereDeliverable);
			}
		}


		virtual public global::Allors.Extent<ProjectRequirement> ProjectRequirementsWhereNeededDeliverable
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.ProjectRequirementsWhereNeededDeliverable);
			}
		}

		virtual public bool ExistProjectRequirementsWhereNeededDeliverable
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.ProjectRequirementsWhereNeededDeliverable);
			}
		}


		virtual public WorkEffort WorkEffortWhereDeliverableProduced
		{ 
			get
			{
				return (WorkEffort) Strategy.GetCompositeAssociation(Meta.WorkEffortWhereDeliverableProduced);
			}
		} 

		virtual public bool ExistWorkEffortWhereDeliverableProduced
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.WorkEffortWhereDeliverableProduced);
			}
		}


		virtual public global::Allors.Extent<WorkEffortType> WorkEffortTypesWhereDeliverableToProduce
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkEffortTypesWhereDeliverableToProduce);
			}
		}

		virtual public bool ExistWorkEffortTypesWhereDeliverableToProduce
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkEffortTypesWhereDeliverableToProduce);
			}
		}


		virtual public global::Allors.Extent<RequestItem> RequestItemsWhereDeliverable
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.RequestItemsWhereDeliverable);
			}
		}

		virtual public bool ExistRequestItemsWhereDeliverable
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.RequestItemsWhereDeliverable);
			}
		}


		virtual public global::Allors.Extent<WorkRequirement> WorkRequirementsWhereDeliverable
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.WorkRequirementsWhereDeliverable);
			}
		}

		virtual public bool ExistWorkRequirementsWhereDeliverable
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.WorkRequirementsWhereDeliverable);
			}
		}

	}

	public class DeliverableMeta
	{
		public static readonly DeliverableMeta Instance = new DeliverableMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.Deliverable;

		public global::Allors.Meta.RoleType Name 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.DeliverableName;
			}
		} 
		public global::Allors.Meta.RoleType DeliverableType 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.DeliverableDeliverableType;
			}
		} 
		public global::Allors.Meta.RoleType SearchData 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.SearchableSearchData;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 

		public global::Allors.Meta.AssociationType QuoteItemsWhereDeliverable 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.QuoteItemDeliverable;
			}
		} 
		public global::Allors.Meta.AssociationType ProjectRequirementsWhereNeededDeliverable 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.ProjectRequirementNeededDeliverable;
			}
		} 
		public global::Allors.Meta.AssociationType WorkEffortWhereDeliverableProduced 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.WorkEffortDeliverableProduced;
			}
		} 
		public global::Allors.Meta.AssociationType WorkEffortTypesWhereDeliverableToProduce 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.WorkEffortTypeDeliverableToProduce;
			}
		} 
		public global::Allors.Meta.AssociationType RequestItemsWhereDeliverable 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.RequestItemDeliverable;
			}
		} 
		public global::Allors.Meta.AssociationType WorkRequirementsWhereDeliverable 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.WorkRequirementDeliverable;
			}
		} 

	}
}