// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class UtilizationCharge
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (UtilizationChargeBuilder)objectBuilder;
			

			if(builder.Quantity.HasValue)
			{
				this.Quantity = builder.Quantity.Value;
			}			
					

			if(builder.Rate.HasValue)
			{
				this.Rate = builder.Rate.Value;
			}			
		

			this.Description = builder.Description;
					

			if(builder.Price.HasValue)
			{
				this.Price = builder.Price.Value;
			}			
					

			if(builder.FromDate.HasValue)
			{
				this.FromDate = builder.FromDate.Value;
			}			
					

			if(builder.ThroughDate.HasValue)
			{
				this.ThroughDate = builder.ThroughDate.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
		

			this.Comment = builder.Comment;
		

			this.UnitOfMeasure = builder.UnitOfMeasure;



			this.GeographicBoundary = builder.GeographicBoundary;



			this.RevenueValueBreak = builder.RevenueValueBreak;



			this.PartyClassification = builder.PartyClassification;



			this.OrderQuantityBreak = builder.OrderQuantityBreak;



			this.PackageQuantityBreak = builder.PackageQuantityBreak;



			this.Product = builder.Product;



			this.RevenueQuantityBreak = builder.RevenueQuantityBreak;



			this.SpecifiedFor = builder.SpecifiedFor;



			this.ProductFeature = builder.ProductFeature;



			this.AgreementPricingProgram = builder.AgreementPricingProgram;



			this.Currency = builder.Currency;



			this.OrderKind = builder.OrderKind;



			this.OrderValue = builder.OrderValue;



			this.ProductCategory = builder.ProductCategory;



			this.SalesChannel = builder.SalesChannel;



			this.SearchData = builder.SearchData;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}
	}

	public partial class UtilizationChargeBuilder : Allors.ObjectBuilder<UtilizationCharge> , PriceComponentBuilder, global::System.IDisposable
	{		
		public UtilizationChargeBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.Decimal? Quantity {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithQuantity(global::System.Decimal? value)
		        {
				    if(this.Quantity!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Quantity = value;
		            return this;
		        }	

				public UnitOfMeasure UnitOfMeasure {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithUnitOfMeasure(UnitOfMeasure value)
		        {
		            if(this.UnitOfMeasure!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.UnitOfMeasure = value;
		            return this;
		        }		

				
				public GeographicBoundary GeographicBoundary {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithGeographicBoundary(GeographicBoundary value)
		        {
		            if(this.GeographicBoundary!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.GeographicBoundary = value;
		            return this;
		        }		

				
				public global::System.Decimal? Rate {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithRate(global::System.Decimal? value)
		        {
				    if(this.Rate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Rate = value;
		            return this;
		        }	

				public RevenueValueBreak RevenueValueBreak {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithRevenueValueBreak(RevenueValueBreak value)
		        {
		            if(this.RevenueValueBreak!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.RevenueValueBreak = value;
		            return this;
		        }		

				
				public PartyClassification PartyClassification {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithPartyClassification(PartyClassification value)
		        {
		            if(this.PartyClassification!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PartyClassification = value;
		            return this;
		        }		

				
				public OrderQuantityBreak OrderQuantityBreak {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithOrderQuantityBreak(OrderQuantityBreak value)
		        {
		            if(this.OrderQuantityBreak!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.OrderQuantityBreak = value;
		            return this;
		        }		

				
				public PackageQuantityBreak PackageQuantityBreak {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithPackageQuantityBreak(PackageQuantityBreak value)
		        {
		            if(this.PackageQuantityBreak!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PackageQuantityBreak = value;
		            return this;
		        }		

				
				public Product Product {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithProduct(Product value)
		        {
		            if(this.Product!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Product = value;
		            return this;
		        }		

				
				public RevenueQuantityBreak RevenueQuantityBreak {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithRevenueQuantityBreak(RevenueQuantityBreak value)
		        {
		            if(this.RevenueQuantityBreak!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.RevenueQuantityBreak = value;
		            return this;
		        }		

				
				public Party SpecifiedFor {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithSpecifiedFor(Party value)
		        {
		            if(this.SpecifiedFor!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SpecifiedFor = value;
		            return this;
		        }		

				
				public ProductFeature ProductFeature {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithProductFeature(ProductFeature value)
		        {
		            if(this.ProductFeature!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ProductFeature = value;
		            return this;
		        }		

				
				public AgreementPricingProgram AgreementPricingProgram {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithAgreementPricingProgram(AgreementPricingProgram value)
		        {
		            if(this.AgreementPricingProgram!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.AgreementPricingProgram = value;
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public Currency Currency {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithCurrency(Currency value)
		        {
		            if(this.Currency!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Currency = value;
		            return this;
		        }		

				
				public OrderKind OrderKind {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithOrderKind(OrderKind value)
		        {
		            if(this.OrderKind!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.OrderKind = value;
		            return this;
		        }		

				
				public OrderValue OrderValue {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithOrderValue(OrderValue value)
		        {
		            if(this.OrderValue!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.OrderValue = value;
		            return this;
		        }		

				
				public global::System.Decimal? Price {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithPrice(global::System.Decimal? value)
		        {
				    if(this.Price!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Price = value;
		            return this;
		        }	

				public ProductCategory ProductCategory {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithProductCategory(ProductCategory value)
		        {
		            if(this.ProductCategory!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ProductCategory = value;
		            return this;
		        }		

				
				public SalesChannel SalesChannel {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithSalesChannel(SalesChannel value)
		        {
		            if(this.SalesChannel!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesChannel = value;
		            return this;
		        }		

				
				public global::System.DateTime? FromDate {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithFromDate(global::System.DateTime? value)
		        {
				    if(this.FromDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.FromDate = value;
		            return this;
		        }	

				public global::System.DateTime? ThroughDate {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithThroughDate(global::System.DateTime? value)
		        {
				    if(this.ThroughDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ThroughDate = value;
		            return this;
		        }	

				public SearchData SearchData {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public UtilizationChargeBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public UtilizationChargeBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.String Comment {get; set;}

				/// <exclude/>
				public UtilizationChargeBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	


	}

	public partial class UtilizationCharges : global::Allors.ObjectsBase<UtilizationCharge>
	{
		public static readonly UtilizationChargeMeta Meta = UtilizationChargeMeta.Instance;

		public UtilizationCharges(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}