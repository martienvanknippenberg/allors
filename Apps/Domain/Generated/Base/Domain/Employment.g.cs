// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class Employment
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (EmploymentBuilder)objectBuilder;
			

			if(builder.SimpleMovingAverage.HasValue)
			{
				this.SimpleMovingAverage = builder.SimpleMovingAverage.Value;
			}			
					

			if(builder.FromDate.HasValue)
			{
				this.FromDate = builder.FromDate.Value;
			}			
					

			if(builder.ThroughDate.HasValue)
			{
				this.ThroughDate = builder.ThroughDate.Value;
			}			
		

			this.Comment = builder.Comment;
		

			this.DisplayName = builder.DisplayName;
		

			this.Employer = builder.Employer;



			this.Employee = builder.Employee;


			if(builder.PayrollPreferences!=null)
			{
				this.PayrollPreferences = builder.PayrollPreferences.ToArray();
			}


			this.EmploymentTerminationReason = builder.EmploymentTerminationReason;



			this.EmploymentTermination = builder.EmploymentTermination;



			this.PartyRelationshipStatus = builder.PartyRelationshipStatus;


			if(builder.Agreements!=null)
			{
				this.Agreements = builder.Agreements.ToArray();
			}


			this.PartyRelationshipPriority = builder.PartyRelationshipPriority;


			if(builder.CommunicationEvents!=null)
			{
				this.CommunicationEvents = builder.CommunicationEvents.ToArray();
			}

			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}
	}

	public partial class EmploymentBuilder : Allors.ObjectBuilder<Employment> , PartyRelationshipBuilder, global::System.IDisposable
	{		
		public EmploymentBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public InternalOrganisation Employer {get; set;}

				/// <exclude/>
				public EmploymentBuilder WithEmployer(InternalOrganisation value)
		        {
		            if(this.Employer!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Employer = value;
		            return this;
		        }		

				
				public Person Employee {get; set;}

				/// <exclude/>
				public EmploymentBuilder WithEmployee(Person value)
		        {
		            if(this.Employee!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Employee = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PayrollPreference> PayrollPreferences {get; set;}	

				/// <exclude/>
				public EmploymentBuilder WithPayrollPreference(PayrollPreference value)
		        {
					if(this.PayrollPreferences == null)
					{
						this.PayrollPreferences = new global::System.Collections.Generic.List<PayrollPreference>(); 
					}
		            this.PayrollPreferences.Add(value);
		            return this;
		        }		

				
				public EmploymentTerminationReason EmploymentTerminationReason {get; set;}

				/// <exclude/>
				public EmploymentBuilder WithEmploymentTerminationReason(EmploymentTerminationReason value)
		        {
		            if(this.EmploymentTerminationReason!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.EmploymentTerminationReason = value;
		            return this;
		        }		

				
				public EmploymentTermination EmploymentTermination {get; set;}

				/// <exclude/>
				public EmploymentBuilder WithEmploymentTermination(EmploymentTermination value)
		        {
		            if(this.EmploymentTermination!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.EmploymentTermination = value;
		            return this;
		        }		

				
				public PartyRelationshipStatus PartyRelationshipStatus {get; set;}

				/// <exclude/>
				public EmploymentBuilder WithPartyRelationshipStatus(PartyRelationshipStatus value)
		        {
		            if(this.PartyRelationshipStatus!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PartyRelationshipStatus = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Agreement> Agreements {get; set;}	

				/// <exclude/>
				public EmploymentBuilder WithAgreement(Agreement value)
		        {
					if(this.Agreements == null)
					{
						this.Agreements = new global::System.Collections.Generic.List<Agreement>(); 
					}
		            this.Agreements.Add(value);
		            return this;
		        }		

				
				public PartyRelationshipPriority PartyRelationshipPriority {get; set;}

				/// <exclude/>
				public EmploymentBuilder WithPartyRelationshipPriority(PartyRelationshipPriority value)
		        {
		            if(this.PartyRelationshipPriority!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PartyRelationshipPriority = value;
		            return this;
		        }		

				
				public global::System.Decimal? SimpleMovingAverage {get; set;}

				/// <exclude/>
				public EmploymentBuilder WithSimpleMovingAverage(global::System.Decimal? value)
		        {
				    if(this.SimpleMovingAverage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SimpleMovingAverage = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<CommunicationEvent> CommunicationEvents {get; set;}	

				/// <exclude/>
				public EmploymentBuilder WithCommunicationEvent(CommunicationEvent value)
		        {
					if(this.CommunicationEvents == null)
					{
						this.CommunicationEvents = new global::System.Collections.Generic.List<CommunicationEvent>(); 
					}
		            this.CommunicationEvents.Add(value);
		            return this;
		        }		

				
				public global::System.DateTime? FromDate {get; set;}

				/// <exclude/>
				public EmploymentBuilder WithFromDate(global::System.DateTime? value)
		        {
				    if(this.FromDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.FromDate = value;
		            return this;
		        }	

				public global::System.DateTime? ThroughDate {get; set;}

				/// <exclude/>
				public EmploymentBuilder WithThroughDate(global::System.DateTime? value)
		        {
				    if(this.ThroughDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ThroughDate = value;
		            return this;
		        }	

				public global::System.String Comment {get; set;}

				/// <exclude/>
				public EmploymentBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	

				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public EmploymentBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public EmploymentBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public EmploymentBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class Employments : global::Allors.ObjectsBase<Employment>
	{
		public static readonly EmploymentMeta Meta = EmploymentMeta.Instance;

		public Employments(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}