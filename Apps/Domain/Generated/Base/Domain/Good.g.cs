// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class Good
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (GoodBuilder)objectBuilder;
			

			if(builder.AvailableToPromise.HasValue)
			{
				this.AvailableToPromise = builder.AvailableToPromise.Value;
			}			
		

			this.BarCode = builder.BarCode;
		

			this.Sku = builder.Sku;
		

			this.ArticleNumber = builder.ArticleNumber;
		

			this.ManufacturerId = builder.ManufacturerId;
					

			if(builder.SupportDiscontinuationDate.HasValue)
			{
				this.SupportDiscontinuationDate = builder.SupportDiscontinuationDate.Value;
			}			
					

			if(builder.SalesDiscontinuationDate.HasValue)
			{
				this.SalesDiscontinuationDate = builder.SalesDiscontinuationDate.Value;
			}			
		

			this.Description = builder.Description;
		

			this.IntrastatCode = builder.IntrastatCode;
		

			this.Name = builder.Name;
					

			if(builder.IntroductionDate.HasValue)
			{
				this.IntroductionDate = builder.IntroductionDate.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
					

			if(builder.UniqueId.HasValue)
			{
				this.UniqueId = builder.UniqueId.Value;
			}			
		

			this.Thumbnail = builder.Thumbnail;



			this.InventoryItemKind = builder.InventoryItemKind;



			this.FinishedGood = builder.FinishedGood;


			if(builder.ProductSubstitutions!=null)
			{
				this.ProductSubstitutions = builder.ProductSubstitutions.ToArray();
			}

			if(builder.ProductIncompatibilities!=null)
			{
				this.ProductIncompatibilities = builder.ProductIncompatibilities.ToArray();
			}


			this.Photo = builder.Photo;



			this.PrimaryProductCategory = builder.PrimaryProductCategory;


			if(builder.VirtualProductPriceComponents!=null)
			{
				this.VirtualProductPriceComponents = builder.VirtualProductPriceComponents.ToArray();
			}

			if(builder.ProductCategoriesExpanded!=null)
			{
				this.ProductCategoriesExpanded = builder.ProductCategoriesExpanded.ToArray();
			}


			this.ProductComplement = builder.ProductComplement;


			if(builder.OptionalFeatures!=null)
			{
				this.OptionalFeatures = builder.OptionalFeatures.ToArray();
			}


			this.ManufacturedBy = builder.ManufacturedBy;


			if(builder.Variants!=null)
			{
				this.Variants = builder.Variants.ToArray();
			}

			if(builder.Documents!=null)
			{
				this.Documents = builder.Documents.ToArray();
			}

			if(builder.StandardFeatures!=null)
			{
				this.StandardFeatures = builder.StandardFeatures.ToArray();
			}


			this.UnitOfMeasure = builder.UnitOfMeasure;


			if(builder.EstimatedProductCosts!=null)
			{
				this.EstimatedProductCosts = builder.EstimatedProductCosts.ToArray();
			}

			if(builder.ProductObsolescences!=null)
			{
				this.ProductObsolescences = builder.ProductObsolescences.ToArray();
			}

			if(builder.SelectableFeatures!=null)
			{
				this.SelectableFeatures = builder.SelectableFeatures.ToArray();
			}


			this.VatRate = builder.VatRate;


			if(builder.BasePrices!=null)
			{
				this.BasePrices = builder.BasePrices.ToArray();
			}

			if(builder.ProductCategories!=null)
			{
				this.ProductCategories = builder.ProductCategories.ToArray();
			}


			this.SoldBy = builder.SoldBy;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.SearchData = builder.SearchData;


		}
	}

	public partial class GoodBuilder : Allors.ObjectBuilder<Good> , ProductBuilder, global::System.IDisposable
	{		
		public GoodBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.Decimal? AvailableToPromise {get; set;}

				/// <exclude/>
				public GoodBuilder WithAvailableToPromise(global::System.Decimal? value)
		        {
				    if(this.AvailableToPromise!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AvailableToPromise = value;
		            return this;
		        }	

				public Media Thumbnail {get; set;}

				/// <exclude/>
				public GoodBuilder WithThumbnail(Media value)
		        {
		            if(this.Thumbnail!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Thumbnail = value;
		            return this;
		        }		

				
				public InventoryItemKind InventoryItemKind {get; set;}

				/// <exclude/>
				public GoodBuilder WithInventoryItemKind(InventoryItemKind value)
		        {
		            if(this.InventoryItemKind!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.InventoryItemKind = value;
		            return this;
		        }		

				
				public global::System.String BarCode {get; set;}

				/// <exclude/>
				public GoodBuilder WithBarCode(global::System.String value)
		        {
				    if(this.BarCode!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.BarCode = value;
		            return this;
		        }	

				public FinishedGood FinishedGood {get; set;}

				/// <exclude/>
				public GoodBuilder WithFinishedGood(FinishedGood value)
		        {
		            if(this.FinishedGood!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.FinishedGood = value;
		            return this;
		        }		

				
				public global::System.String Sku {get; set;}

				/// <exclude/>
				public GoodBuilder WithSku(global::System.String value)
		        {
				    if(this.Sku!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Sku = value;
		            return this;
		        }	

				public global::System.String ArticleNumber {get; set;}

				/// <exclude/>
				public GoodBuilder WithArticleNumber(global::System.String value)
		        {
				    if(this.ArticleNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ArticleNumber = value;
		            return this;
		        }	

				public global::System.String ManufacturerId {get; set;}

				/// <exclude/>
				public GoodBuilder WithManufacturerId(global::System.String value)
		        {
				    if(this.ManufacturerId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ManufacturerId = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Product> ProductSubstitutions {get; set;}	

				/// <exclude/>
				public GoodBuilder WithProductSubstitution(Product value)
		        {
					if(this.ProductSubstitutions == null)
					{
						this.ProductSubstitutions = new global::System.Collections.Generic.List<Product>(); 
					}
		            this.ProductSubstitutions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Product> ProductIncompatibilities {get; set;}	

				/// <exclude/>
				public GoodBuilder WithProductIncompatibility(Product value)
		        {
					if(this.ProductIncompatibilities == null)
					{
						this.ProductIncompatibilities = new global::System.Collections.Generic.List<Product>(); 
					}
		            this.ProductIncompatibilities.Add(value);
		            return this;
		        }		

				
				public Media Photo {get; set;}

				/// <exclude/>
				public GoodBuilder WithPhoto(Media value)
		        {
		            if(this.Photo!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Photo = value;
		            return this;
		        }		

				
				public ProductCategory PrimaryProductCategory {get; set;}

				/// <exclude/>
				public GoodBuilder WithPrimaryProductCategory(ProductCategory value)
		        {
		            if(this.PrimaryProductCategory!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PrimaryProductCategory = value;
		            return this;
		        }		

				
				public global::System.DateTime? SupportDiscontinuationDate {get; set;}

				/// <exclude/>
				public GoodBuilder WithSupportDiscontinuationDate(global::System.DateTime? value)
		        {
				    if(this.SupportDiscontinuationDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SupportDiscontinuationDate = value;
		            return this;
		        }	

				public global::System.DateTime? SalesDiscontinuationDate {get; set;}

				/// <exclude/>
				public GoodBuilder WithSalesDiscontinuationDate(global::System.DateTime? value)
		        {
				    if(this.SalesDiscontinuationDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SalesDiscontinuationDate = value;
		            return this;
		        }	

				public global::System.String Description {get; set;}

				/// <exclude/>
				public GoodBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<PriceComponent> VirtualProductPriceComponents {get; set;}	

				/// <exclude/>
				public GoodBuilder WithVirtualProductPriceComponent(PriceComponent value)
		        {
					if(this.VirtualProductPriceComponents == null)
					{
						this.VirtualProductPriceComponents = new global::System.Collections.Generic.List<PriceComponent>(); 
					}
		            this.VirtualProductPriceComponents.Add(value);
		            return this;
		        }		

				
				public global::System.String IntrastatCode {get; set;}

				/// <exclude/>
				public GoodBuilder WithIntrastatCode(global::System.String value)
		        {
				    if(this.IntrastatCode!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IntrastatCode = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<ProductCategory> ProductCategoriesExpanded {get; set;}	

				/// <exclude/>
				public GoodBuilder WithProductCategoryExpanded(ProductCategory value)
		        {
					if(this.ProductCategoriesExpanded == null)
					{
						this.ProductCategoriesExpanded = new global::System.Collections.Generic.List<ProductCategory>(); 
					}
		            this.ProductCategoriesExpanded.Add(value);
		            return this;
		        }		

				
				public Product ProductComplement {get; set;}

				/// <exclude/>
				public GoodBuilder WithProductComplement(Product value)
		        {
		            if(this.ProductComplement!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ProductComplement = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<ProductFeature> OptionalFeatures {get; set;}	

				/// <exclude/>
				public GoodBuilder WithOptionalFeature(ProductFeature value)
		        {
					if(this.OptionalFeatures == null)
					{
						this.OptionalFeatures = new global::System.Collections.Generic.List<ProductFeature>(); 
					}
		            this.OptionalFeatures.Add(value);
		            return this;
		        }		

				
				public Party ManufacturedBy {get; set;}

				/// <exclude/>
				public GoodBuilder WithManufacturedBy(Party value)
		        {
		            if(this.ManufacturedBy!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ManufacturedBy = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Product> Variants {get; set;}	

				/// <exclude/>
				public GoodBuilder WithVariant(Product value)
		        {
					if(this.Variants == null)
					{
						this.Variants = new global::System.Collections.Generic.List<Product>(); 
					}
		            this.Variants.Add(value);
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public GoodBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.DateTime? IntroductionDate {get; set;}

				/// <exclude/>
				public GoodBuilder WithIntroductionDate(global::System.DateTime? value)
		        {
				    if(this.IntroductionDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IntroductionDate = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Document> Documents {get; set;}	

				/// <exclude/>
				public GoodBuilder WithDocument(Document value)
		        {
					if(this.Documents == null)
					{
						this.Documents = new global::System.Collections.Generic.List<Document>(); 
					}
		            this.Documents.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<ProductFeature> StandardFeatures {get; set;}	

				/// <exclude/>
				public GoodBuilder WithStandardFeature(ProductFeature value)
		        {
					if(this.StandardFeatures == null)
					{
						this.StandardFeatures = new global::System.Collections.Generic.List<ProductFeature>(); 
					}
		            this.StandardFeatures.Add(value);
		            return this;
		        }		

				
				public UnitOfMeasure UnitOfMeasure {get; set;}

				/// <exclude/>
				public GoodBuilder WithUnitOfMeasure(UnitOfMeasure value)
		        {
		            if(this.UnitOfMeasure!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.UnitOfMeasure = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<EstimatedProductCost> EstimatedProductCosts {get; set;}	

				/// <exclude/>
				public GoodBuilder WithEstimatedProductCost(EstimatedProductCost value)
		        {
					if(this.EstimatedProductCosts == null)
					{
						this.EstimatedProductCosts = new global::System.Collections.Generic.List<EstimatedProductCost>(); 
					}
		            this.EstimatedProductCosts.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Product> ProductObsolescences {get; set;}	

				/// <exclude/>
				public GoodBuilder WithProductObsolescence(Product value)
		        {
					if(this.ProductObsolescences == null)
					{
						this.ProductObsolescences = new global::System.Collections.Generic.List<Product>(); 
					}
		            this.ProductObsolescences.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<ProductFeature> SelectableFeatures {get; set;}	

				/// <exclude/>
				public GoodBuilder WithSelectableFeature(ProductFeature value)
		        {
					if(this.SelectableFeatures == null)
					{
						this.SelectableFeatures = new global::System.Collections.Generic.List<ProductFeature>(); 
					}
		            this.SelectableFeatures.Add(value);
		            return this;
		        }		

				
				public VatRate VatRate {get; set;}

				/// <exclude/>
				public GoodBuilder WithVatRate(VatRate value)
		        {
		            if(this.VatRate!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.VatRate = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PriceComponent> BasePrices {get; set;}	

				/// <exclude/>
				public GoodBuilder WithBasePrice(PriceComponent value)
		        {
					if(this.BasePrices == null)
					{
						this.BasePrices = new global::System.Collections.Generic.List<PriceComponent>(); 
					}
		            this.BasePrices.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<ProductCategory> ProductCategories {get; set;}	

				/// <exclude/>
				public GoodBuilder WithProductCategory(ProductCategory value)
		        {
					if(this.ProductCategories == null)
					{
						this.ProductCategories = new global::System.Collections.Generic.List<ProductCategory>(); 
					}
		            this.ProductCategories.Add(value);
		            return this;
		        }		

				
				public InternalOrganisation SoldBy {get; set;}

				/// <exclude/>
				public GoodBuilder WithSoldBy(InternalOrganisation value)
		        {
		            if(this.SoldBy!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SoldBy = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public GoodBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public GoodBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public GoodBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public GoodBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public SearchData SearchData {get; set;}

				/// <exclude/>
				public GoodBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				

	}

	public partial class Goods : global::Allors.ObjectsBase<Good>
	{
		public static readonly GoodMeta Meta = GoodMeta.Instance;

		public Goods(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}