// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class CreditCard
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (CreditCardBuilder)objectBuilder;

			this.NameOnCard = builder.NameOnCard;
					

			if(builder.ExpirationYear.HasValue)
			{
				this.ExpirationYear = builder.ExpirationYear.Value;
			}			
					

			if(builder.ExpirationMonth.HasValue)
			{
				this.ExpirationMonth = builder.ExpirationMonth.Value;
			}			
		

			this.CardNumber = builder.CardNumber;
		

			this.DisplayName = builder.DisplayName;
		

			this.CreditCardCompany = builder.CreditCardCompany;


			if(builder.FinancialAccountTransactions!=null)
			{
				this.FinancialAccountTransactions = builder.FinancialAccountTransactions.ToArray();
			}

			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.SearchData = builder.SearchData;


		}
	}

	public partial class CreditCardBuilder : Allors.ObjectBuilder<CreditCard> , FinancialAccountBuilder, UserInterfaceableBuilder, SearchableBuilder, global::System.IDisposable
	{		
		public CreditCardBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.String NameOnCard {get; set;}

				/// <exclude/>
				public CreditCardBuilder WithNameOnCard(global::System.String value)
		        {
				    if(this.NameOnCard!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.NameOnCard = value;
		            return this;
		        }	

				public CreditCardCompany CreditCardCompany {get; set;}

				/// <exclude/>
				public CreditCardBuilder WithCreditCardCompany(CreditCardCompany value)
		        {
		            if(this.CreditCardCompany!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CreditCardCompany = value;
		            return this;
		        }		

				
				public global::System.Int32? ExpirationYear {get; set;}

				/// <exclude/>
				public CreditCardBuilder WithExpirationYear(global::System.Int32? value)
		        {
				    if(this.ExpirationYear!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ExpirationYear = value;
		            return this;
		        }	

				public global::System.Int32? ExpirationMonth {get; set;}

				/// <exclude/>
				public CreditCardBuilder WithExpirationMonth(global::System.Int32? value)
		        {
				    if(this.ExpirationMonth!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ExpirationMonth = value;
		            return this;
		        }	

				public global::System.String CardNumber {get; set;}

				/// <exclude/>
				public CreditCardBuilder WithCardNumber(global::System.String value)
		        {
				    if(this.CardNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CardNumber = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<FinancialAccountTransaction> FinancialAccountTransactions {get; set;}	

				/// <exclude/>
				public CreditCardBuilder WithFinancialAccountTransaction(FinancialAccountTransaction value)
		        {
					if(this.FinancialAccountTransactions == null)
					{
						this.FinancialAccountTransactions = new global::System.Collections.Generic.List<FinancialAccountTransaction>(); 
					}
		            this.FinancialAccountTransactions.Add(value);
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public CreditCardBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public CreditCardBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public CreditCardBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public SearchData SearchData {get; set;}

				/// <exclude/>
				public CreditCardBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				

	}

	public partial class CreditCards : global::Allors.ObjectsBase<CreditCard>
	{
		public static readonly CreditCardMeta Meta = CreditCardMeta.Instance;

		public CreditCards(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}