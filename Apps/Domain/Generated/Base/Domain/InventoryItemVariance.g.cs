// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class InventoryItemVariance
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (InventoryItemVarianceBuilder)objectBuilder;
			

			if(builder.Quantity.HasValue)
			{
				this.Quantity = builder.Quantity.Value;
			}			
					

			if(builder.InventoryDate.HasValue)
			{
				this.InventoryDate = builder.InventoryDate.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
		

			this.Comment = builder.Comment;
		

			this.ItemVarianceAccountingTransaction = builder.ItemVarianceAccountingTransaction;



			this.Reason = builder.Reason;



			this.SearchData = builder.SearchData;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}
	}

	public partial class InventoryItemVarianceBuilder : Allors.ObjectBuilder<InventoryItemVariance> , SearchableBuilder, UserInterfaceableBuilder, CommentableBuilder, global::System.IDisposable
	{		
		public InventoryItemVarianceBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.Int32? Quantity {get; set;}

				/// <exclude/>
				public InventoryItemVarianceBuilder WithQuantity(global::System.Int32? value)
		        {
				    if(this.Quantity!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Quantity = value;
		            return this;
		        }	

				public ItemVarianceAccountingTransaction ItemVarianceAccountingTransaction {get; set;}

				/// <exclude/>
				public InventoryItemVarianceBuilder WithItemVarianceAccountingTransaction(ItemVarianceAccountingTransaction value)
		        {
		            if(this.ItemVarianceAccountingTransaction!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ItemVarianceAccountingTransaction = value;
		            return this;
		        }		

				
				public global::System.DateTime? InventoryDate {get; set;}

				/// <exclude/>
				public InventoryItemVarianceBuilder WithInventoryDate(global::System.DateTime? value)
		        {
				    if(this.InventoryDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InventoryDate = value;
		            return this;
		        }	

				public VarianceReason Reason {get; set;}

				/// <exclude/>
				public InventoryItemVarianceBuilder WithReason(VarianceReason value)
		        {
		            if(this.Reason!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Reason = value;
		            return this;
		        }		

				
				public SearchData SearchData {get; set;}

				/// <exclude/>
				public InventoryItemVarianceBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public InventoryItemVarianceBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public InventoryItemVarianceBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public InventoryItemVarianceBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.String Comment {get; set;}

				/// <exclude/>
				public InventoryItemVarianceBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	


	}

	public partial class InventoryItemVariances : global::Allors.ObjectsBase<InventoryItemVariance>
	{
		public static readonly InventoryItemVarianceMeta Meta = InventoryItemVarianceMeta.Instance;

		public InventoryItemVariances(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}