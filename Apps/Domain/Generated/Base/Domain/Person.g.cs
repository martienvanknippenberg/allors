// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class Person
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (PersonBuilder)objectBuilder;

			this.LastName = builder.LastName;
		

			this.MiddleName = builder.MiddleName;
		

			this.FirstName = builder.FirstName;
					

			if(builder.YTDCommission.HasValue)
			{
				this.YTDCommission = builder.YTDCommission.Value;
			}			
					

			if(builder.LastYearsCommission.HasValue)
			{
				this.LastYearsCommission = builder.LastYearsCommission.Value;
			}			
		

			this.MothersMaidenName = builder.MothersMaidenName;
					

			if(builder.BirthDate.HasValue)
			{
				this.BirthDate = builder.BirthDate.Value;
			}			
					

			if(builder.Height.HasValue)
			{
				this.Height = builder.Height.Value;
			}			
					

			if(builder.Weight.HasValue)
			{
				this.Weight = builder.Weight.Value;
			}			
					

			if(builder.TotalYearsWorkExperience.HasValue)
			{
				this.TotalYearsWorkExperience = builder.TotalYearsWorkExperience.Value;
			}			
		

			this.SocialSecurityNumber = builder.SocialSecurityNumber;
					

			if(builder.DeceasedDate.HasValue)
			{
				this.DeceasedDate = builder.DeceasedDate.Value;
			}			
					

			if(builder.UserEmailConfirmed.HasValue)
			{
				this.UserEmailConfirmed = builder.UserEmailConfirmed.Value;
			}			
		

			this.UserName = builder.UserName;
		

			this.UserEmail = builder.UserEmail;
		

			this.UserPasswordHash = builder.UserPasswordHash;
		

			this.DisplayName = builder.DisplayName;
					

			if(builder.UniqueId.HasValue)
			{
				this.UniqueId = builder.UniqueId.Value;
			}			
					

			if(builder.YTDRevenue.HasValue)
			{
				this.YTDRevenue = builder.YTDRevenue.Value;
			}			
					

			if(builder.LastYearsRevenue.HasValue)
			{
				this.LastYearsRevenue = builder.LastYearsRevenue.Value;
			}			
					

			if(builder.ExcludeFromDunning.HasValue)
			{
				this.ExcludeFromDunning = builder.ExcludeFromDunning.Value;
			}			
		

			this.PartyName = builder.PartyName;
					

			if(builder.OpenOrderAmount.HasValue)
			{
				this.OpenOrderAmount = builder.OpenOrderAmount.Value;
			}			
		

			this.Salutation = builder.Salutation;



			this.Citizenship = builder.Citizenship;



			this.CurrentEmployment = builder.CurrentEmployment;


			if(builder.Titles!=null)
			{
				this.Titles = builder.Titles.ToArray();
			}

			if(builder.PersonTrainings!=null)
			{
				this.PersonTrainings = builder.PersonTrainings.ToArray();
			}


			this.Gender = builder.Gender;


			if(builder.Hobbies!=null)
			{
				this.Hobbies = builder.Hobbies.ToArray();
			}

			if(builder.Passports!=null)
			{
				this.Passports = builder.Passports.ToArray();
			}


			this.MaritalStatus = builder.MaritalStatus;



			this.Picture = builder.Picture;



			this.OwnerSecurityToken = builder.OwnerSecurityToken;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.Locale = builder.Locale;



			this.SearchData = builder.SearchData;



			this.BillingInquiriesFax = builder.BillingInquiriesFax;


			if(builder.Qualifications!=null)
			{
				this.Qualifications = builder.Qualifications.ToArray();
			}


			this.HomeAddress = builder.HomeAddress;



			this.SalesOffice = builder.SalesOffice;



			this.OrderInquiriesFax = builder.OrderInquiriesFax;


			if(builder.CurrentSalesReps!=null)
			{
				this.CurrentSalesReps = builder.CurrentSalesReps.ToArray();
			}

			if(builder.PartyContactMechanisms!=null)
			{
				this.PartyContactMechanisms = builder.PartyContactMechanisms.ToArray();
			}


			this.ShippingInquiriesFax = builder.ShippingInquiriesFax;



			this.ShippingInquiriesPhone = builder.ShippingInquiriesPhone;


			if(builder.BillingAccounts!=null)
			{
				this.BillingAccounts = builder.BillingAccounts.ToArray();
			}


			this.OrderInquiriesPhone = builder.OrderInquiriesPhone;


			if(builder.PartySkills!=null)
			{
				this.PartySkills = builder.PartySkills.ToArray();
			}

			if(builder.PartyClassifications!=null)
			{
				this.PartyClassifications = builder.PartyClassifications.ToArray();
			}

			if(builder.BankAccounts!=null)
			{
				this.BankAccounts = builder.BankAccounts.ToArray();
			}


			this.BillingAddress = builder.BillingAddress;



			this.DefaultShipmentMethod = builder.DefaultShipmentMethod;


			if(builder.Resumes!=null)
			{
				this.Resumes = builder.Resumes.ToArray();
			}


			this.HeadQuarter = builder.HeadQuarter;



			this.PersonalEmailAddress = builder.PersonalEmailAddress;



			this.CellPhoneNumber = builder.CellPhoneNumber;



			this.BillingInquiriesPhone = builder.BillingInquiriesPhone;



			this.OrderAddress = builder.OrderAddress;



			this.InternetAddress = builder.InternetAddress;


			if(builder.Contents!=null)
			{
				this.Contents = builder.Contents.ToArray();
			}

			if(builder.CreditCards!=null)
			{
				this.CreditCards = builder.CreditCards.ToArray();
			}


			this.ShippingAddress = builder.ShippingAddress;



			this.GeneralFaxNumber = builder.GeneralFaxNumber;



			this.DefaultPaymentMethod = builder.DefaultPaymentMethod;



			this.GeneralPhoneNumber = builder.GeneralPhoneNumber;



			this.PreferredCurrency = builder.PreferredCurrency;



			this.VatRegime = builder.VatRegime;


		}
	}

	public partial class PersonBuilder : Allors.ObjectBuilder<Person> , UserBuilder, AccessControlledObjectBuilder, UniquelyIdentifiableBuilder, SearchResultBuilder, UserInterfaceableBuilder, SearchableBuilder, PartyBuilder, global::System.IDisposable
	{		
		public PersonBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.String LastName {get; set;}

				/// <exclude/>
				public PersonBuilder WithLastName(global::System.String value)
		        {
				    if(this.LastName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.LastName = value;
		            return this;
		        }	

				public global::System.String MiddleName {get; set;}

				/// <exclude/>
				public PersonBuilder WithMiddleName(global::System.String value)
		        {
				    if(this.MiddleName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.MiddleName = value;
		            return this;
		        }	

				public global::System.String FirstName {get; set;}

				/// <exclude/>
				public PersonBuilder WithFirstName(global::System.String value)
		        {
				    if(this.FirstName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.FirstName = value;
		            return this;
		        }	

				public Salutation Salutation {get; set;}

				/// <exclude/>
				public PersonBuilder WithSalutation(Salutation value)
		        {
		            if(this.Salutation!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Salutation = value;
		            return this;
		        }		

				
				public global::System.Decimal? YTDCommission {get; set;}

				/// <exclude/>
				public PersonBuilder WithYTDCommission(global::System.Decimal? value)
		        {
				    if(this.YTDCommission!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.YTDCommission = value;
		            return this;
		        }	

				public Citizenship Citizenship {get; set;}

				/// <exclude/>
				public PersonBuilder WithCitizenship(Citizenship value)
		        {
		            if(this.Citizenship!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Citizenship = value;
		            return this;
		        }		

				
				public Employment CurrentEmployment {get; set;}

				/// <exclude/>
				public PersonBuilder WithCurrentEmployment(Employment value)
		        {
		            if(this.CurrentEmployment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentEmployment = value;
		            return this;
		        }		

				
				public global::System.Decimal? LastYearsCommission {get; set;}

				/// <exclude/>
				public PersonBuilder WithLastYearsCommission(global::System.Decimal? value)
		        {
				    if(this.LastYearsCommission!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.LastYearsCommission = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<PersonalTitle> Titles {get; set;}	

				/// <exclude/>
				public PersonBuilder WithTitle(PersonalTitle value)
		        {
					if(this.Titles == null)
					{
						this.Titles = new global::System.Collections.Generic.List<PersonalTitle>(); 
					}
		            this.Titles.Add(value);
		            return this;
		        }		

				
				public global::System.String MothersMaidenName {get; set;}

				/// <exclude/>
				public PersonBuilder WithMothersMaidenName(global::System.String value)
		        {
				    if(this.MothersMaidenName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.MothersMaidenName = value;
		            return this;
		        }	

				public global::System.DateTime? BirthDate {get; set;}

				/// <exclude/>
				public PersonBuilder WithBirthDate(global::System.DateTime? value)
		        {
				    if(this.BirthDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.BirthDate = value;
		            return this;
		        }	

				public global::System.Decimal? Height {get; set;}

				/// <exclude/>
				public PersonBuilder WithHeight(global::System.Decimal? value)
		        {
				    if(this.Height!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Height = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<PersonTraining> PersonTrainings {get; set;}	

				/// <exclude/>
				public PersonBuilder WithPersonTraining(PersonTraining value)
		        {
					if(this.PersonTrainings == null)
					{
						this.PersonTrainings = new global::System.Collections.Generic.List<PersonTraining>(); 
					}
		            this.PersonTrainings.Add(value);
		            return this;
		        }		

				
				public GenderType Gender {get; set;}

				/// <exclude/>
				public PersonBuilder WithGender(GenderType value)
		        {
		            if(this.Gender!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Gender = value;
		            return this;
		        }		

				
				public global::System.Int32? Weight {get; set;}

				/// <exclude/>
				public PersonBuilder WithWeight(global::System.Int32? value)
		        {
				    if(this.Weight!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Weight = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Hobby> Hobbies {get; set;}	

				/// <exclude/>
				public PersonBuilder WithHobby(Hobby value)
		        {
					if(this.Hobbies == null)
					{
						this.Hobbies = new global::System.Collections.Generic.List<Hobby>(); 
					}
		            this.Hobbies.Add(value);
		            return this;
		        }		

				
				public global::System.Int32? TotalYearsWorkExperience {get; set;}

				/// <exclude/>
				public PersonBuilder WithTotalYearsWorkExperience(global::System.Int32? value)
		        {
				    if(this.TotalYearsWorkExperience!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalYearsWorkExperience = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Passport> Passports {get; set;}	

				/// <exclude/>
				public PersonBuilder WithPassport(Passport value)
		        {
					if(this.Passports == null)
					{
						this.Passports = new global::System.Collections.Generic.List<Passport>(); 
					}
		            this.Passports.Add(value);
		            return this;
		        }		

				
				public MaritalStatus MaritalStatus {get; set;}

				/// <exclude/>
				public PersonBuilder WithMaritalStatus(MaritalStatus value)
		        {
		            if(this.MaritalStatus!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.MaritalStatus = value;
		            return this;
		        }		

				
				public Media Picture {get; set;}

				/// <exclude/>
				public PersonBuilder WithPicture(Media value)
		        {
		            if(this.Picture!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Picture = value;
		            return this;
		        }		

				
				public global::System.String SocialSecurityNumber {get; set;}

				/// <exclude/>
				public PersonBuilder WithSocialSecurityNumber(global::System.String value)
		        {
				    if(this.SocialSecurityNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SocialSecurityNumber = value;
		            return this;
		        }	

				public global::System.DateTime? DeceasedDate {get; set;}

				/// <exclude/>
				public PersonBuilder WithDeceasedDate(global::System.DateTime? value)
		        {
				    if(this.DeceasedDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DeceasedDate = value;
		            return this;
		        }	

				public global::System.Boolean? UserEmailConfirmed {get; set;}

				/// <exclude/>
				public PersonBuilder WithUserEmailConfirmed(global::System.Boolean? value)
		        {
				    if(this.UserEmailConfirmed!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserEmailConfirmed = value;
		            return this;
		        }	

				public global::System.String UserName {get; set;}

				/// <exclude/>
				public PersonBuilder WithUserName(global::System.String value)
		        {
				    if(this.UserName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserName = value;
		            return this;
		        }	

				public global::System.String UserEmail {get; set;}

				/// <exclude/>
				public PersonBuilder WithUserEmail(global::System.String value)
		        {
				    if(this.UserEmail!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserEmail = value;
		            return this;
		        }	

				public global::System.String UserPasswordHash {get; set;}

				/// <exclude/>
				public PersonBuilder WithUserPasswordHash(global::System.String value)
		        {
				    if(this.UserPasswordHash!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UserPasswordHash = value;
		            return this;
		        }	

				public SecurityToken OwnerSecurityToken {get; set;}

				/// <exclude/>
				public PersonBuilder WithOwnerSecurityToken(SecurityToken value)
		        {
		            if(this.OwnerSecurityToken!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.OwnerSecurityToken = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public PersonBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public PersonBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public PersonBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public Locale Locale {get; set;}

				/// <exclude/>
				public PersonBuilder WithLocale(Locale value)
		        {
		            if(this.Locale!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Locale = value;
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public PersonBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public SearchData SearchData {get; set;}

				/// <exclude/>
				public PersonBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				
				public global::System.Decimal? YTDRevenue {get; set;}

				/// <exclude/>
				public PersonBuilder WithYTDRevenue(global::System.Decimal? value)
		        {
				    if(this.YTDRevenue!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.YTDRevenue = value;
		            return this;
		        }	

				public global::System.Decimal? LastYearsRevenue {get; set;}

				/// <exclude/>
				public PersonBuilder WithLastYearsRevenue(global::System.Decimal? value)
		        {
				    if(this.LastYearsRevenue!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.LastYearsRevenue = value;
		            return this;
		        }	

				public TelecommunicationsNumber BillingInquiriesFax {get; set;}

				/// <exclude/>
				public PersonBuilder WithBillingInquiriesFax(TelecommunicationsNumber value)
		        {
		            if(this.BillingInquiriesFax!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BillingInquiriesFax = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Qualification> Qualifications {get; set;}	

				/// <exclude/>
				public PersonBuilder WithQualification(Qualification value)
		        {
					if(this.Qualifications == null)
					{
						this.Qualifications = new global::System.Collections.Generic.List<Qualification>(); 
					}
		            this.Qualifications.Add(value);
		            return this;
		        }		

				
				public ContactMechanism HomeAddress {get; set;}

				/// <exclude/>
				public PersonBuilder WithHomeAddress(ContactMechanism value)
		        {
		            if(this.HomeAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.HomeAddress = value;
		            return this;
		        }		

				
				public ContactMechanism SalesOffice {get; set;}

				/// <exclude/>
				public PersonBuilder WithSalesOffice(ContactMechanism value)
		        {
		            if(this.SalesOffice!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesOffice = value;
		            return this;
		        }		

				
				public TelecommunicationsNumber OrderInquiriesFax {get; set;}

				/// <exclude/>
				public PersonBuilder WithOrderInquiriesFax(TelecommunicationsNumber value)
		        {
		            if(this.OrderInquiriesFax!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.OrderInquiriesFax = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Person> CurrentSalesReps {get; set;}	

				/// <exclude/>
				public PersonBuilder WithCurrentSalesRep(Person value)
		        {
					if(this.CurrentSalesReps == null)
					{
						this.CurrentSalesReps = new global::System.Collections.Generic.List<Person>(); 
					}
		            this.CurrentSalesReps.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PartyContactMechanism> PartyContactMechanisms {get; set;}	

				/// <exclude/>
				public PersonBuilder WithPartyContactMechanism(PartyContactMechanism value)
		        {
					if(this.PartyContactMechanisms == null)
					{
						this.PartyContactMechanisms = new global::System.Collections.Generic.List<PartyContactMechanism>(); 
					}
		            this.PartyContactMechanisms.Add(value);
		            return this;
		        }		

				
				public TelecommunicationsNumber ShippingInquiriesFax {get; set;}

				/// <exclude/>
				public PersonBuilder WithShippingInquiriesFax(TelecommunicationsNumber value)
		        {
		            if(this.ShippingInquiriesFax!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShippingInquiriesFax = value;
		            return this;
		        }		

				
				public TelecommunicationsNumber ShippingInquiriesPhone {get; set;}

				/// <exclude/>
				public PersonBuilder WithShippingInquiriesPhone(TelecommunicationsNumber value)
		        {
		            if(this.ShippingInquiriesPhone!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShippingInquiriesPhone = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<BillingAccount> BillingAccounts {get; set;}	

				/// <exclude/>
				public PersonBuilder WithBillingAccount(BillingAccount value)
		        {
					if(this.BillingAccounts == null)
					{
						this.BillingAccounts = new global::System.Collections.Generic.List<BillingAccount>(); 
					}
		            this.BillingAccounts.Add(value);
		            return this;
		        }		

				
				public TelecommunicationsNumber OrderInquiriesPhone {get; set;}

				/// <exclude/>
				public PersonBuilder WithOrderInquiriesPhone(TelecommunicationsNumber value)
		        {
		            if(this.OrderInquiriesPhone!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.OrderInquiriesPhone = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PartySkill> PartySkills {get; set;}	

				/// <exclude/>
				public PersonBuilder WithPartySkill(PartySkill value)
		        {
					if(this.PartySkills == null)
					{
						this.PartySkills = new global::System.Collections.Generic.List<PartySkill>(); 
					}
		            this.PartySkills.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PartyClassification> PartyClassifications {get; set;}	

				/// <exclude/>
				public PersonBuilder WithPartyClassification(PartyClassification value)
		        {
					if(this.PartyClassifications == null)
					{
						this.PartyClassifications = new global::System.Collections.Generic.List<PartyClassification>(); 
					}
		            this.PartyClassifications.Add(value);
		            return this;
		        }		

				
				public global::System.Boolean? ExcludeFromDunning {get; set;}

				/// <exclude/>
				public PersonBuilder WithExcludeFromDunning(global::System.Boolean? value)
		        {
				    if(this.ExcludeFromDunning!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ExcludeFromDunning = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<BankAccount> BankAccounts {get; set;}	

				/// <exclude/>
				public PersonBuilder WithBankAccount(BankAccount value)
		        {
					if(this.BankAccounts == null)
					{
						this.BankAccounts = new global::System.Collections.Generic.List<BankAccount>(); 
					}
		            this.BankAccounts.Add(value);
		            return this;
		        }		

				
				public ContactMechanism BillingAddress {get; set;}

				/// <exclude/>
				public PersonBuilder WithBillingAddress(ContactMechanism value)
		        {
		            if(this.BillingAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BillingAddress = value;
		            return this;
		        }		

				
				public ShipmentMethod DefaultShipmentMethod {get; set;}

				/// <exclude/>
				public PersonBuilder WithDefaultShipmentMethod(ShipmentMethod value)
		        {
		            if(this.DefaultShipmentMethod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultShipmentMethod = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Resume> Resumes {get; set;}	

				/// <exclude/>
				public PersonBuilder WithResume(Resume value)
		        {
					if(this.Resumes == null)
					{
						this.Resumes = new global::System.Collections.Generic.List<Resume>(); 
					}
		            this.Resumes.Add(value);
		            return this;
		        }		

				
				public ContactMechanism HeadQuarter {get; set;}

				/// <exclude/>
				public PersonBuilder WithHeadQuarter(ContactMechanism value)
		        {
		            if(this.HeadQuarter!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.HeadQuarter = value;
		            return this;
		        }		

				
				public ElectronicAddress PersonalEmailAddress {get; set;}

				/// <exclude/>
				public PersonBuilder WithPersonalEmailAddress(ElectronicAddress value)
		        {
		            if(this.PersonalEmailAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PersonalEmailAddress = value;
		            return this;
		        }		

				
				public TelecommunicationsNumber CellPhoneNumber {get; set;}

				/// <exclude/>
				public PersonBuilder WithCellPhoneNumber(TelecommunicationsNumber value)
		        {
		            if(this.CellPhoneNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CellPhoneNumber = value;
		            return this;
		        }		

				
				public TelecommunicationsNumber BillingInquiriesPhone {get; set;}

				/// <exclude/>
				public PersonBuilder WithBillingInquiriesPhone(TelecommunicationsNumber value)
		        {
		            if(this.BillingInquiriesPhone!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BillingInquiriesPhone = value;
		            return this;
		        }		

				
				public global::System.String PartyName {get; set;}

				/// <exclude/>
				public PersonBuilder WithPartyName(global::System.String value)
		        {
				    if(this.PartyName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.PartyName = value;
		            return this;
		        }	

				public ContactMechanism OrderAddress {get; set;}

				/// <exclude/>
				public PersonBuilder WithOrderAddress(ContactMechanism value)
		        {
		            if(this.OrderAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.OrderAddress = value;
		            return this;
		        }		

				
				public ElectronicAddress InternetAddress {get; set;}

				/// <exclude/>
				public PersonBuilder WithInternetAddress(ElectronicAddress value)
		        {
		            if(this.InternetAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.InternetAddress = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Media> Contents {get; set;}	

				/// <exclude/>
				public PersonBuilder WithContent(Media value)
		        {
					if(this.Contents == null)
					{
						this.Contents = new global::System.Collections.Generic.List<Media>(); 
					}
		            this.Contents.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<CreditCard> CreditCards {get; set;}	

				/// <exclude/>
				public PersonBuilder WithCreditCard(CreditCard value)
		        {
					if(this.CreditCards == null)
					{
						this.CreditCards = new global::System.Collections.Generic.List<CreditCard>(); 
					}
		            this.CreditCards.Add(value);
		            return this;
		        }		

				
				public PostalAddress ShippingAddress {get; set;}

				/// <exclude/>
				public PersonBuilder WithShippingAddress(PostalAddress value)
		        {
		            if(this.ShippingAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShippingAddress = value;
		            return this;
		        }		

				
				public global::System.Decimal? OpenOrderAmount {get; set;}

				/// <exclude/>
				public PersonBuilder WithOpenOrderAmount(global::System.Decimal? value)
		        {
				    if(this.OpenOrderAmount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.OpenOrderAmount = value;
		            return this;
		        }	

				public TelecommunicationsNumber GeneralFaxNumber {get; set;}

				/// <exclude/>
				public PersonBuilder WithGeneralFaxNumber(TelecommunicationsNumber value)
		        {
		            if(this.GeneralFaxNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.GeneralFaxNumber = value;
		            return this;
		        }		

				
				public PaymentMethod DefaultPaymentMethod {get; set;}

				/// <exclude/>
				public PersonBuilder WithDefaultPaymentMethod(PaymentMethod value)
		        {
		            if(this.DefaultPaymentMethod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultPaymentMethod = value;
		            return this;
		        }		

				
				public TelecommunicationsNumber GeneralPhoneNumber {get; set;}

				/// <exclude/>
				public PersonBuilder WithGeneralPhoneNumber(TelecommunicationsNumber value)
		        {
		            if(this.GeneralPhoneNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.GeneralPhoneNumber = value;
		            return this;
		        }		

				
				public Currency PreferredCurrency {get; set;}

				/// <exclude/>
				public PersonBuilder WithPreferredCurrency(Currency value)
		        {
		            if(this.PreferredCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PreferredCurrency = value;
		            return this;
		        }		

				
				public VatRegime VatRegime {get; set;}

				/// <exclude/>
				public PersonBuilder WithVatRegime(VatRegime value)
		        {
		            if(this.VatRegime!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.VatRegime = value;
		            return this;
		        }		

				

	}

	public partial class Persons : global::Allors.ObjectsBase<Person>
	{
		public static readonly PersonMeta Meta = PersonMeta.Instance;

		public Persons(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}