// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class SalesOrderItem
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (SalesOrderItemBuilder)objectBuilder;
			

			if(builder.InitialProfitMargin.HasValue)
			{
				this.InitialProfitMargin = builder.InitialProfitMargin.Value;
			}			
					

			if(builder.QuantityShortFalled.HasValue)
			{
				this.QuantityShortFalled = builder.QuantityShortFalled.Value;
			}			
					

			if(builder.MaintainedProfitMargin.HasValue)
			{
				this.MaintainedProfitMargin = builder.MaintainedProfitMargin.Value;
			}			
					

			if(builder.RequiredProfitMargin.HasValue)
			{
				this.RequiredProfitMargin = builder.RequiredProfitMargin.Value;
			}			
					

			if(builder.RequiredMarkupPercentage.HasValue)
			{
				this.RequiredMarkupPercentage = builder.RequiredMarkupPercentage.Value;
			}			
					

			if(builder.QuantityShipped.HasValue)
			{
				this.QuantityShipped = builder.QuantityShipped.Value;
			}			
					

			if(builder.QuantityPicked.HasValue)
			{
				this.QuantityPicked = builder.QuantityPicked.Value;
			}			
					

			if(builder.UnitPurchasePrice.HasValue)
			{
				this.UnitPurchasePrice = builder.UnitPurchasePrice.Value;
			}			
					

			if(builder.QuantityReturned.HasValue)
			{
				this.QuantityReturned = builder.QuantityReturned.Value;
			}			
					

			if(builder.QuantityReserved.HasValue)
			{
				this.QuantityReserved = builder.QuantityReserved.Value;
			}			
					

			if(builder.QuantityPendingShipment.HasValue)
			{
				this.QuantityPendingShipment = builder.QuantityPendingShipment.Value;
			}			
					

			if(builder.MaintainedMarkupPercentage.HasValue)
			{
				this.MaintainedMarkupPercentage = builder.MaintainedMarkupPercentage.Value;
			}			
					

			if(builder.InitialMarkupPercentage.HasValue)
			{
				this.InitialMarkupPercentage = builder.InitialMarkupPercentage.Value;
			}			
					

			if(builder.QuantityRequestsShipping.HasValue)
			{
				this.QuantityRequestsShipping = builder.QuantityRequestsShipping.Value;
			}			
					

			if(builder.TotalDiscountAsPercentage.HasValue)
			{
				this.TotalDiscountAsPercentage = builder.TotalDiscountAsPercentage.Value;
			}			
					

			if(builder.UnitVat.HasValue)
			{
				this.UnitVat = builder.UnitVat.Value;
			}			
					

			if(builder.TotalVatCustomerCurrency.HasValue)
			{
				this.TotalVatCustomerCurrency = builder.TotalVatCustomerCurrency.Value;
			}			
					

			if(builder.TotalVat.HasValue)
			{
				this.TotalVat = builder.TotalVat.Value;
			}			
					

			if(builder.UnitSurcharge.HasValue)
			{
				this.UnitSurcharge = builder.UnitSurcharge.Value;
			}			
					

			if(builder.UnitDiscount.HasValue)
			{
				this.UnitDiscount = builder.UnitDiscount.Value;
			}			
					

			if(builder.PreviousQuantity.HasValue)
			{
				this.PreviousQuantity = builder.PreviousQuantity.Value;
			}			
					

			if(builder.QuantityOrdered.HasValue)
			{
				this.QuantityOrdered = builder.QuantityOrdered.Value;
			}			
					

			if(builder.TotalExVatCustomerCurrency.HasValue)
			{
				this.TotalExVatCustomerCurrency = builder.TotalExVatCustomerCurrency.Value;
			}			
					

			if(builder.ActualUnitPrice.HasValue)
			{
				this.ActualUnitPrice = builder.ActualUnitPrice.Value;
			}			
					

			if(builder.TotalIncVatCustomerCurrency.HasValue)
			{
				this.TotalIncVatCustomerCurrency = builder.TotalIncVatCustomerCurrency.Value;
			}			
		

			this.Description = builder.Description;
					

			if(builder.UnitBasePrice.HasValue)
			{
				this.UnitBasePrice = builder.UnitBasePrice.Value;
			}			
					

			if(builder.CalculatedUnitPrice.HasValue)
			{
				this.CalculatedUnitPrice = builder.CalculatedUnitPrice.Value;
			}			
					

			if(builder.TotalOrderAdjustmentCustomerCurrency.HasValue)
			{
				this.TotalOrderAdjustmentCustomerCurrency = builder.TotalOrderAdjustmentCustomerCurrency.Value;
			}			
					

			if(builder.TotalOrderAdjustment.HasValue)
			{
				this.TotalOrderAdjustment = builder.TotalOrderAdjustment.Value;
			}			
					

			if(builder.TotalSurchargeCustomerCurrency.HasValue)
			{
				this.TotalSurchargeCustomerCurrency = builder.TotalSurchargeCustomerCurrency.Value;
			}			
					

			if(builder.AssignedDeliveryDate.HasValue)
			{
				this.AssignedDeliveryDate = builder.AssignedDeliveryDate.Value;
			}			
					

			if(builder.DeliveryDate.HasValue)
			{
				this.DeliveryDate = builder.DeliveryDate.Value;
			}			
					

			if(builder.TotalIncVat.HasValue)
			{
				this.TotalIncVat = builder.TotalIncVat.Value;
			}			
					

			if(builder.TotalSurchargeAsPercentage.HasValue)
			{
				this.TotalSurchargeAsPercentage = builder.TotalSurchargeAsPercentage.Value;
			}			
					

			if(builder.TotalDiscountCustomerCurrency.HasValue)
			{
				this.TotalDiscountCustomerCurrency = builder.TotalDiscountCustomerCurrency.Value;
			}			
					

			if(builder.TotalDiscount.HasValue)
			{
				this.TotalDiscount = builder.TotalDiscount.Value;
			}			
					

			if(builder.TotalSurcharge.HasValue)
			{
				this.TotalSurcharge = builder.TotalSurcharge.Value;
			}			
		

			this.ShippingInstruction = builder.ShippingInstruction;
					

			if(builder.TotalBasePrice.HasValue)
			{
				this.TotalBasePrice = builder.TotalBasePrice.Value;
			}			
					

			if(builder.TotalExVat.HasValue)
			{
				this.TotalExVat = builder.TotalExVat.Value;
			}			
					

			if(builder.TotalBasePriceCustomerCurrency.HasValue)
			{
				this.TotalBasePriceCustomerCurrency = builder.TotalBasePriceCustomerCurrency.Value;
			}			
		

			this.Message = builder.Message;
		

			this.DisplayName = builder.DisplayName;
		

			this.Comment = builder.Comment;
		

			this.CurrentPaymentStatus = builder.CurrentPaymentStatus;


			if(builder.OrderedWithFeatures!=null)
			{
				this.OrderedWithFeatures = builder.OrderedWithFeatures.ToArray();
			}

			if(builder.OrderItemStatuses!=null)
			{
				this.OrderItemStatuses = builder.OrderItemStatuses.ToArray();
			}


			this.CurrentShipmentStatus = builder.CurrentShipmentStatus;



			this.PreviousReservedFromInventoryItem = builder.PreviousReservedFromInventoryItem;



			this.CurrentOrderItemStatus = builder.CurrentOrderItemStatus;



			this.ShipToAddress = builder.ShipToAddress;



			this.PreviousProduct = builder.PreviousProduct;



			this.CurrentObjectState = builder.CurrentObjectState;



			this.ShipToParty = builder.ShipToParty;



			this.AssignedShipToAddress = builder.AssignedShipToAddress;



			this.SalesRep = builder.SalesRep;


			if(builder.ShipmentStatuses!=null)
			{
				this.ShipmentStatuses = builder.ShipmentStatuses.ToArray();
			}


			this.AssignedShipToParty = builder.AssignedShipToParty;



			this.PreviousObjectState = builder.PreviousObjectState;



			this.ReservedFromInventoryItem = builder.ReservedFromInventoryItem;



			this.Product = builder.Product;



			this.ProductFeature = builder.ProductFeature;


			if(builder.PaymentStatuses!=null)
			{
				this.PaymentStatuses = builder.PaymentStatuses.ToArray();
			}


			this.DiscountAdjustment = builder.DiscountAdjustment;



			this.VatRegime = builder.VatRegime;



			this.BudgetItem = builder.BudgetItem;



			this.DerivedVatRate = builder.DerivedVatRate;



			this.CorrespondingPurchaseOrder = builder.CorrespondingPurchaseOrder;



			this.QuoteItem = builder.QuoteItem;


			if(builder.OrderTerms!=null)
			{
				this.OrderTerms = builder.OrderTerms.ToArray();
			}


			this.AssignedVatRegime = builder.AssignedVatRegime;


			if(builder.Associations!=null)
			{
				this.Associations = builder.Associations.ToArray();
			}

			if(builder.CurrentPriceComponents!=null)
			{
				this.CurrentPriceComponents = builder.CurrentPriceComponents.ToArray();
			}


			this.SurchargeAdjustment = builder.SurchargeAdjustment;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}
	}

	public partial class SalesOrderItemBuilder : Allors.ObjectBuilder<SalesOrderItem> , OrderItemBuilder, global::System.IDisposable
	{		
		public SalesOrderItemBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.Decimal? InitialProfitMargin {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithInitialProfitMargin(global::System.Decimal? value)
		        {
				    if(this.InitialProfitMargin!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InitialProfitMargin = value;
		            return this;
		        }	

				public SalesOrderItemStatus CurrentPaymentStatus {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithCurrentPaymentStatus(SalesOrderItemStatus value)
		        {
		            if(this.CurrentPaymentStatus!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentPaymentStatus = value;
		            return this;
		        }		

				
				public global::System.Decimal? QuantityShortFalled {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithQuantityShortFalled(global::System.Decimal? value)
		        {
				    if(this.QuantityShortFalled!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.QuantityShortFalled = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<OrderItem> OrderedWithFeatures {get; set;}	

				/// <exclude/>
				public SalesOrderItemBuilder WithOrderedWithFeature(OrderItem value)
		        {
					if(this.OrderedWithFeatures == null)
					{
						this.OrderedWithFeatures = new global::System.Collections.Generic.List<OrderItem>(); 
					}
		            this.OrderedWithFeatures.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? MaintainedProfitMargin {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithMaintainedProfitMargin(global::System.Decimal? value)
		        {
				    if(this.MaintainedProfitMargin!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.MaintainedProfitMargin = value;
		            return this;
		        }	

				public global::System.Decimal? RequiredProfitMargin {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithRequiredProfitMargin(global::System.Decimal? value)
		        {
				    if(this.RequiredProfitMargin!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.RequiredProfitMargin = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<SalesOrderItemStatus> OrderItemStatuses {get; set;}	

				/// <exclude/>
				public SalesOrderItemBuilder WithOrderItemStatus(SalesOrderItemStatus value)
		        {
					if(this.OrderItemStatuses == null)
					{
						this.OrderItemStatuses = new global::System.Collections.Generic.List<SalesOrderItemStatus>(); 
					}
		            this.OrderItemStatuses.Add(value);
		            return this;
		        }		

				
				public SalesOrderItemStatus CurrentShipmentStatus {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithCurrentShipmentStatus(SalesOrderItemStatus value)
		        {
		            if(this.CurrentShipmentStatus!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentShipmentStatus = value;
		            return this;
		        }		

				
				public NonSerializedInventoryItem PreviousReservedFromInventoryItem {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithPreviousReservedFromInventoryItem(NonSerializedInventoryItem value)
		        {
		            if(this.PreviousReservedFromInventoryItem!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PreviousReservedFromInventoryItem = value;
		            return this;
		        }		

				
				public global::System.Decimal? RequiredMarkupPercentage {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithRequiredMarkupPercentage(global::System.Decimal? value)
		        {
				    if(this.RequiredMarkupPercentage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.RequiredMarkupPercentage = value;
		            return this;
		        }	

				public global::System.Decimal? QuantityShipped {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithQuantityShipped(global::System.Decimal? value)
		        {
				    if(this.QuantityShipped!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.QuantityShipped = value;
		            return this;
		        }	

				public SalesOrderItemStatus CurrentOrderItemStatus {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithCurrentOrderItemStatus(SalesOrderItemStatus value)
		        {
		            if(this.CurrentOrderItemStatus!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentOrderItemStatus = value;
		            return this;
		        }		

				
				public PostalAddress ShipToAddress {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithShipToAddress(PostalAddress value)
		        {
		            if(this.ShipToAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShipToAddress = value;
		            return this;
		        }		

				
				public global::System.Decimal? QuantityPicked {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithQuantityPicked(global::System.Decimal? value)
		        {
				    if(this.QuantityPicked!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.QuantityPicked = value;
		            return this;
		        }	

				public Product PreviousProduct {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithPreviousProduct(Product value)
		        {
		            if(this.PreviousProduct!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PreviousProduct = value;
		            return this;
		        }		

				
				public SalesOrderItemObjectState CurrentObjectState {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithCurrentObjectState(SalesOrderItemObjectState value)
		        {
		            if(this.CurrentObjectState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentObjectState = value;
		            return this;
		        }		

				
				public global::System.Decimal? UnitPurchasePrice {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithUnitPurchasePrice(global::System.Decimal? value)
		        {
				    if(this.UnitPurchasePrice!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UnitPurchasePrice = value;
		            return this;
		        }	

				public Party ShipToParty {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithShipToParty(Party value)
		        {
		            if(this.ShipToParty!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShipToParty = value;
		            return this;
		        }		

				
				public PostalAddress AssignedShipToAddress {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithAssignedShipToAddress(PostalAddress value)
		        {
		            if(this.AssignedShipToAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.AssignedShipToAddress = value;
		            return this;
		        }		

				
				public global::System.Decimal? QuantityReturned {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithQuantityReturned(global::System.Decimal? value)
		        {
				    if(this.QuantityReturned!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.QuantityReturned = value;
		            return this;
		        }	

				public global::System.Decimal? QuantityReserved {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithQuantityReserved(global::System.Decimal? value)
		        {
				    if(this.QuantityReserved!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.QuantityReserved = value;
		            return this;
		        }	

				public Person SalesRep {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithSalesRep(Person value)
		        {
		            if(this.SalesRep!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesRep = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SalesOrderItemStatus> ShipmentStatuses {get; set;}	

				/// <exclude/>
				public SalesOrderItemBuilder WithShipmentStatus(SalesOrderItemStatus value)
		        {
					if(this.ShipmentStatuses == null)
					{
						this.ShipmentStatuses = new global::System.Collections.Generic.List<SalesOrderItemStatus>(); 
					}
		            this.ShipmentStatuses.Add(value);
		            return this;
		        }		

				
				public Party AssignedShipToParty {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithAssignedShipToParty(Party value)
		        {
		            if(this.AssignedShipToParty!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.AssignedShipToParty = value;
		            return this;
		        }		

				
				public global::System.Decimal? QuantityPendingShipment {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithQuantityPendingShipment(global::System.Decimal? value)
		        {
				    if(this.QuantityPendingShipment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.QuantityPendingShipment = value;
		            return this;
		        }	

				public global::System.Decimal? MaintainedMarkupPercentage {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithMaintainedMarkupPercentage(global::System.Decimal? value)
		        {
				    if(this.MaintainedMarkupPercentage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.MaintainedMarkupPercentage = value;
		            return this;
		        }	

				public SalesOrderItemObjectState PreviousObjectState {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithPreviousObjectState(SalesOrderItemObjectState value)
		        {
		            if(this.PreviousObjectState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PreviousObjectState = value;
		            return this;
		        }		

				
				public global::System.Decimal? InitialMarkupPercentage {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithInitialMarkupPercentage(global::System.Decimal? value)
		        {
				    if(this.InitialMarkupPercentage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InitialMarkupPercentage = value;
		            return this;
		        }	

				public NonSerializedInventoryItem ReservedFromInventoryItem {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithReservedFromInventoryItem(NonSerializedInventoryItem value)
		        {
		            if(this.ReservedFromInventoryItem!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ReservedFromInventoryItem = value;
		            return this;
		        }		

				
				public Product Product {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithProduct(Product value)
		        {
		            if(this.Product!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Product = value;
		            return this;
		        }		

				
				public ProductFeature ProductFeature {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithProductFeature(ProductFeature value)
		        {
		            if(this.ProductFeature!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ProductFeature = value;
		            return this;
		        }		

				
				public global::System.Decimal? QuantityRequestsShipping {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithQuantityRequestsShipping(global::System.Decimal? value)
		        {
				    if(this.QuantityRequestsShipping!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.QuantityRequestsShipping = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<SalesOrderItemStatus> PaymentStatuses {get; set;}	

				/// <exclude/>
				public SalesOrderItemBuilder WithPaymentStatus(SalesOrderItemStatus value)
		        {
					if(this.PaymentStatuses == null)
					{
						this.PaymentStatuses = new global::System.Collections.Generic.List<SalesOrderItemStatus>(); 
					}
		            this.PaymentStatuses.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? TotalDiscountAsPercentage {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithTotalDiscountAsPercentage(global::System.Decimal? value)
		        {
				    if(this.TotalDiscountAsPercentage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalDiscountAsPercentage = value;
		            return this;
		        }	

				public DiscountAdjustment DiscountAdjustment {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithDiscountAdjustment(DiscountAdjustment value)
		        {
		            if(this.DiscountAdjustment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DiscountAdjustment = value;
		            return this;
		        }		

				
				public global::System.Decimal? UnitVat {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithUnitVat(global::System.Decimal? value)
		        {
				    if(this.UnitVat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UnitVat = value;
		            return this;
		        }	

				public global::System.Decimal? TotalVatCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithTotalVatCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalVatCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalVatCustomerCurrency = value;
		            return this;
		        }	

				public VatRegime VatRegime {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithVatRegime(VatRegime value)
		        {
		            if(this.VatRegime!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.VatRegime = value;
		            return this;
		        }		

				
				public BudgetItem BudgetItem {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithBudgetItem(BudgetItem value)
		        {
		            if(this.BudgetItem!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BudgetItem = value;
		            return this;
		        }		

				
				public global::System.Decimal? TotalVat {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithTotalVat(global::System.Decimal? value)
		        {
				    if(this.TotalVat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalVat = value;
		            return this;
		        }	

				public global::System.Decimal? UnitSurcharge {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithUnitSurcharge(global::System.Decimal? value)
		        {
				    if(this.UnitSurcharge!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UnitSurcharge = value;
		            return this;
		        }	

				public global::System.Decimal? UnitDiscount {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithUnitDiscount(global::System.Decimal? value)
		        {
				    if(this.UnitDiscount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UnitDiscount = value;
		            return this;
		        }	

				public global::System.Decimal? PreviousQuantity {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithPreviousQuantity(global::System.Decimal? value)
		        {
				    if(this.PreviousQuantity!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.PreviousQuantity = value;
		            return this;
		        }	

				public global::System.Decimal? QuantityOrdered {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithQuantityOrdered(global::System.Decimal? value)
		        {
				    if(this.QuantityOrdered!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.QuantityOrdered = value;
		            return this;
		        }	

				public global::System.Decimal? TotalExVatCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithTotalExVatCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalExVatCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalExVatCustomerCurrency = value;
		            return this;
		        }	

				public VatRate DerivedVatRate {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithDerivedVatRate(VatRate value)
		        {
		            if(this.DerivedVatRate!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DerivedVatRate = value;
		            return this;
		        }		

				
				public global::System.Decimal? ActualUnitPrice {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithActualUnitPrice(global::System.Decimal? value)
		        {
				    if(this.ActualUnitPrice!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ActualUnitPrice = value;
		            return this;
		        }	

				public global::System.Decimal? TotalIncVatCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithTotalIncVatCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalIncVatCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalIncVatCustomerCurrency = value;
		            return this;
		        }	

				public global::System.String Description {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.Decimal? UnitBasePrice {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithUnitBasePrice(global::System.Decimal? value)
		        {
				    if(this.UnitBasePrice!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UnitBasePrice = value;
		            return this;
		        }	

				public PurchaseOrder CorrespondingPurchaseOrder {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithCorrespondingPurchaseOrder(PurchaseOrder value)
		        {
		            if(this.CorrespondingPurchaseOrder!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CorrespondingPurchaseOrder = value;
		            return this;
		        }		

				
				public global::System.Decimal? CalculatedUnitPrice {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithCalculatedUnitPrice(global::System.Decimal? value)
		        {
				    if(this.CalculatedUnitPrice!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CalculatedUnitPrice = value;
		            return this;
		        }	

				public global::System.Decimal? TotalOrderAdjustmentCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithTotalOrderAdjustmentCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalOrderAdjustmentCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalOrderAdjustmentCustomerCurrency = value;
		            return this;
		        }	

				public global::System.Decimal? TotalOrderAdjustment {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithTotalOrderAdjustment(global::System.Decimal? value)
		        {
				    if(this.TotalOrderAdjustment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalOrderAdjustment = value;
		            return this;
		        }	

				public global::System.Decimal? TotalSurchargeCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithTotalSurchargeCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalSurchargeCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalSurchargeCustomerCurrency = value;
		            return this;
		        }	

				public QuoteItem QuoteItem {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithQuoteItem(QuoteItem value)
		        {
		            if(this.QuoteItem!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.QuoteItem = value;
		            return this;
		        }		

				
				public global::System.DateTime? AssignedDeliveryDate {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithAssignedDeliveryDate(global::System.DateTime? value)
		        {
				    if(this.AssignedDeliveryDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AssignedDeliveryDate = value;
		            return this;
		        }	

				public global::System.DateTime? DeliveryDate {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithDeliveryDate(global::System.DateTime? value)
		        {
				    if(this.DeliveryDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DeliveryDate = value;
		            return this;
		        }	

				public global::System.Decimal? TotalIncVat {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithTotalIncVat(global::System.Decimal? value)
		        {
				    if(this.TotalIncVat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalIncVat = value;
		            return this;
		        }	

				public global::System.Decimal? TotalSurchargeAsPercentage {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithTotalSurchargeAsPercentage(global::System.Decimal? value)
		        {
				    if(this.TotalSurchargeAsPercentage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalSurchargeAsPercentage = value;
		            return this;
		        }	

				public global::System.Decimal? TotalDiscountCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithTotalDiscountCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalDiscountCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalDiscountCustomerCurrency = value;
		            return this;
		        }	

				public global::System.Decimal? TotalDiscount {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithTotalDiscount(global::System.Decimal? value)
		        {
				    if(this.TotalDiscount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalDiscount = value;
		            return this;
		        }	

				public global::System.Decimal? TotalSurcharge {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithTotalSurcharge(global::System.Decimal? value)
		        {
				    if(this.TotalSurcharge!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalSurcharge = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<OrderTerm> OrderTerms {get; set;}	

				/// <exclude/>
				public SalesOrderItemBuilder WithOrderTerm(OrderTerm value)
		        {
					if(this.OrderTerms == null)
					{
						this.OrderTerms = new global::System.Collections.Generic.List<OrderTerm>(); 
					}
		            this.OrderTerms.Add(value);
		            return this;
		        }		

				
				public VatRegime AssignedVatRegime {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithAssignedVatRegime(VatRegime value)
		        {
		            if(this.AssignedVatRegime!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.AssignedVatRegime = value;
		            return this;
		        }		

				
				public global::System.String ShippingInstruction {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithShippingInstruction(global::System.String value)
		        {
				    if(this.ShippingInstruction!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ShippingInstruction = value;
		            return this;
		        }	

				public global::System.Decimal? TotalBasePrice {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithTotalBasePrice(global::System.Decimal? value)
		        {
				    if(this.TotalBasePrice!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalBasePrice = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<OrderItem> Associations {get; set;}	

				/// <exclude/>
				public SalesOrderItemBuilder WithAssociation(OrderItem value)
		        {
					if(this.Associations == null)
					{
						this.Associations = new global::System.Collections.Generic.List<OrderItem>(); 
					}
		            this.Associations.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? TotalExVat {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithTotalExVat(global::System.Decimal? value)
		        {
				    if(this.TotalExVat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalExVat = value;
		            return this;
		        }	

				public global::System.Decimal? TotalBasePriceCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithTotalBasePriceCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalBasePriceCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalBasePriceCustomerCurrency = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<PriceComponent> CurrentPriceComponents {get; set;}	

				/// <exclude/>
				public SalesOrderItemBuilder WithCurrentPriceComponent(PriceComponent value)
		        {
					if(this.CurrentPriceComponents == null)
					{
						this.CurrentPriceComponents = new global::System.Collections.Generic.List<PriceComponent>(); 
					}
		            this.CurrentPriceComponents.Add(value);
		            return this;
		        }		

				
				public SurchargeAdjustment SurchargeAdjustment {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithSurchargeAdjustment(SurchargeAdjustment value)
		        {
		            if(this.SurchargeAdjustment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SurchargeAdjustment = value;
		            return this;
		        }		

				
				public global::System.String Message {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithMessage(global::System.String value)
		        {
				    if(this.Message!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Message = value;
		            return this;
		        }	

				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public SalesOrderItemBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public SalesOrderItemBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.String Comment {get; set;}

				/// <exclude/>
				public SalesOrderItemBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	


	}

	public partial class SalesOrderItems : global::Allors.ObjectsBase<SalesOrderItem>
	{
		public static readonly SalesOrderItemMeta Meta = SalesOrderItemMeta.Instance;

		public SalesOrderItems(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}