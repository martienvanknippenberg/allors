// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class SalesInvoice
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (SalesInvoiceBuilder)objectBuilder;
			

			if(builder.TotalListPrice.HasValue)
			{
				this.TotalListPrice = builder.TotalListPrice.Value;
			}			
					

			if(builder.InitialProfitMargin.HasValue)
			{
				this.InitialProfitMargin = builder.InitialProfitMargin.Value;
			}			
					

			if(builder.InitialMarkupPercentage.HasValue)
			{
				this.InitialMarkupPercentage = builder.InitialMarkupPercentage.Value;
			}			
					

			if(builder.MaintainedMarkupPercentage.HasValue)
			{
				this.MaintainedMarkupPercentage = builder.MaintainedMarkupPercentage.Value;
			}			
					

			if(builder.MaintainedProfitMargin.HasValue)
			{
				this.MaintainedProfitMargin = builder.MaintainedProfitMargin.Value;
			}			
					

			if(builder.TotalListPriceCustomerCurrency.HasValue)
			{
				this.TotalListPriceCustomerCurrency = builder.TotalListPriceCustomerCurrency.Value;
			}			
					

			if(builder.TotalPurchasePrice.HasValue)
			{
				this.TotalPurchasePrice = builder.TotalPurchasePrice.Value;
			}			
					

			if(builder.TotalShippingAndHandlingCustomerCurrency.HasValue)
			{
				this.TotalShippingAndHandlingCustomerCurrency = builder.TotalShippingAndHandlingCustomerCurrency.Value;
			}			
		

			this.Description = builder.Description;
					

			if(builder.TotalFeeCustomerCurrency.HasValue)
			{
				this.TotalFeeCustomerCurrency = builder.TotalFeeCustomerCurrency.Value;
			}			
					

			if(builder.TotalExVatCustomerCurrency.HasValue)
			{
				this.TotalExVatCustomerCurrency = builder.TotalExVatCustomerCurrency.Value;
			}			
		

			this.CustomerReference = builder.CustomerReference;
					

			if(builder.AmountPaid.HasValue)
			{
				this.AmountPaid = builder.AmountPaid.Value;
			}			
					

			if(builder.TotalDiscount.HasValue)
			{
				this.TotalDiscount = builder.TotalDiscount.Value;
			}			
					

			if(builder.TotalIncVat.HasValue)
			{
				this.TotalIncVat = builder.TotalIncVat.Value;
			}			
					

			if(builder.TotalSurcharge.HasValue)
			{
				this.TotalSurcharge = builder.TotalSurcharge.Value;
			}			
					

			if(builder.TotalBasePrice.HasValue)
			{
				this.TotalBasePrice = builder.TotalBasePrice.Value;
			}			
					

			if(builder.TotalVatCustomerCurrency.HasValue)
			{
				this.TotalVatCustomerCurrency = builder.TotalVatCustomerCurrency.Value;
			}			
					

			if(builder.InvoiceDate.HasValue)
			{
				this.InvoiceDate = builder.InvoiceDate.Value;
			}			
					

			if(builder.EntryDate.HasValue)
			{
				this.EntryDate = builder.EntryDate.Value;
			}			
					

			if(builder.TotalIncVatCustomerCurrency.HasValue)
			{
				this.TotalIncVatCustomerCurrency = builder.TotalIncVatCustomerCurrency.Value;
			}			
					

			if(builder.TotalShippingAndHandling.HasValue)
			{
				this.TotalShippingAndHandling = builder.TotalShippingAndHandling.Value;
			}			
					

			if(builder.TotalBasePriceCustomerCurrency.HasValue)
			{
				this.TotalBasePriceCustomerCurrency = builder.TotalBasePriceCustomerCurrency.Value;
			}			
					

			if(builder.TotalExVat.HasValue)
			{
				this.TotalExVat = builder.TotalExVat.Value;
			}			
					

			if(builder.TotalSurchargeCustomerCurrency.HasValue)
			{
				this.TotalSurchargeCustomerCurrency = builder.TotalSurchargeCustomerCurrency.Value;
			}			
		

			this.InvoiceNumber = builder.InvoiceNumber;
		

			this.Message = builder.Message;
					

			if(builder.TotalDiscountCustomerCurrency.HasValue)
			{
				this.TotalDiscountCustomerCurrency = builder.TotalDiscountCustomerCurrency.Value;
			}			
					

			if(builder.TotalVat.HasValue)
			{
				this.TotalVat = builder.TotalVat.Value;
			}			
					

			if(builder.TotalFee.HasValue)
			{
				this.TotalFee = builder.TotalFee.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
		

			this.Comment = builder.Comment;
		

			this.PrintContent = builder.PrintContent;
					

			if(builder.UniqueId.HasValue)
			{
				this.UniqueId = builder.UniqueId.Value;
			}			
		

			this.CurrentObjectState = builder.CurrentObjectState;



			this.PreviousObjectState = builder.PreviousObjectState;



			this.BilledFromInternalOrganisation = builder.BilledFromInternalOrganisation;



			this.BillToContactMechanism = builder.BillToContactMechanism;



			this.PreviousBillToCustomer = builder.PreviousBillToCustomer;



			this.SalesInvoiceType = builder.SalesInvoiceType;



			this.PaymentMethod = builder.PaymentMethod;



			this.SalesOrder = builder.SalesOrder;


			if(builder.SalesReps!=null)
			{
				this.SalesReps = builder.SalesReps.ToArray();
			}


			this.Shipment = builder.Shipment;


			if(builder.InvoiceStatuses!=null)
			{
				this.InvoiceStatuses = builder.InvoiceStatuses.ToArray();
			}


			this.PreviousShipToCustomer = builder.PreviousShipToCustomer;



			this.BillToCustomer = builder.BillToCustomer;



			this.CurrentInvoiceStatus = builder.CurrentInvoiceStatus;


			if(builder.SalesInvoiceItems!=null)
			{
				this.SalesInvoiceItems = builder.SalesInvoiceItems.ToArray();
			}


			this.ShipToCustomer = builder.ShipToCustomer;



			this.BilledFromContactMechanism = builder.BilledFromContactMechanism;



			this.SalesChannel = builder.SalesChannel;


			if(builder.Customers!=null)
			{
				this.Customers = builder.Customers.ToArray();
			}


			this.ShipToAddress = builder.ShipToAddress;



			this.Store = builder.Store;



			this.CustomerCurrency = builder.CustomerCurrency;



			this.ShippingAndHandlingCharge = builder.ShippingAndHandlingCharge;



			this.Fee = builder.Fee;



			this.DiscountAdjustment = builder.DiscountAdjustment;



			this.BillingAccount = builder.BillingAccount;



			this.SurchargeAdjustment = builder.SurchargeAdjustment;


			if(builder.InvoiceTerms!=null)
			{
				this.InvoiceTerms = builder.InvoiceTerms.ToArray();
			}


			this.VatRegime = builder.VatRegime;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.Locale = builder.Locale;



			this.SearchData = builder.SearchData;


		}
	}

	public partial class SalesInvoiceBuilder : Allors.ObjectBuilder<SalesInvoice> , InvoiceBuilder, global::System.IDisposable
	{		
		public SalesInvoiceBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public SalesInvoiceObjectState CurrentObjectState {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithCurrentObjectState(SalesInvoiceObjectState value)
		        {
		            if(this.CurrentObjectState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentObjectState = value;
		            return this;
		        }		

				
				public SalesInvoiceObjectState PreviousObjectState {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithPreviousObjectState(SalesInvoiceObjectState value)
		        {
		            if(this.PreviousObjectState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PreviousObjectState = value;
		            return this;
		        }		

				
				public global::System.Decimal? TotalListPrice {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithTotalListPrice(global::System.Decimal? value)
		        {
				    if(this.TotalListPrice!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalListPrice = value;
		            return this;
		        }	

				public InternalOrganisation BilledFromInternalOrganisation {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithBilledFromInternalOrganisation(InternalOrganisation value)
		        {
		            if(this.BilledFromInternalOrganisation!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BilledFromInternalOrganisation = value;
		            return this;
		        }		

				
				public ContactMechanism BillToContactMechanism {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithBillToContactMechanism(ContactMechanism value)
		        {
		            if(this.BillToContactMechanism!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BillToContactMechanism = value;
		            return this;
		        }		

				
				public Party PreviousBillToCustomer {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithPreviousBillToCustomer(Party value)
		        {
		            if(this.PreviousBillToCustomer!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PreviousBillToCustomer = value;
		            return this;
		        }		

				
				public SalesInvoiceType SalesInvoiceType {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithSalesInvoiceType(SalesInvoiceType value)
		        {
		            if(this.SalesInvoiceType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesInvoiceType = value;
		            return this;
		        }		

				
				public global::System.Decimal? InitialProfitMargin {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithInitialProfitMargin(global::System.Decimal? value)
		        {
				    if(this.InitialProfitMargin!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InitialProfitMargin = value;
		            return this;
		        }	

				public PaymentMethod PaymentMethod {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithPaymentMethod(PaymentMethod value)
		        {
		            if(this.PaymentMethod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PaymentMethod = value;
		            return this;
		        }		

				
				public SalesOrder SalesOrder {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithSalesOrder(SalesOrder value)
		        {
		            if(this.SalesOrder!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesOrder = value;
		            return this;
		        }		

				
				public global::System.Decimal? InitialMarkupPercentage {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithInitialMarkupPercentage(global::System.Decimal? value)
		        {
				    if(this.InitialMarkupPercentage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InitialMarkupPercentage = value;
		            return this;
		        }	

				public global::System.Decimal? MaintainedMarkupPercentage {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithMaintainedMarkupPercentage(global::System.Decimal? value)
		        {
				    if(this.MaintainedMarkupPercentage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.MaintainedMarkupPercentage = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Person> SalesReps {get; set;}	

				/// <exclude/>
				public SalesInvoiceBuilder WithSalesRep(Person value)
		        {
					if(this.SalesReps == null)
					{
						this.SalesReps = new global::System.Collections.Generic.List<Person>(); 
					}
		            this.SalesReps.Add(value);
		            return this;
		        }		

				
				public Shipment Shipment {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithShipment(Shipment value)
		        {
		            if(this.Shipment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Shipment = value;
		            return this;
		        }		

				
				public global::System.Decimal? MaintainedProfitMargin {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithMaintainedProfitMargin(global::System.Decimal? value)
		        {
				    if(this.MaintainedProfitMargin!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.MaintainedProfitMargin = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<SalesInvoiceStatus> InvoiceStatuses {get; set;}	

				/// <exclude/>
				public SalesInvoiceBuilder WithInvoiceStatus(SalesInvoiceStatus value)
		        {
					if(this.InvoiceStatuses == null)
					{
						this.InvoiceStatuses = new global::System.Collections.Generic.List<SalesInvoiceStatus>(); 
					}
		            this.InvoiceStatuses.Add(value);
		            return this;
		        }		

				
				public Party PreviousShipToCustomer {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithPreviousShipToCustomer(Party value)
		        {
		            if(this.PreviousShipToCustomer!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PreviousShipToCustomer = value;
		            return this;
		        }		

				
				public Party BillToCustomer {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithBillToCustomer(Party value)
		        {
		            if(this.BillToCustomer!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BillToCustomer = value;
		            return this;
		        }		

				
				public SalesInvoiceStatus CurrentInvoiceStatus {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithCurrentInvoiceStatus(SalesInvoiceStatus value)
		        {
		            if(this.CurrentInvoiceStatus!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentInvoiceStatus = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SalesInvoiceItem> SalesInvoiceItems {get; set;}	

				/// <exclude/>
				public SalesInvoiceBuilder WithSalesInvoiceItem(SalesInvoiceItem value)
		        {
					if(this.SalesInvoiceItems == null)
					{
						this.SalesInvoiceItems = new global::System.Collections.Generic.List<SalesInvoiceItem>(); 
					}
		            this.SalesInvoiceItems.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? TotalListPriceCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithTotalListPriceCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalListPriceCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalListPriceCustomerCurrency = value;
		            return this;
		        }	

				public Party ShipToCustomer {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithShipToCustomer(Party value)
		        {
		            if(this.ShipToCustomer!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShipToCustomer = value;
		            return this;
		        }		

				
				public ContactMechanism BilledFromContactMechanism {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithBilledFromContactMechanism(ContactMechanism value)
		        {
		            if(this.BilledFromContactMechanism!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BilledFromContactMechanism = value;
		            return this;
		        }		

				
				public global::System.Decimal? TotalPurchasePrice {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithTotalPurchasePrice(global::System.Decimal? value)
		        {
				    if(this.TotalPurchasePrice!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalPurchasePrice = value;
		            return this;
		        }	

				public SalesChannel SalesChannel {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithSalesChannel(SalesChannel value)
		        {
		            if(this.SalesChannel!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesChannel = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Party> Customers {get; set;}	

				/// <exclude/>
				public SalesInvoiceBuilder WithCustomer(Party value)
		        {
					if(this.Customers == null)
					{
						this.Customers = new global::System.Collections.Generic.List<Party>(); 
					}
		            this.Customers.Add(value);
		            return this;
		        }		

				
				public PostalAddress ShipToAddress {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithShipToAddress(PostalAddress value)
		        {
		            if(this.ShipToAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShipToAddress = value;
		            return this;
		        }		

				
				public Store Store {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithStore(Store value)
		        {
		            if(this.Store!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Store = value;
		            return this;
		        }		

				
				public global::System.Decimal? TotalShippingAndHandlingCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithTotalShippingAndHandlingCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalShippingAndHandlingCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalShippingAndHandlingCustomerCurrency = value;
		            return this;
		        }	

				public Currency CustomerCurrency {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithCustomerCurrency(Currency value)
		        {
		            if(this.CustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CustomerCurrency = value;
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public ShippingAndHandlingCharge ShippingAndHandlingCharge {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithShippingAndHandlingCharge(ShippingAndHandlingCharge value)
		        {
		            if(this.ShippingAndHandlingCharge!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShippingAndHandlingCharge = value;
		            return this;
		        }		

				
				public global::System.Decimal? TotalFeeCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithTotalFeeCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalFeeCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalFeeCustomerCurrency = value;
		            return this;
		        }	

				public Fee Fee {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithFee(Fee value)
		        {
		            if(this.Fee!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Fee = value;
		            return this;
		        }		

				
				public global::System.Decimal? TotalExVatCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithTotalExVatCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalExVatCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalExVatCustomerCurrency = value;
		            return this;
		        }	

				public global::System.String CustomerReference {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithCustomerReference(global::System.String value)
		        {
				    if(this.CustomerReference!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CustomerReference = value;
		            return this;
		        }	

				public DiscountAdjustment DiscountAdjustment {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithDiscountAdjustment(DiscountAdjustment value)
		        {
		            if(this.DiscountAdjustment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DiscountAdjustment = value;
		            return this;
		        }		

				
				public global::System.Decimal? AmountPaid {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithAmountPaid(global::System.Decimal? value)
		        {
				    if(this.AmountPaid!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AmountPaid = value;
		            return this;
		        }	

				public global::System.Decimal? TotalDiscount {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithTotalDiscount(global::System.Decimal? value)
		        {
				    if(this.TotalDiscount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalDiscount = value;
		            return this;
		        }	

				public BillingAccount BillingAccount {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithBillingAccount(BillingAccount value)
		        {
		            if(this.BillingAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BillingAccount = value;
		            return this;
		        }		

				
				public global::System.Decimal? TotalIncVat {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithTotalIncVat(global::System.Decimal? value)
		        {
				    if(this.TotalIncVat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalIncVat = value;
		            return this;
		        }	

				public global::System.Decimal? TotalSurcharge {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithTotalSurcharge(global::System.Decimal? value)
		        {
				    if(this.TotalSurcharge!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalSurcharge = value;
		            return this;
		        }	

				public global::System.Decimal? TotalBasePrice {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithTotalBasePrice(global::System.Decimal? value)
		        {
				    if(this.TotalBasePrice!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalBasePrice = value;
		            return this;
		        }	

				public global::System.Decimal? TotalVatCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithTotalVatCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalVatCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalVatCustomerCurrency = value;
		            return this;
		        }	

				public global::System.DateTime? InvoiceDate {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithInvoiceDate(global::System.DateTime? value)
		        {
				    if(this.InvoiceDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InvoiceDate = value;
		            return this;
		        }	

				public global::System.DateTime? EntryDate {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithEntryDate(global::System.DateTime? value)
		        {
				    if(this.EntryDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.EntryDate = value;
		            return this;
		        }	

				public global::System.Decimal? TotalIncVatCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithTotalIncVatCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalIncVatCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalIncVatCustomerCurrency = value;
		            return this;
		        }	

				public global::System.Decimal? TotalShippingAndHandling {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithTotalShippingAndHandling(global::System.Decimal? value)
		        {
				    if(this.TotalShippingAndHandling!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalShippingAndHandling = value;
		            return this;
		        }	

				public global::System.Decimal? TotalBasePriceCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithTotalBasePriceCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalBasePriceCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalBasePriceCustomerCurrency = value;
		            return this;
		        }	

				public SurchargeAdjustment SurchargeAdjustment {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithSurchargeAdjustment(SurchargeAdjustment value)
		        {
		            if(this.SurchargeAdjustment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SurchargeAdjustment = value;
		            return this;
		        }		

				
				public global::System.Decimal? TotalExVat {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithTotalExVat(global::System.Decimal? value)
		        {
				    if(this.TotalExVat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalExVat = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<InvoiceTerm> InvoiceTerms {get; set;}	

				/// <exclude/>
				public SalesInvoiceBuilder WithInvoiceTerm(InvoiceTerm value)
		        {
					if(this.InvoiceTerms == null)
					{
						this.InvoiceTerms = new global::System.Collections.Generic.List<InvoiceTerm>(); 
					}
		            this.InvoiceTerms.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? TotalSurchargeCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithTotalSurchargeCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalSurchargeCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalSurchargeCustomerCurrency = value;
		            return this;
		        }	

				public global::System.String InvoiceNumber {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithInvoiceNumber(global::System.String value)
		        {
				    if(this.InvoiceNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InvoiceNumber = value;
		            return this;
		        }	

				public global::System.String Message {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithMessage(global::System.String value)
		        {
				    if(this.Message!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Message = value;
		            return this;
		        }	

				public VatRegime VatRegime {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithVatRegime(VatRegime value)
		        {
		            if(this.VatRegime!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.VatRegime = value;
		            return this;
		        }		

				
				public global::System.Decimal? TotalDiscountCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithTotalDiscountCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalDiscountCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalDiscountCustomerCurrency = value;
		            return this;
		        }	

				public global::System.Decimal? TotalVat {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithTotalVat(global::System.Decimal? value)
		        {
				    if(this.TotalVat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalVat = value;
		            return this;
		        }	

				public global::System.Decimal? TotalFee {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithTotalFee(global::System.Decimal? value)
		        {
				    if(this.TotalFee!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalFee = value;
		            return this;
		        }	

				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public SalesInvoiceBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public SalesInvoiceBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public Locale Locale {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithLocale(Locale value)
		        {
		            if(this.Locale!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Locale = value;
		            return this;
		        }		

				
				public global::System.String Comment {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	

				public SearchData SearchData {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				
				public global::System.String PrintContent {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithPrintContent(global::System.String value)
		        {
				    if(this.PrintContent!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.PrintContent = value;
		            return this;
		        }	

				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public SalesInvoiceBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	


	}

	public partial class SalesInvoices : global::Allors.ObjectsBase<SalesInvoice>
	{
		public static readonly SalesInvoiceMeta Meta = SalesInvoiceMeta.Instance;

		public SalesInvoices(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}