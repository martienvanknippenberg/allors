// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class SupplierOffering
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (SupplierOfferingBuilder)objectBuilder;
			

			if(builder.StandardLeadTime.HasValue)
			{
				this.StandardLeadTime = builder.StandardLeadTime.Value;
			}			
					

			if(builder.MinimalOrderQuantity.HasValue)
			{
				this.MinimalOrderQuantity = builder.MinimalOrderQuantity.Value;
			}			
		

			this.ReferenceNumber = builder.ReferenceNumber;
		

			this.Comment = builder.Comment;
					

			if(builder.FromDate.HasValue)
			{
				this.FromDate = builder.FromDate.Value;
			}			
					

			if(builder.ThroughDate.HasValue)
			{
				this.ThroughDate = builder.ThroughDate.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
		

			this.Rating = builder.Rating;


			if(builder.ProductPurchasePrices!=null)
			{
				this.ProductPurchasePrices = builder.ProductPurchasePrices.ToArray();
			}


			this.Preference = builder.Preference;



			this.Product = builder.Product;



			this.Supplier = builder.Supplier;



			this.Part = builder.Part;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}
	}

	public partial class SupplierOfferingBuilder : Allors.ObjectBuilder<SupplierOffering> , CommentableBuilder, PeriodBuilder, UserInterfaceableBuilder, global::System.IDisposable
	{		
		public SupplierOfferingBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public RatingType Rating {get; set;}

				/// <exclude/>
				public SupplierOfferingBuilder WithRating(RatingType value)
		        {
		            if(this.Rating!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Rating = value;
		            return this;
		        }		

				
				public global::System.Int32? StandardLeadTime {get; set;}

				/// <exclude/>
				public SupplierOfferingBuilder WithStandardLeadTime(global::System.Int32? value)
		        {
				    if(this.StandardLeadTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.StandardLeadTime = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<ProductPurchasePrice> ProductPurchasePrices {get; set;}	

				/// <exclude/>
				public SupplierOfferingBuilder WithProductPurchasePrice(ProductPurchasePrice value)
		        {
					if(this.ProductPurchasePrices == null)
					{
						this.ProductPurchasePrices = new global::System.Collections.Generic.List<ProductPurchasePrice>(); 
					}
		            this.ProductPurchasePrices.Add(value);
		            return this;
		        }		

				
				public Ordinal Preference {get; set;}

				/// <exclude/>
				public SupplierOfferingBuilder WithPreference(Ordinal value)
		        {
		            if(this.Preference!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Preference = value;
		            return this;
		        }		

				
				public global::System.Decimal? MinimalOrderQuantity {get; set;}

				/// <exclude/>
				public SupplierOfferingBuilder WithMinimalOrderQuantity(global::System.Decimal? value)
		        {
				    if(this.MinimalOrderQuantity!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.MinimalOrderQuantity = value;
		            return this;
		        }	

				public Product Product {get; set;}

				/// <exclude/>
				public SupplierOfferingBuilder WithProduct(Product value)
		        {
		            if(this.Product!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Product = value;
		            return this;
		        }		

				
				public Party Supplier {get; set;}

				/// <exclude/>
				public SupplierOfferingBuilder WithSupplier(Party value)
		        {
		            if(this.Supplier!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Supplier = value;
		            return this;
		        }		

				
				public global::System.String ReferenceNumber {get; set;}

				/// <exclude/>
				public SupplierOfferingBuilder WithReferenceNumber(global::System.String value)
		        {
				    if(this.ReferenceNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ReferenceNumber = value;
		            return this;
		        }	

				public Part Part {get; set;}

				/// <exclude/>
				public SupplierOfferingBuilder WithPart(Part value)
		        {
		            if(this.Part!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Part = value;
		            return this;
		        }		

				
				public global::System.String Comment {get; set;}

				/// <exclude/>
				public SupplierOfferingBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	

				public global::System.DateTime? FromDate {get; set;}

				/// <exclude/>
				public SupplierOfferingBuilder WithFromDate(global::System.DateTime? value)
		        {
				    if(this.FromDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.FromDate = value;
		            return this;
		        }	

				public global::System.DateTime? ThroughDate {get; set;}

				/// <exclude/>
				public SupplierOfferingBuilder WithThroughDate(global::System.DateTime? value)
		        {
				    if(this.ThroughDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ThroughDate = value;
		            return this;
		        }	

				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public SupplierOfferingBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public SupplierOfferingBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public SupplierOfferingBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class SupplierOfferings : global::Allors.ObjectsBase<SupplierOffering>
	{
		public static readonly SupplierOfferingMeta Meta = SupplierOfferingMeta.Instance;

		public SupplierOfferings(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}