// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class OwnBankAccount
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (OwnBankAccountBuilder)objectBuilder;
			

			if(builder.BalanceLimit.HasValue)
			{
				this.BalanceLimit = builder.BalanceLimit.Value;
			}			
					

			if(builder.CurrentBalance.HasValue)
			{
				this.CurrentBalance = builder.CurrentBalance.Value;
			}			
		

			this.Description = builder.Description;
		

			this.Remarks = builder.Remarks;
					

			if(builder.IsActive.HasValue)
			{
				this.IsActive = builder.IsActive.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
					

			if(builder.UniqueId.HasValue)
			{
				this.UniqueId = builder.UniqueId.Value;
			}			
		

			this.BankAccount = builder.BankAccount;



			this.Journal = builder.Journal;



			this.GlPaymentInTransit = builder.GlPaymentInTransit;



			this.GeneralLedgerAccount = builder.GeneralLedgerAccount;



			this.Creditor = builder.Creditor;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.SearchData = builder.SearchData;


			if(builder.FinancialAccountTransactions!=null)
			{
				this.FinancialAccountTransactions = builder.FinancialAccountTransactions.ToArray();
			}

		}
	}

	public partial class OwnBankAccountBuilder : Allors.ObjectBuilder<OwnBankAccount> , PaymentMethodBuilder, FinancialAccountBuilder, global::System.IDisposable
	{		
		public OwnBankAccountBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public BankAccount BankAccount {get; set;}

				/// <exclude/>
				public OwnBankAccountBuilder WithBankAccount(BankAccount value)
		        {
		            if(this.BankAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BankAccount = value;
		            return this;
		        }		

				
				public global::System.Decimal? BalanceLimit {get; set;}

				/// <exclude/>
				public OwnBankAccountBuilder WithBalanceLimit(global::System.Decimal? value)
		        {
				    if(this.BalanceLimit!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.BalanceLimit = value;
		            return this;
		        }	

				public global::System.Decimal? CurrentBalance {get; set;}

				/// <exclude/>
				public OwnBankAccountBuilder WithCurrentBalance(global::System.Decimal? value)
		        {
				    if(this.CurrentBalance!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CurrentBalance = value;
		            return this;
		        }	

				public Journal Journal {get; set;}

				/// <exclude/>
				public OwnBankAccountBuilder WithJournal(Journal value)
		        {
		            if(this.Journal!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Journal = value;
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public OwnBankAccountBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public OrganisationGlAccount GlPaymentInTransit {get; set;}

				/// <exclude/>
				public OwnBankAccountBuilder WithGlPaymentInTransit(OrganisationGlAccount value)
		        {
		            if(this.GlPaymentInTransit!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.GlPaymentInTransit = value;
		            return this;
		        }		

				
				public global::System.String Remarks {get; set;}

				/// <exclude/>
				public OwnBankAccountBuilder WithRemarks(global::System.String value)
		        {
				    if(this.Remarks!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Remarks = value;
		            return this;
		        }	

				public OrganisationGlAccount GeneralLedgerAccount {get; set;}

				/// <exclude/>
				public OwnBankAccountBuilder WithGeneralLedgerAccount(OrganisationGlAccount value)
		        {
		            if(this.GeneralLedgerAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.GeneralLedgerAccount = value;
		            return this;
		        }		

				
				public SupplierRelationship Creditor {get; set;}

				/// <exclude/>
				public OwnBankAccountBuilder WithCreditor(SupplierRelationship value)
		        {
		            if(this.Creditor!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Creditor = value;
		            return this;
		        }		

				
				public global::System.Boolean? IsActive {get; set;}

				/// <exclude/>
				public OwnBankAccountBuilder WithIsActive(global::System.Boolean? value)
		        {
				    if(this.IsActive!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IsActive = value;
		            return this;
		        }	

				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public OwnBankAccountBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public OwnBankAccountBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public OwnBankAccountBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public OwnBankAccountBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public SearchData SearchData {get; set;}

				/// <exclude/>
				public OwnBankAccountBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<FinancialAccountTransaction> FinancialAccountTransactions {get; set;}	

				/// <exclude/>
				public OwnBankAccountBuilder WithFinancialAccountTransaction(FinancialAccountTransaction value)
		        {
					if(this.FinancialAccountTransactions == null)
					{
						this.FinancialAccountTransactions = new global::System.Collections.Generic.List<FinancialAccountTransaction>(); 
					}
		            this.FinancialAccountTransactions.Add(value);
		            return this;
		        }		

				

	}

	public partial class OwnBankAccounts : global::Allors.ObjectsBase<OwnBankAccount>
	{
		public static readonly OwnBankAccountMeta Meta = OwnBankAccountMeta.Instance;

		public OwnBankAccounts(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}