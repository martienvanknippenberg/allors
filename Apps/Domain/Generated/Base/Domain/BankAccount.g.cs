// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class BankAccount
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (BankAccountBuilder)objectBuilder;

			this.NameOnAccount = builder.NameOnAccount;
		

			this.Iban = builder.Iban;
		

			this.Branch = builder.Branch;
		

			this.DisplayName = builder.DisplayName;
		

			this.Bank = builder.Bank;


			if(builder.ContactMechanisms!=null)
			{
				this.ContactMechanisms = builder.ContactMechanisms.ToArray();
			}


			this.Currency = builder.Currency;


			if(builder.ContactPersons!=null)
			{
				this.ContactPersons = builder.ContactPersons.ToArray();
			}

			if(builder.FinancialAccountTransactions!=null)
			{
				this.FinancialAccountTransactions = builder.FinancialAccountTransactions.ToArray();
			}

			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.SearchData = builder.SearchData;


		}
	}

	public partial class BankAccountBuilder : Allors.ObjectBuilder<BankAccount> , FinancialAccountBuilder, global::System.IDisposable
	{		
		public BankAccountBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public Bank Bank {get; set;}

				/// <exclude/>
				public BankAccountBuilder WithBank(Bank value)
		        {
		            if(this.Bank!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Bank = value;
		            return this;
		        }		

				
				public global::System.String NameOnAccount {get; set;}

				/// <exclude/>
				public BankAccountBuilder WithNameOnAccount(global::System.String value)
		        {
				    if(this.NameOnAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.NameOnAccount = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<ContactMechanism> ContactMechanisms {get; set;}	

				/// <exclude/>
				public BankAccountBuilder WithContactMechanism(ContactMechanism value)
		        {
					if(this.ContactMechanisms == null)
					{
						this.ContactMechanisms = new global::System.Collections.Generic.List<ContactMechanism>(); 
					}
		            this.ContactMechanisms.Add(value);
		            return this;
		        }		

				
				public Currency Currency {get; set;}

				/// <exclude/>
				public BankAccountBuilder WithCurrency(Currency value)
		        {
		            if(this.Currency!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Currency = value;
		            return this;
		        }		

				
				public global::System.String Iban {get; set;}

				/// <exclude/>
				public BankAccountBuilder WithIban(global::System.String value)
		        {
				    if(this.Iban!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Iban = value;
		            return this;
		        }	

				public global::System.String Branch {get; set;}

				/// <exclude/>
				public BankAccountBuilder WithBranch(global::System.String value)
		        {
				    if(this.Branch!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Branch = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Person> ContactPersons {get; set;}	

				/// <exclude/>
				public BankAccountBuilder WithContactPerson(Person value)
		        {
					if(this.ContactPersons == null)
					{
						this.ContactPersons = new global::System.Collections.Generic.List<Person>(); 
					}
		            this.ContactPersons.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<FinancialAccountTransaction> FinancialAccountTransactions {get; set;}	

				/// <exclude/>
				public BankAccountBuilder WithFinancialAccountTransaction(FinancialAccountTransaction value)
		        {
					if(this.FinancialAccountTransactions == null)
					{
						this.FinancialAccountTransactions = new global::System.Collections.Generic.List<FinancialAccountTransaction>(); 
					}
		            this.FinancialAccountTransactions.Add(value);
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public BankAccountBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public BankAccountBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public BankAccountBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public SearchData SearchData {get; set;}

				/// <exclude/>
				public BankAccountBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				

	}

	public partial class BankAccounts : global::Allors.ObjectsBase<BankAccount>
	{
		public static readonly BankAccountMeta Meta = BankAccountMeta.Instance;

		public BankAccounts(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}