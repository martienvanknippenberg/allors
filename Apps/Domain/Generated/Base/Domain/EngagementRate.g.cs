// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class EngagementRate
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (EngagementRateBuilder)objectBuilder;
			

			if(builder.BillingRate.HasValue)
			{
				this.BillingRate = builder.BillingRate.Value;
			}			
					

			if(builder.Cost.HasValue)
			{
				this.Cost = builder.Cost.Value;
			}			
		

			this.ChangeReason = builder.ChangeReason;
					

			if(builder.FromDate.HasValue)
			{
				this.FromDate = builder.FromDate.Value;
			}			
					

			if(builder.ThroughDate.HasValue)
			{
				this.ThroughDate = builder.ThroughDate.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
		

			this.RatingType = builder.RatingType;


			if(builder.GoverningPriceComponents!=null)
			{
				this.GoverningPriceComponents = builder.GoverningPriceComponents.ToArray();
			}


			this.UnitOfMeasure = builder.UnitOfMeasure;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}
	}

	public partial class EngagementRateBuilder : Allors.ObjectBuilder<EngagementRate> , PeriodBuilder, UserInterfaceableBuilder, global::System.IDisposable
	{		
		public EngagementRateBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.Decimal? BillingRate {get; set;}

				/// <exclude/>
				public EngagementRateBuilder WithBillingRate(global::System.Decimal? value)
		        {
				    if(this.BillingRate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.BillingRate = value;
		            return this;
		        }	

				public RatingType RatingType {get; set;}

				/// <exclude/>
				public EngagementRateBuilder WithRatingType(RatingType value)
		        {
		            if(this.RatingType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.RatingType = value;
		            return this;
		        }		

				
				public global::System.Decimal? Cost {get; set;}

				/// <exclude/>
				public EngagementRateBuilder WithCost(global::System.Decimal? value)
		        {
				    if(this.Cost!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Cost = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<PriceComponent> GoverningPriceComponents {get; set;}	

				/// <exclude/>
				public EngagementRateBuilder WithGoverningPriceComponent(PriceComponent value)
		        {
					if(this.GoverningPriceComponents == null)
					{
						this.GoverningPriceComponents = new global::System.Collections.Generic.List<PriceComponent>(); 
					}
		            this.GoverningPriceComponents.Add(value);
		            return this;
		        }		

				
				public global::System.String ChangeReason {get; set;}

				/// <exclude/>
				public EngagementRateBuilder WithChangeReason(global::System.String value)
		        {
				    if(this.ChangeReason!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ChangeReason = value;
		            return this;
		        }	

				public UnitOfMeasure UnitOfMeasure {get; set;}

				/// <exclude/>
				public EngagementRateBuilder WithUnitOfMeasure(UnitOfMeasure value)
		        {
		            if(this.UnitOfMeasure!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.UnitOfMeasure = value;
		            return this;
		        }		

				
				public global::System.DateTime? FromDate {get; set;}

				/// <exclude/>
				public EngagementRateBuilder WithFromDate(global::System.DateTime? value)
		        {
				    if(this.FromDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.FromDate = value;
		            return this;
		        }	

				public global::System.DateTime? ThroughDate {get; set;}

				/// <exclude/>
				public EngagementRateBuilder WithThroughDate(global::System.DateTime? value)
		        {
				    if(this.ThroughDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ThroughDate = value;
		            return this;
		        }	

				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public EngagementRateBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public EngagementRateBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public EngagementRateBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class EngagementRates : global::Allors.ObjectsBase<EngagementRate>
	{
		public static readonly EngagementRateMeta Meta = EngagementRateMeta.Instance;

		public EngagementRates(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}