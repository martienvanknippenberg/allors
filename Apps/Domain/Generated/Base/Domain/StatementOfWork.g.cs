// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class StatementOfWork
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (StatementOfWorkBuilder)objectBuilder;
			

			if(builder.ValidFromDate.HasValue)
			{
				this.ValidFromDate = builder.ValidFromDate.Value;
			}			
					

			if(builder.ValidThroughDate.HasValue)
			{
				this.ValidThroughDate = builder.ValidThroughDate.Value;
			}			
		

			this.Description = builder.Description;
					

			if(builder.Amount.HasValue)
			{
				this.Amount = builder.Amount.Value;
			}			
					

			if(builder.IssueDate.HasValue)
			{
				this.IssueDate = builder.IssueDate.Value;
			}			
		

			this.QuoteNumber = builder.QuoteNumber;
		

			this.DisplayName = builder.DisplayName;
		
			if(builder.QuoteTerms!=null)
			{
				this.QuoteTerms = builder.QuoteTerms.ToArray();
			}


			this.Issuer = builder.Issuer;



			this.Receiver = builder.Receiver;


			if(builder.QuoteItems!=null)
			{
				this.QuoteItems = builder.QuoteItems.ToArray();
			}

			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.SearchData = builder.SearchData;


		}
	}

	public partial class StatementOfWorkBuilder : Allors.ObjectBuilder<StatementOfWork> , QuoteBuilder, global::System.IDisposable
	{		
		public StatementOfWorkBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.DateTime? ValidFromDate {get; set;}

				/// <exclude/>
				public StatementOfWorkBuilder WithValidFromDate(global::System.DateTime? value)
		        {
				    if(this.ValidFromDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ValidFromDate = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<QuoteTerm> QuoteTerms {get; set;}	

				/// <exclude/>
				public StatementOfWorkBuilder WithQuoteTerm(QuoteTerm value)
		        {
					if(this.QuoteTerms == null)
					{
						this.QuoteTerms = new global::System.Collections.Generic.List<QuoteTerm>(); 
					}
		            this.QuoteTerms.Add(value);
		            return this;
		        }		

				
				public Party Issuer {get; set;}

				/// <exclude/>
				public StatementOfWorkBuilder WithIssuer(Party value)
		        {
		            if(this.Issuer!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Issuer = value;
		            return this;
		        }		

				
				public global::System.DateTime? ValidThroughDate {get; set;}

				/// <exclude/>
				public StatementOfWorkBuilder WithValidThroughDate(global::System.DateTime? value)
		        {
				    if(this.ValidThroughDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ValidThroughDate = value;
		            return this;
		        }	

				public global::System.String Description {get; set;}

				/// <exclude/>
				public StatementOfWorkBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public Party Receiver {get; set;}

				/// <exclude/>
				public StatementOfWorkBuilder WithReceiver(Party value)
		        {
		            if(this.Receiver!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Receiver = value;
		            return this;
		        }		

				
				public global::System.Decimal? Amount {get; set;}

				/// <exclude/>
				public StatementOfWorkBuilder WithAmount(global::System.Decimal? value)
		        {
				    if(this.Amount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Amount = value;
		            return this;
		        }	

				public global::System.DateTime? IssueDate {get; set;}

				/// <exclude/>
				public StatementOfWorkBuilder WithIssueDate(global::System.DateTime? value)
		        {
				    if(this.IssueDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.IssueDate = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<QuoteItem> QuoteItems {get; set;}	

				/// <exclude/>
				public StatementOfWorkBuilder WithQuoteItem(QuoteItem value)
		        {
					if(this.QuoteItems == null)
					{
						this.QuoteItems = new global::System.Collections.Generic.List<QuoteItem>(); 
					}
		            this.QuoteItems.Add(value);
		            return this;
		        }		

				
				public global::System.String QuoteNumber {get; set;}

				/// <exclude/>
				public StatementOfWorkBuilder WithQuoteNumber(global::System.String value)
		        {
				    if(this.QuoteNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.QuoteNumber = value;
		            return this;
		        }	

				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public StatementOfWorkBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public StatementOfWorkBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public StatementOfWorkBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public SearchData SearchData {get; set;}

				/// <exclude/>
				public StatementOfWorkBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				

	}

	public partial class StatementsOfWork : global::Allors.ObjectsBase<StatementOfWork>
	{
		public static readonly StatementOfWorkMeta Meta = StatementOfWorkMeta.Instance;

		public StatementsOfWork(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}