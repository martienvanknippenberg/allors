// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class EventRegistration
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (EventRegistrationBuilder)objectBuilder;
			

			if(builder.AllorsDateTime.HasValue)
			{
				this.AllorsDateTime = builder.AllorsDateTime.Value;
			}			
		

			this.Person = builder.Person;



			this.Event = builder.Event;


		}
	}

	public partial class EventRegistrationBuilder : Allors.ObjectBuilder<EventRegistration> , global::System.IDisposable
	{		
		public EventRegistrationBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public Person Person {get; set;}

				/// <exclude/>
				public EventRegistrationBuilder WithPerson(Person value)
		        {
		            if(this.Person!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Person = value;
		            return this;
		        }		

				
				public Event Event {get; set;}

				/// <exclude/>
				public EventRegistrationBuilder WithEvent(Event value)
		        {
		            if(this.Event!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Event = value;
		            return this;
		        }		

				
				public global::System.DateTime? AllorsDateTime {get; set;}

				/// <exclude/>
				public EventRegistrationBuilder WithAllorsDateTime(global::System.DateTime? value)
		        {
				    if(this.AllorsDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsDateTime = value;
		            return this;
		        }	


	}

	public partial class EventRegistrations : global::Allors.ObjectsBase<EventRegistration>
	{
		public static readonly EventRegistrationMeta Meta = EventRegistrationMeta.Instance;

		public EventRegistrations(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}