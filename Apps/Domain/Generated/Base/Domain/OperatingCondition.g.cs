// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class OperatingCondition
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (OperatingConditionBuilder)objectBuilder;
			

			if(builder.DocumentationDate.HasValue)
			{
				this.DocumentationDate = builder.DocumentationDate.Value;
			}			
		

			this.Description = builder.Description;
					

			if(builder.UniqueId.HasValue)
			{
				this.UniqueId = builder.UniqueId.Value;
			}			
		

			this.Comment = builder.Comment;
		

			this.DisplayName = builder.DisplayName;
		
			if(builder.PartSpecificationStatuses!=null)
			{
				this.PartSpecificationStatuses = builder.PartSpecificationStatuses.ToArray();
			}


			this.CurrentObjectState = builder.CurrentObjectState;



			this.CurrentPartSpecificationStatus = builder.CurrentPartSpecificationStatus;



			this.PreviousObjectState = builder.PreviousObjectState;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}
	}

	public partial class OperatingConditionBuilder : Allors.ObjectBuilder<OperatingCondition> , PartSpecificationBuilder, global::System.IDisposable
	{		
		public OperatingConditionBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.Collections.Generic.List<PartSpecificationStatus> PartSpecificationStatuses {get; set;}	

				/// <exclude/>
				public OperatingConditionBuilder WithPartSpecificationStatus(PartSpecificationStatus value)
		        {
					if(this.PartSpecificationStatuses == null)
					{
						this.PartSpecificationStatuses = new global::System.Collections.Generic.List<PartSpecificationStatus>(); 
					}
		            this.PartSpecificationStatuses.Add(value);
		            return this;
		        }		

				
				public PartSpecificationObjectState CurrentObjectState {get; set;}

				/// <exclude/>
				public OperatingConditionBuilder WithCurrentObjectState(PartSpecificationObjectState value)
		        {
		            if(this.CurrentObjectState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentObjectState = value;
		            return this;
		        }		

				
				public global::System.DateTime? DocumentationDate {get; set;}

				/// <exclude/>
				public OperatingConditionBuilder WithDocumentationDate(global::System.DateTime? value)
		        {
				    if(this.DocumentationDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DocumentationDate = value;
		            return this;
		        }	

				public PartSpecificationStatus CurrentPartSpecificationStatus {get; set;}

				/// <exclude/>
				public OperatingConditionBuilder WithCurrentPartSpecificationStatus(PartSpecificationStatus value)
		        {
		            if(this.CurrentPartSpecificationStatus!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentPartSpecificationStatus = value;
		            return this;
		        }		

				
				public PartSpecificationObjectState PreviousObjectState {get; set;}

				/// <exclude/>
				public OperatingConditionBuilder WithPreviousObjectState(PartSpecificationObjectState value)
		        {
		            if(this.PreviousObjectState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PreviousObjectState = value;
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public OperatingConditionBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public OperatingConditionBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public global::System.String Comment {get; set;}

				/// <exclude/>
				public OperatingConditionBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public OperatingConditionBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public OperatingConditionBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public OperatingConditionBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	


	}

	public partial class OperatingConditions : global::Allors.ObjectsBase<OperatingCondition>
	{
		public static readonly OperatingConditionMeta Meta = OperatingConditionMeta.Instance;

		public OperatingConditions(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}