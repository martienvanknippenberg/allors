// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class AmountDue
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (AmountDueBuilder)objectBuilder;
			

			if(builder.Amount.HasValue)
			{
				this.Amount = builder.Amount.Value;
			}			
					

			if(builder.TransactionDate.HasValue)
			{
				this.TransactionDate = builder.TransactionDate.Value;
			}			
					

			if(builder.BlockedForDunning.HasValue)
			{
				this.BlockedForDunning = builder.BlockedForDunning.Value;
			}			
					

			if(builder.AmountVat.HasValue)
			{
				this.AmountVat = builder.AmountVat.Value;
			}			
					

			if(builder.ReconciliationDate.HasValue)
			{
				this.ReconciliationDate = builder.ReconciliationDate.Value;
			}			
		

			this.InvoiceNumber = builder.InvoiceNumber;
					

			if(builder.DunningStep.HasValue)
			{
				this.DunningStep = builder.DunningStep.Value;
			}			
					

			if(builder.SubAccountNumber.HasValue)
			{
				this.SubAccountNumber = builder.SubAccountNumber.Value;
			}			
		

			this.TransactionNumber = builder.TransactionNumber;
					

			if(builder.BlockedForPayment.HasValue)
			{
				this.BlockedForPayment = builder.BlockedForPayment.Value;
			}			
					

			if(builder.DateLastReminder.HasValue)
			{
				this.DateLastReminder = builder.DateLastReminder.Value;
			}			
		

			this.YourReference = builder.YourReference;
		

			this.OurReference = builder.OurReference;
		

			this.ReconciliationNumber = builder.ReconciliationNumber;
					

			if(builder.DueDate.HasValue)
			{
				this.DueDate = builder.DueDate.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
		

			this.PaymentMethod = builder.PaymentMethod;



			this.BankAccount = builder.BankAccount;



			this.Side = builder.Side;



			this.Currency = builder.Currency;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.SearchData = builder.SearchData;


		}
	}

	public partial class AmountDueBuilder : Allors.ObjectBuilder<AmountDue> , AccessControlledObjectBuilder, SearchableBuilder, UserInterfaceableBuilder, global::System.IDisposable
	{		
		public AmountDueBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.Decimal? Amount {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithAmount(global::System.Decimal? value)
		        {
				    if(this.Amount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Amount = value;
		            return this;
		        }	

				public PaymentMethod PaymentMethod {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithPaymentMethod(PaymentMethod value)
		        {
		            if(this.PaymentMethod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PaymentMethod = value;
		            return this;
		        }		

				
				public global::System.DateTime? TransactionDate {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithTransactionDate(global::System.DateTime? value)
		        {
				    if(this.TransactionDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TransactionDate = value;
		            return this;
		        }	

				public global::System.DateTime? BlockedForDunning {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithBlockedForDunning(global::System.DateTime? value)
		        {
				    if(this.BlockedForDunning!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.BlockedForDunning = value;
		            return this;
		        }	

				public global::System.Decimal? AmountVat {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithAmountVat(global::System.Decimal? value)
		        {
				    if(this.AmountVat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AmountVat = value;
		            return this;
		        }	

				public BankAccount BankAccount {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithBankAccount(BankAccount value)
		        {
		            if(this.BankAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BankAccount = value;
		            return this;
		        }		

				
				public global::System.DateTime? ReconciliationDate {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithReconciliationDate(global::System.DateTime? value)
		        {
				    if(this.ReconciliationDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ReconciliationDate = value;
		            return this;
		        }	

				public global::System.String InvoiceNumber {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithInvoiceNumber(global::System.String value)
		        {
				    if(this.InvoiceNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InvoiceNumber = value;
		            return this;
		        }	

				public global::System.Int32? DunningStep {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithDunningStep(global::System.Int32? value)
		        {
				    if(this.DunningStep!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DunningStep = value;
		            return this;
		        }	

				public global::System.Int32? SubAccountNumber {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithSubAccountNumber(global::System.Int32? value)
		        {
				    if(this.SubAccountNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SubAccountNumber = value;
		            return this;
		        }	

				public global::System.String TransactionNumber {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithTransactionNumber(global::System.String value)
		        {
				    if(this.TransactionNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TransactionNumber = value;
		            return this;
		        }	

				public DebitCreditConstant Side {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithSide(DebitCreditConstant value)
		        {
		            if(this.Side!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Side = value;
		            return this;
		        }		

				
				public Currency Currency {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithCurrency(Currency value)
		        {
		            if(this.Currency!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Currency = value;
		            return this;
		        }		

				
				public global::System.Boolean? BlockedForPayment {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithBlockedForPayment(global::System.Boolean? value)
		        {
				    if(this.BlockedForPayment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.BlockedForPayment = value;
		            return this;
		        }	

				public global::System.DateTime? DateLastReminder {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithDateLastReminder(global::System.DateTime? value)
		        {
				    if(this.DateLastReminder!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DateLastReminder = value;
		            return this;
		        }	

				public global::System.String YourReference {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithYourReference(global::System.String value)
		        {
				    if(this.YourReference!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.YourReference = value;
		            return this;
		        }	

				public global::System.String OurReference {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithOurReference(global::System.String value)
		        {
				    if(this.OurReference!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.OurReference = value;
		            return this;
		        }	

				public global::System.String ReconciliationNumber {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithReconciliationNumber(global::System.String value)
		        {
				    if(this.ReconciliationNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ReconciliationNumber = value;
		            return this;
		        }	

				public global::System.DateTime? DueDate {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithDueDate(global::System.DateTime? value)
		        {
				    if(this.DueDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DueDate = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public AmountDueBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public AmountDueBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public SearchData SearchData {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public AmountDueBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	


	}

	public partial class AmountsDue : global::Allors.ObjectsBase<AmountDue>
	{
		public static readonly AmountDueMeta Meta = AmountDueMeta.Instance;

		public AmountsDue(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}