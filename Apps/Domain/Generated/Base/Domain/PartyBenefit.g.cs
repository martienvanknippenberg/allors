// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class PartyBenefit
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (PartyBenefitBuilder)objectBuilder;
			

			if(builder.Cost.HasValue)
			{
				this.Cost = builder.Cost.Value;
			}			
					

			if(builder.ActualEmployerPaidPercentage.HasValue)
			{
				this.ActualEmployerPaidPercentage = builder.ActualEmployerPaidPercentage.Value;
			}			
					

			if(builder.ActualAvailableTime.HasValue)
			{
				this.ActualAvailableTime = builder.ActualAvailableTime.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
		

			this.TimeFrequency = builder.TimeFrequency;



			this.Benefit = builder.Benefit;



			this.Employment = builder.Employment;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}
	}

	public partial class PartyBenefitBuilder : Allors.ObjectBuilder<PartyBenefit> , UserInterfaceableBuilder, global::System.IDisposable
	{		
		public PartyBenefitBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public TimeFrequency TimeFrequency {get; set;}

				/// <exclude/>
				public PartyBenefitBuilder WithTimeFrequency(TimeFrequency value)
		        {
		            if(this.TimeFrequency!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.TimeFrequency = value;
		            return this;
		        }		

				
				public global::System.Decimal? Cost {get; set;}

				/// <exclude/>
				public PartyBenefitBuilder WithCost(global::System.Decimal? value)
		        {
				    if(this.Cost!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Cost = value;
		            return this;
		        }	

				public global::System.Decimal? ActualEmployerPaidPercentage {get; set;}

				/// <exclude/>
				public PartyBenefitBuilder WithActualEmployerPaidPercentage(global::System.Decimal? value)
		        {
				    if(this.ActualEmployerPaidPercentage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ActualEmployerPaidPercentage = value;
		            return this;
		        }	

				public Benefit Benefit {get; set;}

				/// <exclude/>
				public PartyBenefitBuilder WithBenefit(Benefit value)
		        {
		            if(this.Benefit!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Benefit = value;
		            return this;
		        }		

				
				public global::System.Decimal? ActualAvailableTime {get; set;}

				/// <exclude/>
				public PartyBenefitBuilder WithActualAvailableTime(global::System.Decimal? value)
		        {
				    if(this.ActualAvailableTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ActualAvailableTime = value;
		            return this;
		        }	

				public Employment Employment {get; set;}

				/// <exclude/>
				public PartyBenefitBuilder WithEmployment(Employment value)
		        {
		            if(this.Employment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Employment = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public PartyBenefitBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public PartyBenefitBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public PartyBenefitBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class PartyBenefits : global::Allors.ObjectsBase<PartyBenefit>
	{
		public static readonly PartyBenefitMeta Meta = PartyBenefitMeta.Instance;

		public PartyBenefits(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}