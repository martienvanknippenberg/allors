// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class SalesOrder
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (SalesOrderBuilder)objectBuilder;
			

			if(builder.TotalPurchasePrice.HasValue)
			{
				this.TotalPurchasePrice = builder.TotalPurchasePrice.Value;
			}			
					

			if(builder.TotalListPriceCustomerCurrency.HasValue)
			{
				this.TotalListPriceCustomerCurrency = builder.TotalListPriceCustomerCurrency.Value;
			}			
					

			if(builder.MaintainedProfitMargin.HasValue)
			{
				this.MaintainedProfitMargin = builder.MaintainedProfitMargin.Value;
			}			
					

			if(builder.InitialProfitMargin.HasValue)
			{
				this.InitialProfitMargin = builder.InitialProfitMargin.Value;
			}			
					

			if(builder.TotalListPrice.HasValue)
			{
				this.TotalListPrice = builder.TotalListPrice.Value;
			}			
					

			if(builder.PartiallyShip.HasValue)
			{
				this.PartiallyShip = builder.PartiallyShip.Value;
			}			
					

			if(builder.MaintainedMarkupPercentage.HasValue)
			{
				this.MaintainedMarkupPercentage = builder.MaintainedMarkupPercentage.Value;
			}			
					

			if(builder.InitialMarkupPercentage.HasValue)
			{
				this.InitialMarkupPercentage = builder.InitialMarkupPercentage.Value;
			}			
					

			if(builder.TotalBasePriceCustomerCurrency.HasValue)
			{
				this.TotalBasePriceCustomerCurrency = builder.TotalBasePriceCustomerCurrency.Value;
			}			
					

			if(builder.TotalIncVatCustomerCurrency.HasValue)
			{
				this.TotalIncVatCustomerCurrency = builder.TotalIncVatCustomerCurrency.Value;
			}			
					

			if(builder.TotalDiscountCustomerCurrency.HasValue)
			{
				this.TotalDiscountCustomerCurrency = builder.TotalDiscountCustomerCurrency.Value;
			}			
		

			this.CustomerReference = builder.CustomerReference;
					

			if(builder.TotalExVat.HasValue)
			{
				this.TotalExVat = builder.TotalExVat.Value;
			}			
					

			if(builder.TotalVat.HasValue)
			{
				this.TotalVat = builder.TotalVat.Value;
			}			
					

			if(builder.TotalSurcharge.HasValue)
			{
				this.TotalSurcharge = builder.TotalSurcharge.Value;
			}			
		

			this.OrderNumber = builder.OrderNumber;
					

			if(builder.TotalVatCustomerCurrency.HasValue)
			{
				this.TotalVatCustomerCurrency = builder.TotalVatCustomerCurrency.Value;
			}			
					

			if(builder.TotalDiscount.HasValue)
			{
				this.TotalDiscount = builder.TotalDiscount.Value;
			}			
		

			this.Message = builder.Message;
					

			if(builder.TotalShippingAndHandlingCustomerCurrency.HasValue)
			{
				this.TotalShippingAndHandlingCustomerCurrency = builder.TotalShippingAndHandlingCustomerCurrency.Value;
			}			
					

			if(builder.EntryDate.HasValue)
			{
				this.EntryDate = builder.EntryDate.Value;
			}			
					

			if(builder.TotalIncVat.HasValue)
			{
				this.TotalIncVat = builder.TotalIncVat.Value;
			}			
					

			if(builder.TotalSurchargeCustomerCurrency.HasValue)
			{
				this.TotalSurchargeCustomerCurrency = builder.TotalSurchargeCustomerCurrency.Value;
			}			
					

			if(builder.TotalFeeCustomerCurrency.HasValue)
			{
				this.TotalFeeCustomerCurrency = builder.TotalFeeCustomerCurrency.Value;
			}			
					

			if(builder.TotalShippingAndHandling.HasValue)
			{
				this.TotalShippingAndHandling = builder.TotalShippingAndHandling.Value;
			}			
					

			if(builder.OrderDate.HasValue)
			{
				this.OrderDate = builder.OrderDate.Value;
			}			
					

			if(builder.TotalExVatCustomerCurrency.HasValue)
			{
				this.TotalExVatCustomerCurrency = builder.TotalExVatCustomerCurrency.Value;
			}			
					

			if(builder.DeliveryDate.HasValue)
			{
				this.DeliveryDate = builder.DeliveryDate.Value;
			}			
					

			if(builder.TotalBasePrice.HasValue)
			{
				this.TotalBasePrice = builder.TotalBasePrice.Value;
			}			
					

			if(builder.TotalFee.HasValue)
			{
				this.TotalFee = builder.TotalFee.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
		

			this.PrintContent = builder.PrintContent;
					

			if(builder.UniqueId.HasValue)
			{
				this.UniqueId = builder.UniqueId.Value;
			}			
		

			this.Comment = builder.Comment;
		

			this.TakenByContactMechanism = builder.TakenByContactMechanism;


			if(builder.ShipmentStatuses!=null)
			{
				this.ShipmentStatuses = builder.ShipmentStatuses.ToArray();
			}


			this.CurrentShipmentStatus = builder.CurrentShipmentStatus;



			this.CurrentPaymentStatus = builder.CurrentPaymentStatus;



			this.ShipToCustomer = builder.ShipToCustomer;



			this.BillToCustomer = builder.BillToCustomer;



			this.ShipmentMethod = builder.ShipmentMethod;



			this.ShipToAddress = builder.ShipToAddress;



			this.PreviousShipToCustomer = builder.PreviousShipToCustomer;



			this.BillToContactMechanism = builder.BillToContactMechanism;


			if(builder.SalesReps!=null)
			{
				this.SalesReps = builder.SalesReps.ToArray();
			}


			this.PreviousObjectState = builder.PreviousObjectState;


			if(builder.PaymentStatuses!=null)
			{
				this.PaymentStatuses = builder.PaymentStatuses.ToArray();
			}

			if(builder.Customers!=null)
			{
				this.Customers = builder.Customers.ToArray();
			}


			this.Store = builder.Store;



			this.BillFromContactMechanism = builder.BillFromContactMechanism;



			this.PaymentMethod = builder.PaymentMethod;



			this.PlacingContactMechanism = builder.PlacingContactMechanism;



			this.CurrentOrderStatus = builder.CurrentOrderStatus;



			this.PreviousBillToCustomer = builder.PreviousBillToCustomer;



			this.SalesChannel = builder.SalesChannel;



			this.PlacingCustomer = builder.PlacingCustomer;


			if(builder.OrderStatuses!=null)
			{
				this.OrderStatuses = builder.OrderStatuses.ToArray();
			}


			this.ProformaInvoice = builder.ProformaInvoice;


			if(builder.SalesOrderItems!=null)
			{
				this.SalesOrderItems = builder.SalesOrderItems.ToArray();
			}


			this.CurrentObjectState = builder.CurrentObjectState;



			this.TakenByInternalOrganisation = builder.TakenByInternalOrganisation;



			this.CustomerCurrency = builder.CustomerCurrency;



			this.Fee = builder.Fee;


			if(builder.OrderTerms!=null)
			{
				this.OrderTerms = builder.OrderTerms.ToArray();
			}

			if(builder.ValidOrderItems!=null)
			{
				this.ValidOrderItems = builder.ValidOrderItems.ToArray();
			}


			this.DiscountAdjustment = builder.DiscountAdjustment;



			this.OrderKind = builder.OrderKind;



			this.VatRegime = builder.VatRegime;



			this.ShippingAndHandlingCharge = builder.ShippingAndHandlingCharge;



			this.SurchargeAdjustment = builder.SurchargeAdjustment;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.SearchData = builder.SearchData;



			this.Locale = builder.Locale;


		}
	}

	public partial class SalesOrderBuilder : Allors.ObjectBuilder<SalesOrder> , OrderBuilder, global::System.IDisposable
	{		
		public SalesOrderBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public ContactMechanism TakenByContactMechanism {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithTakenByContactMechanism(ContactMechanism value)
		        {
		            if(this.TakenByContactMechanism!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.TakenByContactMechanism = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SalesOrderStatus> ShipmentStatuses {get; set;}	

				/// <exclude/>
				public SalesOrderBuilder WithShipmentStatus(SalesOrderStatus value)
		        {
					if(this.ShipmentStatuses == null)
					{
						this.ShipmentStatuses = new global::System.Collections.Generic.List<SalesOrderStatus>(); 
					}
		            this.ShipmentStatuses.Add(value);
		            return this;
		        }		

				
				public SalesOrderStatus CurrentShipmentStatus {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithCurrentShipmentStatus(SalesOrderStatus value)
		        {
		            if(this.CurrentShipmentStatus!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentShipmentStatus = value;
		            return this;
		        }		

				
				public SalesOrderStatus CurrentPaymentStatus {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithCurrentPaymentStatus(SalesOrderStatus value)
		        {
		            if(this.CurrentPaymentStatus!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentPaymentStatus = value;
		            return this;
		        }		

				
				public Party ShipToCustomer {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithShipToCustomer(Party value)
		        {
		            if(this.ShipToCustomer!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShipToCustomer = value;
		            return this;
		        }		

				
				public Party BillToCustomer {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithBillToCustomer(Party value)
		        {
		            if(this.BillToCustomer!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BillToCustomer = value;
		            return this;
		        }		

				
				public global::System.Decimal? TotalPurchasePrice {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithTotalPurchasePrice(global::System.Decimal? value)
		        {
				    if(this.TotalPurchasePrice!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalPurchasePrice = value;
		            return this;
		        }	

				public ShipmentMethod ShipmentMethod {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithShipmentMethod(ShipmentMethod value)
		        {
		            if(this.ShipmentMethod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShipmentMethod = value;
		            return this;
		        }		

				
				public global::System.Decimal? TotalListPriceCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithTotalListPriceCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalListPriceCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalListPriceCustomerCurrency = value;
		            return this;
		        }	

				public global::System.Decimal? MaintainedProfitMargin {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithMaintainedProfitMargin(global::System.Decimal? value)
		        {
				    if(this.MaintainedProfitMargin!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.MaintainedProfitMargin = value;
		            return this;
		        }	

				public PostalAddress ShipToAddress {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithShipToAddress(PostalAddress value)
		        {
		            if(this.ShipToAddress!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShipToAddress = value;
		            return this;
		        }		

				
				public Party PreviousShipToCustomer {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithPreviousShipToCustomer(Party value)
		        {
		            if(this.PreviousShipToCustomer!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PreviousShipToCustomer = value;
		            return this;
		        }		

				
				public ContactMechanism BillToContactMechanism {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithBillToContactMechanism(ContactMechanism value)
		        {
		            if(this.BillToContactMechanism!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BillToContactMechanism = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Person> SalesReps {get; set;}	

				/// <exclude/>
				public SalesOrderBuilder WithSalesRep(Person value)
		        {
					if(this.SalesReps == null)
					{
						this.SalesReps = new global::System.Collections.Generic.List<Person>(); 
					}
		            this.SalesReps.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? InitialProfitMargin {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithInitialProfitMargin(global::System.Decimal? value)
		        {
				    if(this.InitialProfitMargin!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InitialProfitMargin = value;
		            return this;
		        }	

				public SalesOrderObjectState PreviousObjectState {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithPreviousObjectState(SalesOrderObjectState value)
		        {
		            if(this.PreviousObjectState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PreviousObjectState = value;
		            return this;
		        }		

				
				public global::System.Decimal? TotalListPrice {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithTotalListPrice(global::System.Decimal? value)
		        {
				    if(this.TotalListPrice!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalListPrice = value;
		            return this;
		        }	

				public global::System.Boolean? PartiallyShip {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithPartiallyShip(global::System.Boolean? value)
		        {
				    if(this.PartiallyShip!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.PartiallyShip = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<SalesOrderStatus> PaymentStatuses {get; set;}	

				/// <exclude/>
				public SalesOrderBuilder WithPaymentStatus(SalesOrderStatus value)
		        {
					if(this.PaymentStatuses == null)
					{
						this.PaymentStatuses = new global::System.Collections.Generic.List<SalesOrderStatus>(); 
					}
		            this.PaymentStatuses.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Party> Customers {get; set;}	

				/// <exclude/>
				public SalesOrderBuilder WithCustomer(Party value)
		        {
					if(this.Customers == null)
					{
						this.Customers = new global::System.Collections.Generic.List<Party>(); 
					}
		            this.Customers.Add(value);
		            return this;
		        }		

				
				public Store Store {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithStore(Store value)
		        {
		            if(this.Store!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Store = value;
		            return this;
		        }		

				
				public global::System.Decimal? MaintainedMarkupPercentage {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithMaintainedMarkupPercentage(global::System.Decimal? value)
		        {
				    if(this.MaintainedMarkupPercentage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.MaintainedMarkupPercentage = value;
		            return this;
		        }	

				public ContactMechanism BillFromContactMechanism {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithBillFromContactMechanism(ContactMechanism value)
		        {
		            if(this.BillFromContactMechanism!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BillFromContactMechanism = value;
		            return this;
		        }		

				
				public PaymentMethod PaymentMethod {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithPaymentMethod(PaymentMethod value)
		        {
		            if(this.PaymentMethod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PaymentMethod = value;
		            return this;
		        }		

				
				public ContactMechanism PlacingContactMechanism {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithPlacingContactMechanism(ContactMechanism value)
		        {
		            if(this.PlacingContactMechanism!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PlacingContactMechanism = value;
		            return this;
		        }		

				
				public SalesOrderStatus CurrentOrderStatus {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithCurrentOrderStatus(SalesOrderStatus value)
		        {
		            if(this.CurrentOrderStatus!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentOrderStatus = value;
		            return this;
		        }		

				
				public Party PreviousBillToCustomer {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithPreviousBillToCustomer(Party value)
		        {
		            if(this.PreviousBillToCustomer!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PreviousBillToCustomer = value;
		            return this;
		        }		

				
				public SalesChannel SalesChannel {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithSalesChannel(SalesChannel value)
		        {
		            if(this.SalesChannel!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesChannel = value;
		            return this;
		        }		

				
				public Party PlacingCustomer {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithPlacingCustomer(Party value)
		        {
		            if(this.PlacingCustomer!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PlacingCustomer = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SalesOrderStatus> OrderStatuses {get; set;}	

				/// <exclude/>
				public SalesOrderBuilder WithOrderStatus(SalesOrderStatus value)
		        {
					if(this.OrderStatuses == null)
					{
						this.OrderStatuses = new global::System.Collections.Generic.List<SalesOrderStatus>(); 
					}
		            this.OrderStatuses.Add(value);
		            return this;
		        }		

				
				public SalesInvoice ProformaInvoice {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithProformaInvoice(SalesInvoice value)
		        {
		            if(this.ProformaInvoice!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ProformaInvoice = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SalesOrderItem> SalesOrderItems {get; set;}	

				/// <exclude/>
				public SalesOrderBuilder WithSalesOrderItem(SalesOrderItem value)
		        {
					if(this.SalesOrderItems == null)
					{
						this.SalesOrderItems = new global::System.Collections.Generic.List<SalesOrderItem>(); 
					}
		            this.SalesOrderItems.Add(value);
		            return this;
		        }		

				
				public SalesOrderObjectState CurrentObjectState {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithCurrentObjectState(SalesOrderObjectState value)
		        {
		            if(this.CurrentObjectState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentObjectState = value;
		            return this;
		        }		

				
				public global::System.Decimal? InitialMarkupPercentage {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithInitialMarkupPercentage(global::System.Decimal? value)
		        {
				    if(this.InitialMarkupPercentage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InitialMarkupPercentage = value;
		            return this;
		        }	

				public InternalOrganisation TakenByInternalOrganisation {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithTakenByInternalOrganisation(InternalOrganisation value)
		        {
		            if(this.TakenByInternalOrganisation!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.TakenByInternalOrganisation = value;
		            return this;
		        }		

				
				public Currency CustomerCurrency {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithCustomerCurrency(Currency value)
		        {
		            if(this.CustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CustomerCurrency = value;
		            return this;
		        }		

				
				public global::System.Decimal? TotalBasePriceCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithTotalBasePriceCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalBasePriceCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalBasePriceCustomerCurrency = value;
		            return this;
		        }	

				public global::System.Decimal? TotalIncVatCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithTotalIncVatCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalIncVatCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalIncVatCustomerCurrency = value;
		            return this;
		        }	

				public global::System.Decimal? TotalDiscountCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithTotalDiscountCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalDiscountCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalDiscountCustomerCurrency = value;
		            return this;
		        }	

				public global::System.String CustomerReference {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithCustomerReference(global::System.String value)
		        {
				    if(this.CustomerReference!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CustomerReference = value;
		            return this;
		        }	

				public Fee Fee {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithFee(Fee value)
		        {
		            if(this.Fee!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Fee = value;
		            return this;
		        }		

				
				public global::System.Decimal? TotalExVat {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithTotalExVat(global::System.Decimal? value)
		        {
				    if(this.TotalExVat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalExVat = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<OrderTerm> OrderTerms {get; set;}	

				/// <exclude/>
				public SalesOrderBuilder WithOrderTerm(OrderTerm value)
		        {
					if(this.OrderTerms == null)
					{
						this.OrderTerms = new global::System.Collections.Generic.List<OrderTerm>(); 
					}
		            this.OrderTerms.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? TotalVat {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithTotalVat(global::System.Decimal? value)
		        {
				    if(this.TotalVat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalVat = value;
		            return this;
		        }	

				public global::System.Decimal? TotalSurcharge {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithTotalSurcharge(global::System.Decimal? value)
		        {
				    if(this.TotalSurcharge!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalSurcharge = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<OrderItem> ValidOrderItems {get; set;}	

				/// <exclude/>
				public SalesOrderBuilder WithValidOrderItem(OrderItem value)
		        {
					if(this.ValidOrderItems == null)
					{
						this.ValidOrderItems = new global::System.Collections.Generic.List<OrderItem>(); 
					}
		            this.ValidOrderItems.Add(value);
		            return this;
		        }		

				
				public global::System.String OrderNumber {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithOrderNumber(global::System.String value)
		        {
				    if(this.OrderNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.OrderNumber = value;
		            return this;
		        }	

				public global::System.Decimal? TotalVatCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithTotalVatCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalVatCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalVatCustomerCurrency = value;
		            return this;
		        }	

				public global::System.Decimal? TotalDiscount {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithTotalDiscount(global::System.Decimal? value)
		        {
				    if(this.TotalDiscount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalDiscount = value;
		            return this;
		        }	

				public global::System.String Message {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithMessage(global::System.String value)
		        {
				    if(this.Message!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Message = value;
		            return this;
		        }	

				public global::System.Decimal? TotalShippingAndHandlingCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithTotalShippingAndHandlingCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalShippingAndHandlingCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalShippingAndHandlingCustomerCurrency = value;
		            return this;
		        }	

				public global::System.DateTime? EntryDate {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithEntryDate(global::System.DateTime? value)
		        {
				    if(this.EntryDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.EntryDate = value;
		            return this;
		        }	

				public DiscountAdjustment DiscountAdjustment {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithDiscountAdjustment(DiscountAdjustment value)
		        {
		            if(this.DiscountAdjustment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DiscountAdjustment = value;
		            return this;
		        }		

				
				public OrderKind OrderKind {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithOrderKind(OrderKind value)
		        {
		            if(this.OrderKind!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.OrderKind = value;
		            return this;
		        }		

				
				public global::System.Decimal? TotalIncVat {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithTotalIncVat(global::System.Decimal? value)
		        {
				    if(this.TotalIncVat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalIncVat = value;
		            return this;
		        }	

				public global::System.Decimal? TotalSurchargeCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithTotalSurchargeCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalSurchargeCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalSurchargeCustomerCurrency = value;
		            return this;
		        }	

				public VatRegime VatRegime {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithVatRegime(VatRegime value)
		        {
		            if(this.VatRegime!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.VatRegime = value;
		            return this;
		        }		

				
				public global::System.Decimal? TotalFeeCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithTotalFeeCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalFeeCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalFeeCustomerCurrency = value;
		            return this;
		        }	

				public global::System.Decimal? TotalShippingAndHandling {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithTotalShippingAndHandling(global::System.Decimal? value)
		        {
				    if(this.TotalShippingAndHandling!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalShippingAndHandling = value;
		            return this;
		        }	

				public ShippingAndHandlingCharge ShippingAndHandlingCharge {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithShippingAndHandlingCharge(ShippingAndHandlingCharge value)
		        {
		            if(this.ShippingAndHandlingCharge!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ShippingAndHandlingCharge = value;
		            return this;
		        }		

				
				public global::System.DateTime? OrderDate {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithOrderDate(global::System.DateTime? value)
		        {
				    if(this.OrderDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.OrderDate = value;
		            return this;
		        }	

				public global::System.Decimal? TotalExVatCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithTotalExVatCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalExVatCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalExVatCustomerCurrency = value;
		            return this;
		        }	

				public global::System.DateTime? DeliveryDate {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithDeliveryDate(global::System.DateTime? value)
		        {
				    if(this.DeliveryDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DeliveryDate = value;
		            return this;
		        }	

				public global::System.Decimal? TotalBasePrice {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithTotalBasePrice(global::System.Decimal? value)
		        {
				    if(this.TotalBasePrice!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalBasePrice = value;
		            return this;
		        }	

				public global::System.Decimal? TotalFee {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithTotalFee(global::System.Decimal? value)
		        {
				    if(this.TotalFee!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalFee = value;
		            return this;
		        }	

				public SurchargeAdjustment SurchargeAdjustment {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithSurchargeAdjustment(SurchargeAdjustment value)
		        {
		            if(this.SurchargeAdjustment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SurchargeAdjustment = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public SalesOrderBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public SalesOrderBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.String PrintContent {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithPrintContent(global::System.String value)
		        {
				    if(this.PrintContent!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.PrintContent = value;
		            return this;
		        }	

				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public SearchData SearchData {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				
				public global::System.String Comment {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	

				public Locale Locale {get; set;}

				/// <exclude/>
				public SalesOrderBuilder WithLocale(Locale value)
		        {
		            if(this.Locale!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Locale = value;
		            return this;
		        }		

				

	}

	public partial class SalesOrders : global::Allors.ObjectsBase<SalesOrder>
	{
		public static readonly SalesOrderMeta Meta = SalesOrderMeta.Instance;

		public SalesOrders(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}