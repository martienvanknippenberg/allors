// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class Position
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (PositionBuilder)objectBuilder;
			

			if(builder.Temporary.HasValue)
			{
				this.Temporary = builder.Temporary.Value;
			}			
					

			if(builder.EstimatedThroughDate.HasValue)
			{
				this.EstimatedThroughDate = builder.EstimatedThroughDate.Value;
			}			
					

			if(builder.EstimatedFromDate.HasValue)
			{
				this.EstimatedFromDate = builder.EstimatedFromDate.Value;
			}			
					

			if(builder.Fulltime.HasValue)
			{
				this.Fulltime = builder.Fulltime.Value;
			}			
					

			if(builder.Salary.HasValue)
			{
				this.Salary = builder.Salary.Value;
			}			
					

			if(builder.ActualFromDate.HasValue)
			{
				this.ActualFromDate = builder.ActualFromDate.Value;
			}			
					

			if(builder.ActualThroughDate.HasValue)
			{
				this.ActualThroughDate = builder.ActualThroughDate.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
		

			this.Organisation = builder.Organisation;



			this.PositionType = builder.PositionType;



			this.PositionStatus = builder.PositionStatus;



			this.ApprovedBudgetItem = builder.ApprovedBudgetItem;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.SearchData = builder.SearchData;


		}
	}

	public partial class PositionBuilder : Allors.ObjectBuilder<Position> , UserInterfaceableBuilder, SearchResultBuilder, SearchableBuilder, global::System.IDisposable
	{		
		public PositionBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public Organisation Organisation {get; set;}

				/// <exclude/>
				public PositionBuilder WithOrganisation(Organisation value)
		        {
		            if(this.Organisation!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Organisation = value;
		            return this;
		        }		

				
				public global::System.Boolean? Temporary {get; set;}

				/// <exclude/>
				public PositionBuilder WithTemporary(global::System.Boolean? value)
		        {
				    if(this.Temporary!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Temporary = value;
		            return this;
		        }	

				public global::System.DateTime? EstimatedThroughDate {get; set;}

				/// <exclude/>
				public PositionBuilder WithEstimatedThroughDate(global::System.DateTime? value)
		        {
				    if(this.EstimatedThroughDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.EstimatedThroughDate = value;
		            return this;
		        }	

				public global::System.DateTime? EstimatedFromDate {get; set;}

				/// <exclude/>
				public PositionBuilder WithEstimatedFromDate(global::System.DateTime? value)
		        {
				    if(this.EstimatedFromDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.EstimatedFromDate = value;
		            return this;
		        }	

				public PositionType PositionType {get; set;}

				/// <exclude/>
				public PositionBuilder WithPositionType(PositionType value)
		        {
		            if(this.PositionType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PositionType = value;
		            return this;
		        }		

				
				public global::System.Boolean? Fulltime {get; set;}

				/// <exclude/>
				public PositionBuilder WithFulltime(global::System.Boolean? value)
		        {
				    if(this.Fulltime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Fulltime = value;
		            return this;
		        }	

				public global::System.Boolean? Salary {get; set;}

				/// <exclude/>
				public PositionBuilder WithSalary(global::System.Boolean? value)
		        {
				    if(this.Salary!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Salary = value;
		            return this;
		        }	

				public PositionStatus PositionStatus {get; set;}

				/// <exclude/>
				public PositionBuilder WithPositionStatus(PositionStatus value)
		        {
		            if(this.PositionStatus!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PositionStatus = value;
		            return this;
		        }		

				
				public BudgetItem ApprovedBudgetItem {get; set;}

				/// <exclude/>
				public PositionBuilder WithApprovedBudgetItem(BudgetItem value)
		        {
		            if(this.ApprovedBudgetItem!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ApprovedBudgetItem = value;
		            return this;
		        }		

				
				public global::System.DateTime? ActualFromDate {get; set;}

				/// <exclude/>
				public PositionBuilder WithActualFromDate(global::System.DateTime? value)
		        {
				    if(this.ActualFromDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ActualFromDate = value;
		            return this;
		        }	

				public global::System.DateTime? ActualThroughDate {get; set;}

				/// <exclude/>
				public PositionBuilder WithActualThroughDate(global::System.DateTime? value)
		        {
				    if(this.ActualThroughDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ActualThroughDate = value;
		            return this;
		        }	

				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public PositionBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public PositionBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public PositionBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public SearchData SearchData {get; set;}

				/// <exclude/>
				public PositionBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				

	}

	public partial class Positions : global::Allors.ObjectsBase<Position>
	{
		public static readonly PositionMeta Meta = PositionMeta.Instance;

		public Positions(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}