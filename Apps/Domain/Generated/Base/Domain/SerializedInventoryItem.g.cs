// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class SerializedInventoryItem
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (SerializedInventoryItemBuilder)objectBuilder;

			this.SerialNumber = builder.SerialNumber;
		

			this.Name = builder.Name;
		

			this.Sku = builder.Sku;
					

			if(builder.UniqueId.HasValue)
			{
				this.UniqueId = builder.UniqueId.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
		

			this.PreviousObjectState = builder.PreviousObjectState;


			if(builder.InventoryItemStatuses!=null)
			{
				this.InventoryItemStatuses = builder.InventoryItemStatuses.ToArray();
			}


			this.CurrentObjectState = builder.CurrentObjectState;



			this.CurrentInventoryItemStatus = builder.CurrentInventoryItemStatus;


			if(builder.InventoryItemVariances!=null)
			{
				this.InventoryItemVariances = builder.InventoryItemVariances.ToArray();
			}


			this.Part = builder.Part;



			this.Container = builder.Container;



			this.Lot = builder.Lot;



			this.UnitOfMeasure = builder.UnitOfMeasure;


			if(builder.DerivedProductCategories!=null)
			{
				this.DerivedProductCategories = builder.DerivedProductCategories.ToArray();
			}


			this.Good = builder.Good;



			this.Facility = builder.Facility;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.SearchData = builder.SearchData;


		}
	}

	public partial class SerializedInventoryItemBuilder : Allors.ObjectBuilder<SerializedInventoryItem> , InventoryItemBuilder, global::System.IDisposable
	{		
		public SerializedInventoryItemBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public SerializedInventoryItemObjectState PreviousObjectState {get; set;}

				/// <exclude/>
				public SerializedInventoryItemBuilder WithPreviousObjectState(SerializedInventoryItemObjectState value)
		        {
		            if(this.PreviousObjectState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PreviousObjectState = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SerializedInventoryItemStatus> InventoryItemStatuses {get; set;}	

				/// <exclude/>
				public SerializedInventoryItemBuilder WithInventoryItemStatus(SerializedInventoryItemStatus value)
		        {
					if(this.InventoryItemStatuses == null)
					{
						this.InventoryItemStatuses = new global::System.Collections.Generic.List<SerializedInventoryItemStatus>(); 
					}
		            this.InventoryItemStatuses.Add(value);
		            return this;
		        }		

				
				public global::System.String SerialNumber {get; set;}

				/// <exclude/>
				public SerializedInventoryItemBuilder WithSerialNumber(global::System.String value)
		        {
				    if(this.SerialNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SerialNumber = value;
		            return this;
		        }	

				public SerializedInventoryItemObjectState CurrentObjectState {get; set;}

				/// <exclude/>
				public SerializedInventoryItemBuilder WithCurrentObjectState(SerializedInventoryItemObjectState value)
		        {
		            if(this.CurrentObjectState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentObjectState = value;
		            return this;
		        }		

				
				public SerializedInventoryItemStatus CurrentInventoryItemStatus {get; set;}

				/// <exclude/>
				public SerializedInventoryItemBuilder WithCurrentInventoryItemStatus(SerializedInventoryItemStatus value)
		        {
		            if(this.CurrentInventoryItemStatus!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentInventoryItemStatus = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<InventoryItemVariance> InventoryItemVariances {get; set;}	

				/// <exclude/>
				public SerializedInventoryItemBuilder WithInventoryItemVariance(InventoryItemVariance value)
		        {
					if(this.InventoryItemVariances == null)
					{
						this.InventoryItemVariances = new global::System.Collections.Generic.List<InventoryItemVariance>(); 
					}
		            this.InventoryItemVariances.Add(value);
		            return this;
		        }		

				
				public Part Part {get; set;}

				/// <exclude/>
				public SerializedInventoryItemBuilder WithPart(Part value)
		        {
		            if(this.Part!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Part = value;
		            return this;
		        }		

				
				public Container Container {get; set;}

				/// <exclude/>
				public SerializedInventoryItemBuilder WithContainer(Container value)
		        {
		            if(this.Container!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Container = value;
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public SerializedInventoryItemBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public Lot Lot {get; set;}

				/// <exclude/>
				public SerializedInventoryItemBuilder WithLot(Lot value)
		        {
		            if(this.Lot!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Lot = value;
		            return this;
		        }		

				
				public global::System.String Sku {get; set;}

				/// <exclude/>
				public SerializedInventoryItemBuilder WithSku(global::System.String value)
		        {
				    if(this.Sku!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Sku = value;
		            return this;
		        }	

				public UnitOfMeasure UnitOfMeasure {get; set;}

				/// <exclude/>
				public SerializedInventoryItemBuilder WithUnitOfMeasure(UnitOfMeasure value)
		        {
		            if(this.UnitOfMeasure!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.UnitOfMeasure = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<ProductCategory> DerivedProductCategories {get; set;}	

				/// <exclude/>
				public SerializedInventoryItemBuilder WithDerivedProductCategory(ProductCategory value)
		        {
					if(this.DerivedProductCategories == null)
					{
						this.DerivedProductCategories = new global::System.Collections.Generic.List<ProductCategory>(); 
					}
		            this.DerivedProductCategories.Add(value);
		            return this;
		        }		

				
				public Good Good {get; set;}

				/// <exclude/>
				public SerializedInventoryItemBuilder WithGood(Good value)
		        {
		            if(this.Good!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Good = value;
		            return this;
		        }		

				
				public Facility Facility {get; set;}

				/// <exclude/>
				public SerializedInventoryItemBuilder WithFacility(Facility value)
		        {
		            if(this.Facility!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Facility = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public SerializedInventoryItemBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public SerializedInventoryItemBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public SearchData SearchData {get; set;}

				/// <exclude/>
				public SerializedInventoryItemBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public SerializedInventoryItemBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public SerializedInventoryItemBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	


	}

	public partial class SerializedInventoryItems : global::Allors.ObjectsBase<SerializedInventoryItem>
	{
		public static readonly SerializedInventoryItemMeta Meta = SerializedInventoryItemMeta.Instance;

		public SerializedInventoryItems(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}