// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class StandardServiceOrderItem
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (StandardServiceOrderItemBuilder)objectBuilder;

			this.Description = builder.Description;
					

			if(builder.ExpectedStartDate.HasValue)
			{
				this.ExpectedStartDate = builder.ExpectedStartDate.Value;
			}			
					

			if(builder.ExpectedEndDate.HasValue)
			{
				this.ExpectedEndDate = builder.ExpectedEndDate.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
		

			this.QuoteItem = builder.QuoteItem;



			this.EngagementWorkFulfillment = builder.EngagementWorkFulfillment;


			if(builder.EngagementRates!=null)
			{
				this.EngagementRates = builder.EngagementRates.ToArray();
			}


			this.CurrentEngagementRate = builder.CurrentEngagementRate;


			if(builder.OrderedWiths!=null)
			{
				this.OrderedWiths = builder.OrderedWiths.ToArray();
			}


			this.CurrentAssignedProfessional = builder.CurrentAssignedProfessional;



			this.Product = builder.Product;



			this.ProductFeature = builder.ProductFeature;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}
	}

	public partial class StandardServiceOrderItemBuilder : Allors.ObjectBuilder<StandardServiceOrderItem> , EngagementItemBuilder, global::System.IDisposable
	{		
		public StandardServiceOrderItemBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public QuoteItem QuoteItem {get; set;}

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithQuoteItem(QuoteItem value)
		        {
		            if(this.QuoteItem!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.QuoteItem = value;
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.DateTime? ExpectedStartDate {get; set;}

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithExpectedStartDate(global::System.DateTime? value)
		        {
				    if(this.ExpectedStartDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ExpectedStartDate = value;
		            return this;
		        }	

				public global::System.DateTime? ExpectedEndDate {get; set;}

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithExpectedEndDate(global::System.DateTime? value)
		        {
				    if(this.ExpectedEndDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ExpectedEndDate = value;
		            return this;
		        }	

				public WorkEffort EngagementWorkFulfillment {get; set;}

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithEngagementWorkFulfillment(WorkEffort value)
		        {
		            if(this.EngagementWorkFulfillment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.EngagementWorkFulfillment = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<EngagementRate> EngagementRates {get; set;}	

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithEngagementRate(EngagementRate value)
		        {
					if(this.EngagementRates == null)
					{
						this.EngagementRates = new global::System.Collections.Generic.List<EngagementRate>(); 
					}
		            this.EngagementRates.Add(value);
		            return this;
		        }		

				
				public EngagementRate CurrentEngagementRate {get; set;}

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithCurrentEngagementRate(EngagementRate value)
		        {
		            if(this.CurrentEngagementRate!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentEngagementRate = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<EngagementItem> OrderedWiths {get; set;}	

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithOrderedWith(EngagementItem value)
		        {
					if(this.OrderedWiths == null)
					{
						this.OrderedWiths = new global::System.Collections.Generic.List<EngagementItem>(); 
					}
		            this.OrderedWiths.Add(value);
		            return this;
		        }		

				
				public Person CurrentAssignedProfessional {get; set;}

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithCurrentAssignedProfessional(Person value)
		        {
		            if(this.CurrentAssignedProfessional!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentAssignedProfessional = value;
		            return this;
		        }		

				
				public Product Product {get; set;}

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithProduct(Product value)
		        {
		            if(this.Product!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Product = value;
		            return this;
		        }		

				
				public ProductFeature ProductFeature {get; set;}

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithProductFeature(ProductFeature value)
		        {
		            if(this.ProductFeature!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ProductFeature = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public StandardServiceOrderItemBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class StandardServiceOrderItems : global::Allors.ObjectsBase<StandardServiceOrderItem>
	{
		public static readonly StandardServiceOrderItemMeta Meta = StandardServiceOrderItemMeta.Instance;

		public StandardServiceOrderItems(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}