// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class PayCheck
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (PayCheckBuilder)objectBuilder;
			

			if(builder.Amount.HasValue)
			{
				this.Amount = builder.Amount.Value;
			}			
					

			if(builder.EffectiveDate.HasValue)
			{
				this.EffectiveDate = builder.EffectiveDate.Value;
			}			
		

			this.ReferenceNumber = builder.ReferenceNumber;
		

			this.DisplayName = builder.DisplayName;
		

			this.Comment = builder.Comment;
					

			if(builder.UniqueId.HasValue)
			{
				this.UniqueId = builder.UniqueId.Value;
			}			
		
			if(builder.Deductions!=null)
			{
				this.Deductions = builder.Deductions.ToArray();
			}


			this.Employment = builder.Employment;



			this.PaymentMethod = builder.PaymentMethod;



			this.SendingParty = builder.SendingParty;


			if(builder.PaymentApplications!=null)
			{
				this.PaymentApplications = builder.PaymentApplications.ToArray();
			}


			this.ReceivingParty = builder.ReceivingParty;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.SearchData = builder.SearchData;


		}
	}

	public partial class PayCheckBuilder : Allors.ObjectBuilder<PayCheck> , PaymentBuilder, global::System.IDisposable
	{		
		public PayCheckBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.Collections.Generic.List<Deduction> Deductions {get; set;}	

				/// <exclude/>
				public PayCheckBuilder WithDeduction(Deduction value)
		        {
					if(this.Deductions == null)
					{
						this.Deductions = new global::System.Collections.Generic.List<Deduction>(); 
					}
		            this.Deductions.Add(value);
		            return this;
		        }		

				
				public Employment Employment {get; set;}

				/// <exclude/>
				public PayCheckBuilder WithEmployment(Employment value)
		        {
		            if(this.Employment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Employment = value;
		            return this;
		        }		

				
				public global::System.Decimal? Amount {get; set;}

				/// <exclude/>
				public PayCheckBuilder WithAmount(global::System.Decimal? value)
		        {
				    if(this.Amount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Amount = value;
		            return this;
		        }	

				public PaymentMethod PaymentMethod {get; set;}

				/// <exclude/>
				public PayCheckBuilder WithPaymentMethod(PaymentMethod value)
		        {
		            if(this.PaymentMethod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PaymentMethod = value;
		            return this;
		        }		

				
				public global::System.DateTime? EffectiveDate {get; set;}

				/// <exclude/>
				public PayCheckBuilder WithEffectiveDate(global::System.DateTime? value)
		        {
				    if(this.EffectiveDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.EffectiveDate = value;
		            return this;
		        }	

				public Party SendingParty {get; set;}

				/// <exclude/>
				public PayCheckBuilder WithSendingParty(Party value)
		        {
		            if(this.SendingParty!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SendingParty = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PaymentApplication> PaymentApplications {get; set;}	

				/// <exclude/>
				public PayCheckBuilder WithPaymentApplication(PaymentApplication value)
		        {
					if(this.PaymentApplications == null)
					{
						this.PaymentApplications = new global::System.Collections.Generic.List<PaymentApplication>(); 
					}
		            this.PaymentApplications.Add(value);
		            return this;
		        }		

				
				public global::System.String ReferenceNumber {get; set;}

				/// <exclude/>
				public PayCheckBuilder WithReferenceNumber(global::System.String value)
		        {
				    if(this.ReferenceNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ReferenceNumber = value;
		            return this;
		        }	

				public Party ReceivingParty {get; set;}

				/// <exclude/>
				public PayCheckBuilder WithReceivingParty(Party value)
		        {
		            if(this.ReceivingParty!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ReceivingParty = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public PayCheckBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public PayCheckBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public PayCheckBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public SearchData SearchData {get; set;}

				/// <exclude/>
				public PayCheckBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				
				public global::System.String Comment {get; set;}

				/// <exclude/>
				public PayCheckBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	

				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public PayCheckBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	


	}

	public partial class PayChecks : global::Allors.ObjectsBase<PayCheck>
	{
		public static readonly PayCheckMeta Meta = PayCheckMeta.Instance;

		public PayChecks(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}