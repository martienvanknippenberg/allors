// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class CostCenter
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (CostCenterBuilder)objectBuilder;

			this.Description = builder.Description;
		

			this.Name = builder.Name;
					

			if(builder.Active.HasValue)
			{
				this.Active = builder.Active.Value;
			}			
					

			if(builder.UseGlAccountOfBooking.HasValue)
			{
				this.UseGlAccountOfBooking = builder.UseGlAccountOfBooking.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
					

			if(builder.UniqueId.HasValue)
			{
				this.UniqueId = builder.UniqueId.Value;
			}			
		

			this.InternalTransferGlAccount = builder.InternalTransferGlAccount;


			if(builder.CostCenterCategories!=null)
			{
				this.CostCenterCategories = builder.CostCenterCategories.ToArray();
			}


			this.RedistributedCostsGlAccount = builder.RedistributedCostsGlAccount;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.SearchData = builder.SearchData;


		}
	}

	public partial class CostCenterBuilder : Allors.ObjectBuilder<CostCenter> , UserInterfaceableBuilder, SearchableBuilder, UniquelyIdentifiableBuilder, AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public CostCenterBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.String Description {get; set;}

				/// <exclude/>
				public CostCenterBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public OrganisationGlAccount InternalTransferGlAccount {get; set;}

				/// <exclude/>
				public CostCenterBuilder WithInternalTransferGlAccount(OrganisationGlAccount value)
		        {
		            if(this.InternalTransferGlAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.InternalTransferGlAccount = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<CostCenterCategory> CostCenterCategories {get; set;}	

				/// <exclude/>
				public CostCenterBuilder WithCostCenterCategory(CostCenterCategory value)
		        {
					if(this.CostCenterCategories == null)
					{
						this.CostCenterCategories = new global::System.Collections.Generic.List<CostCenterCategory>(); 
					}
		            this.CostCenterCategories.Add(value);
		            return this;
		        }		

				
				public OrganisationGlAccount RedistributedCostsGlAccount {get; set;}

				/// <exclude/>
				public CostCenterBuilder WithRedistributedCostsGlAccount(OrganisationGlAccount value)
		        {
		            if(this.RedistributedCostsGlAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.RedistributedCostsGlAccount = value;
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public CostCenterBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.Boolean? Active {get; set;}

				/// <exclude/>
				public CostCenterBuilder WithActive(global::System.Boolean? value)
		        {
				    if(this.Active!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Active = value;
		            return this;
		        }	

				public global::System.Boolean? UseGlAccountOfBooking {get; set;}

				/// <exclude/>
				public CostCenterBuilder WithUseGlAccountOfBooking(global::System.Boolean? value)
		        {
				    if(this.UseGlAccountOfBooking!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UseGlAccountOfBooking = value;
		            return this;
		        }	

				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public CostCenterBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public CostCenterBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public CostCenterBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public SearchData SearchData {get; set;}

				/// <exclude/>
				public CostCenterBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public CostCenterBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	


	}

	public partial class CostCenters : global::Allors.ObjectsBase<CostCenter>
	{
		public static readonly CostCenterMeta Meta = CostCenterMeta.Instance;

		public CostCenters(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}