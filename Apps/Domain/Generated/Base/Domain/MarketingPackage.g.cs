// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class MarketingPackage
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (MarketingPackageBuilder)objectBuilder;

			this.Instruction = builder.Instruction;
		

			this.Description = builder.Description;
					

			if(builder.QuantityUsed.HasValue)
			{
				this.QuantityUsed = builder.QuantityUsed.Value;
			}			
		

			this.Comment = builder.Comment;
		

			this.DisplayName = builder.DisplayName;
					

			if(builder.FromDate.HasValue)
			{
				this.FromDate = builder.FromDate.Value;
			}			
					

			if(builder.ThroughDate.HasValue)
			{
				this.ThroughDate = builder.ThroughDate.Value;
			}			
		
			if(builder.ProductsUsedIn!=null)
			{
				this.ProductsUsedIn = builder.ProductsUsedIn.ToArray();
			}


			this.Product = builder.Product;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}
	}

	public partial class MarketingPackageBuilder : Allors.ObjectBuilder<MarketingPackage> , ProductAssociationBuilder, global::System.IDisposable
	{		
		public MarketingPackageBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.String Instruction {get; set;}

				/// <exclude/>
				public MarketingPackageBuilder WithInstruction(global::System.String value)
		        {
				    if(this.Instruction!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Instruction = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Product> ProductsUsedIn {get; set;}	

				/// <exclude/>
				public MarketingPackageBuilder WithProductUsedIn(Product value)
		        {
					if(this.ProductsUsedIn == null)
					{
						this.ProductsUsedIn = new global::System.Collections.Generic.List<Product>(); 
					}
		            this.ProductsUsedIn.Add(value);
		            return this;
		        }		

				
				public Product Product {get; set;}

				/// <exclude/>
				public MarketingPackageBuilder WithProduct(Product value)
		        {
		            if(this.Product!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Product = value;
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public MarketingPackageBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.Int32? QuantityUsed {get; set;}

				/// <exclude/>
				public MarketingPackageBuilder WithQuantityUsed(global::System.Int32? value)
		        {
				    if(this.QuantityUsed!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.QuantityUsed = value;
		            return this;
		        }	

				public global::System.String Comment {get; set;}

				/// <exclude/>
				public MarketingPackageBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public MarketingPackageBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public MarketingPackageBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public MarketingPackageBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.DateTime? FromDate {get; set;}

				/// <exclude/>
				public MarketingPackageBuilder WithFromDate(global::System.DateTime? value)
		        {
				    if(this.FromDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.FromDate = value;
		            return this;
		        }	

				public global::System.DateTime? ThroughDate {get; set;}

				/// <exclude/>
				public MarketingPackageBuilder WithThroughDate(global::System.DateTime? value)
		        {
				    if(this.ThroughDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ThroughDate = value;
		            return this;
		        }	


	}

	public partial class MarketingPackages : global::Allors.ObjectsBase<MarketingPackage>
	{
		public static readonly MarketingPackageMeta Meta = MarketingPackageMeta.Instance;

		public MarketingPackages(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}