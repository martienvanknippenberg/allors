// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class EngineeringBom
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (EngineeringBomBuilder)objectBuilder;

			this.Instruction = builder.Instruction;
					

			if(builder.QuantityUsed.HasValue)
			{
				this.QuantityUsed = builder.QuantityUsed.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
		

			this.Comment = builder.Comment;
					

			if(builder.FromDate.HasValue)
			{
				this.FromDate = builder.FromDate.Value;
			}			
					

			if(builder.ThroughDate.HasValue)
			{
				this.ThroughDate = builder.ThroughDate.Value;
			}			
		

			this.Part = builder.Part;



			this.ComponentPart = builder.ComponentPart;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.SearchData = builder.SearchData;


		}
	}

	public partial class EngineeringBomBuilder : Allors.ObjectBuilder<EngineeringBom> , PartBillOfMaterialBuilder, global::System.IDisposable
	{		
		public EngineeringBomBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public Part Part {get; set;}

				/// <exclude/>
				public EngineeringBomBuilder WithPart(Part value)
		        {
		            if(this.Part!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Part = value;
		            return this;
		        }		

				
				public global::System.String Instruction {get; set;}

				/// <exclude/>
				public EngineeringBomBuilder WithInstruction(global::System.String value)
		        {
				    if(this.Instruction!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Instruction = value;
		            return this;
		        }	

				public global::System.Int32? QuantityUsed {get; set;}

				/// <exclude/>
				public EngineeringBomBuilder WithQuantityUsed(global::System.Int32? value)
		        {
				    if(this.QuantityUsed!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.QuantityUsed = value;
		            return this;
		        }	

				public Part ComponentPart {get; set;}

				/// <exclude/>
				public EngineeringBomBuilder WithComponentPart(Part value)
		        {
		            if(this.ComponentPart!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ComponentPart = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public EngineeringBomBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public EngineeringBomBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public EngineeringBomBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.String Comment {get; set;}

				/// <exclude/>
				public EngineeringBomBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	

				public global::System.DateTime? FromDate {get; set;}

				/// <exclude/>
				public EngineeringBomBuilder WithFromDate(global::System.DateTime? value)
		        {
				    if(this.FromDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.FromDate = value;
		            return this;
		        }	

				public global::System.DateTime? ThroughDate {get; set;}

				/// <exclude/>
				public EngineeringBomBuilder WithThroughDate(global::System.DateTime? value)
		        {
				    if(this.ThroughDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ThroughDate = value;
		            return this;
		        }	

				public SearchData SearchData {get; set;}

				/// <exclude/>
				public EngineeringBomBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				

	}

	public partial class EngineeringBoms : global::Allors.ObjectsBase<EngineeringBom>
	{
		public static readonly EngineeringBomMeta Meta = EngineeringBomMeta.Instance;

		public EngineeringBoms(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}