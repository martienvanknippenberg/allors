// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class Case
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (CaseBuilder)objectBuilder;
			

			if(builder.StartDate.HasValue)
			{
				this.StartDate = builder.StartDate.Value;
			}			
		

			this.Description = builder.Description;
		

			this.DisplayName = builder.DisplayName;
					

			if(builder.UniqueId.HasValue)
			{
				this.UniqueId = builder.UniqueId.Value;
			}			
		

			this.CurrentCaseStatus = builder.CurrentCaseStatus;


			if(builder.CaseStatuses!=null)
			{
				this.CaseStatuses = builder.CaseStatuses.ToArray();
			}


			this.CurrentObjectState = builder.CurrentObjectState;



			this.PreviousObjectState = builder.PreviousObjectState;



			this.SearchData = builder.SearchData;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}
	}

	public partial class CaseBuilder : Allors.ObjectBuilder<Case> , SearchableBuilder, UserInterfaceableBuilder, TransitionalBuilder, UniquelyIdentifiableBuilder, SearchResultBuilder, global::System.IDisposable
	{		
		public CaseBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public CaseStatus CurrentCaseStatus {get; set;}

				/// <exclude/>
				public CaseBuilder WithCurrentCaseStatus(CaseStatus value)
		        {
		            if(this.CurrentCaseStatus!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentCaseStatus = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<CaseStatus> CaseStatuses {get; set;}	

				/// <exclude/>
				public CaseBuilder WithCaseStatus(CaseStatus value)
		        {
					if(this.CaseStatuses == null)
					{
						this.CaseStatuses = new global::System.Collections.Generic.List<CaseStatus>(); 
					}
		            this.CaseStatuses.Add(value);
		            return this;
		        }		

				
				public global::System.DateTime? StartDate {get; set;}

				/// <exclude/>
				public CaseBuilder WithStartDate(global::System.DateTime? value)
		        {
				    if(this.StartDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.StartDate = value;
		            return this;
		        }	

				public CaseObjectState CurrentObjectState {get; set;}

				/// <exclude/>
				public CaseBuilder WithCurrentObjectState(CaseObjectState value)
		        {
		            if(this.CurrentObjectState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentObjectState = value;
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public CaseBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public CaseObjectState PreviousObjectState {get; set;}

				/// <exclude/>
				public CaseBuilder WithPreviousObjectState(CaseObjectState value)
		        {
		            if(this.PreviousObjectState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PreviousObjectState = value;
		            return this;
		        }		

				
				public SearchData SearchData {get; set;}

				/// <exclude/>
				public CaseBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public CaseBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public CaseBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public CaseBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public CaseBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	


	}

	public partial class Cases : global::Allors.ObjectsBase<Case>
	{
		public static readonly CaseMeta Meta = CaseMeta.Instance;

		public Cases(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}