// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class PayrollPreference
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (PayrollPreferenceBuilder)objectBuilder;
			

			if(builder.Percentage.HasValue)
			{
				this.Percentage = builder.Percentage.Value;
			}			
		

			this.AccountNumber = builder.AccountNumber;
					

			if(builder.Amount.HasValue)
			{
				this.Amount = builder.Amount.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
		

			this.PaymentMethod = builder.PaymentMethod;



			this.TimeFrequency = builder.TimeFrequency;



			this.DeductionType = builder.DeductionType;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}
	}

	public partial class PayrollPreferenceBuilder : Allors.ObjectBuilder<PayrollPreference> , UserInterfaceableBuilder, global::System.IDisposable
	{		
		public PayrollPreferenceBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.Decimal? Percentage {get; set;}

				/// <exclude/>
				public PayrollPreferenceBuilder WithPercentage(global::System.Decimal? value)
		        {
				    if(this.Percentage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Percentage = value;
		            return this;
		        }	

				public global::System.String AccountNumber {get; set;}

				/// <exclude/>
				public PayrollPreferenceBuilder WithAccountNumber(global::System.String value)
		        {
				    if(this.AccountNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AccountNumber = value;
		            return this;
		        }	

				public PaymentMethod PaymentMethod {get; set;}

				/// <exclude/>
				public PayrollPreferenceBuilder WithPaymentMethod(PaymentMethod value)
		        {
		            if(this.PaymentMethod!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PaymentMethod = value;
		            return this;
		        }		

				
				public TimeFrequency TimeFrequency {get; set;}

				/// <exclude/>
				public PayrollPreferenceBuilder WithTimeFrequency(TimeFrequency value)
		        {
		            if(this.TimeFrequency!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.TimeFrequency = value;
		            return this;
		        }		

				
				public DeductionType DeductionType {get; set;}

				/// <exclude/>
				public PayrollPreferenceBuilder WithDeductionType(DeductionType value)
		        {
		            if(this.DeductionType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DeductionType = value;
		            return this;
		        }		

				
				public global::System.Decimal? Amount {get; set;}

				/// <exclude/>
				public PayrollPreferenceBuilder WithAmount(global::System.Decimal? value)
		        {
				    if(this.Amount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Amount = value;
		            return this;
		        }	

				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public PayrollPreferenceBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public PayrollPreferenceBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public PayrollPreferenceBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class PayrollPreferences : global::Allors.ObjectsBase<PayrollPreference>
	{
		public static readonly PayrollPreferenceMeta Meta = PayrollPreferenceMeta.Instance;

		public PayrollPreferences(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}