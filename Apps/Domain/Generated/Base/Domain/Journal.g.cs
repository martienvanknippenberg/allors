// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class Journal
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (JournalBuilder)objectBuilder;
			

			if(builder.UseAsDefault.HasValue)
			{
				this.UseAsDefault = builder.UseAsDefault.Value;
			}			
		

			this.Description = builder.Description;
					

			if(builder.BlockUnpaidTransactions.HasValue)
			{
				this.BlockUnpaidTransactions = builder.BlockUnpaidTransactions.Value;
			}			
					

			if(builder.CloseWhenInBalance.HasValue)
			{
				this.CloseWhenInBalance = builder.CloseWhenInBalance.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
		

			this.GlPaymentInTransit = builder.GlPaymentInTransit;



			this.JournalType = builder.JournalType;



			this.ContraAccount = builder.ContraAccount;



			this.InternalOrganisation = builder.InternalOrganisation;



			this.PreviousJournalType = builder.PreviousJournalType;



			this.PreviousContraAccount = builder.PreviousContraAccount;


			if(builder.JournalEntries!=null)
			{
				this.JournalEntries = builder.JournalEntries.ToArray();
			}


			this.SearchData = builder.SearchData;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}
	}

	public partial class JournalBuilder : Allors.ObjectBuilder<Journal> , SearchableBuilder, UserInterfaceableBuilder, AccessControlledObjectBuilder, global::System.IDisposable
	{		
		public JournalBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.Boolean? UseAsDefault {get; set;}

				/// <exclude/>
				public JournalBuilder WithUseAsDefault(global::System.Boolean? value)
		        {
				    if(this.UseAsDefault!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UseAsDefault = value;
		            return this;
		        }	

				public OrganisationGlAccount GlPaymentInTransit {get; set;}

				/// <exclude/>
				public JournalBuilder WithGlPaymentInTransit(OrganisationGlAccount value)
		        {
		            if(this.GlPaymentInTransit!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.GlPaymentInTransit = value;
		            return this;
		        }		

				
				public JournalType JournalType {get; set;}

				/// <exclude/>
				public JournalBuilder WithJournalType(JournalType value)
		        {
		            if(this.JournalType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.JournalType = value;
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public JournalBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.Boolean? BlockUnpaidTransactions {get; set;}

				/// <exclude/>
				public JournalBuilder WithBlockUnpaidTransactions(global::System.Boolean? value)
		        {
				    if(this.BlockUnpaidTransactions!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.BlockUnpaidTransactions = value;
		            return this;
		        }	

				public OrganisationGlAccount ContraAccount {get; set;}

				/// <exclude/>
				public JournalBuilder WithContraAccount(OrganisationGlAccount value)
		        {
		            if(this.ContraAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ContraAccount = value;
		            return this;
		        }		

				
				public InternalOrganisation InternalOrganisation {get; set;}

				/// <exclude/>
				public JournalBuilder WithInternalOrganisation(InternalOrganisation value)
		        {
		            if(this.InternalOrganisation!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.InternalOrganisation = value;
		            return this;
		        }		

				
				public JournalType PreviousJournalType {get; set;}

				/// <exclude/>
				public JournalBuilder WithPreviousJournalType(JournalType value)
		        {
		            if(this.PreviousJournalType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PreviousJournalType = value;
		            return this;
		        }		

				
				public OrganisationGlAccount PreviousContraAccount {get; set;}

				/// <exclude/>
				public JournalBuilder WithPreviousContraAccount(OrganisationGlAccount value)
		        {
		            if(this.PreviousContraAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PreviousContraAccount = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<JournalEntry> JournalEntries {get; set;}	

				/// <exclude/>
				public JournalBuilder WithJournalEntry(JournalEntry value)
		        {
					if(this.JournalEntries == null)
					{
						this.JournalEntries = new global::System.Collections.Generic.List<JournalEntry>(); 
					}
		            this.JournalEntries.Add(value);
		            return this;
		        }		

				
				public global::System.Boolean? CloseWhenInBalance {get; set;}

				/// <exclude/>
				public JournalBuilder WithCloseWhenInBalance(global::System.Boolean? value)
		        {
				    if(this.CloseWhenInBalance!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CloseWhenInBalance = value;
		            return this;
		        }	

				public SearchData SearchData {get; set;}

				/// <exclude/>
				public JournalBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public JournalBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public JournalBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public JournalBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class Journals : global::Allors.ObjectsBase<Journal>
	{
		public static readonly JournalMeta Meta = JournalMeta.Instance;

		public Journals(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}