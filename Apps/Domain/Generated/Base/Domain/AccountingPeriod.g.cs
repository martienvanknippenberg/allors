// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class AccountingPeriod
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (AccountingPeriodBuilder)objectBuilder;
			

			if(builder.Active.HasValue)
			{
				this.Active = builder.Active.Value;
			}			
					

			if(builder.PeriodNumber.HasValue)
			{
				this.PeriodNumber = builder.PeriodNumber.Value;
			}			
		

			this.Description = builder.Description;
		

			this.BudgetNumber = builder.BudgetNumber;
					

			if(builder.FromDate.HasValue)
			{
				this.FromDate = builder.FromDate.Value;
			}			
					

			if(builder.ThroughDate.HasValue)
			{
				this.ThroughDate = builder.ThroughDate.Value;
			}			
		

			this.Comment = builder.Comment;
		

			this.DisplayName = builder.DisplayName;
					

			if(builder.UniqueId.HasValue)
			{
				this.UniqueId = builder.UniqueId.Value;
			}			
		

			this.Parent = builder.Parent;



			this.TimeFrequency = builder.TimeFrequency;


			if(builder.BudgetRevisions!=null)
			{
				this.BudgetRevisions = builder.BudgetRevisions.ToArray();
			}

			if(builder.BudgetStatuses!=null)
			{
				this.BudgetStatuses = builder.BudgetStatuses.ToArray();
			}


			this.CurrentObjectState = builder.CurrentObjectState;



			this.PreviousObjectState = builder.PreviousObjectState;


			if(builder.BudgetReviews!=null)
			{
				this.BudgetReviews = builder.BudgetReviews.ToArray();
			}


			this.CurrentBudgetStatus = builder.CurrentBudgetStatus;


			if(builder.BudgetItems!=null)
			{
				this.BudgetItems = builder.BudgetItems.ToArray();
			}

			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.SearchData = builder.SearchData;


		}
	}

	public partial class AccountingPeriodBuilder : Allors.ObjectBuilder<AccountingPeriod> , BudgetBuilder, UserInterfaceableBuilder, global::System.IDisposable
	{		
		public AccountingPeriodBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public AccountingPeriod Parent {get; set;}

				/// <exclude/>
				public AccountingPeriodBuilder WithParent(AccountingPeriod value)
		        {
		            if(this.Parent!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Parent = value;
		            return this;
		        }		

				
				public global::System.Boolean? Active {get; set;}

				/// <exclude/>
				public AccountingPeriodBuilder WithActive(global::System.Boolean? value)
		        {
				    if(this.Active!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Active = value;
		            return this;
		        }	

				public global::System.Int32? PeriodNumber {get; set;}

				/// <exclude/>
				public AccountingPeriodBuilder WithPeriodNumber(global::System.Int32? value)
		        {
				    if(this.PeriodNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.PeriodNumber = value;
		            return this;
		        }	

				public TimeFrequency TimeFrequency {get; set;}

				/// <exclude/>
				public AccountingPeriodBuilder WithTimeFrequency(TimeFrequency value)
		        {
		            if(this.TimeFrequency!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.TimeFrequency = value;
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public AccountingPeriodBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<BudgetRevision> BudgetRevisions {get; set;}	

				/// <exclude/>
				public AccountingPeriodBuilder WithBudgetRevision(BudgetRevision value)
		        {
					if(this.BudgetRevisions == null)
					{
						this.BudgetRevisions = new global::System.Collections.Generic.List<BudgetRevision>(); 
					}
		            this.BudgetRevisions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<BudgetStatus> BudgetStatuses {get; set;}	

				/// <exclude/>
				public AccountingPeriodBuilder WithBudgetStatus(BudgetStatus value)
		        {
					if(this.BudgetStatuses == null)
					{
						this.BudgetStatuses = new global::System.Collections.Generic.List<BudgetStatus>(); 
					}
		            this.BudgetStatuses.Add(value);
		            return this;
		        }		

				
				public global::System.String BudgetNumber {get; set;}

				/// <exclude/>
				public AccountingPeriodBuilder WithBudgetNumber(global::System.String value)
		        {
				    if(this.BudgetNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.BudgetNumber = value;
		            return this;
		        }	

				public BudgetObjectState CurrentObjectState {get; set;}

				/// <exclude/>
				public AccountingPeriodBuilder WithCurrentObjectState(BudgetObjectState value)
		        {
		            if(this.CurrentObjectState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentObjectState = value;
		            return this;
		        }		

				
				public BudgetObjectState PreviousObjectState {get; set;}

				/// <exclude/>
				public AccountingPeriodBuilder WithPreviousObjectState(BudgetObjectState value)
		        {
		            if(this.PreviousObjectState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PreviousObjectState = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<BudgetReview> BudgetReviews {get; set;}	

				/// <exclude/>
				public AccountingPeriodBuilder WithBudgetReview(BudgetReview value)
		        {
					if(this.BudgetReviews == null)
					{
						this.BudgetReviews = new global::System.Collections.Generic.List<BudgetReview>(); 
					}
		            this.BudgetReviews.Add(value);
		            return this;
		        }		

				
				public BudgetStatus CurrentBudgetStatus {get; set;}

				/// <exclude/>
				public AccountingPeriodBuilder WithCurrentBudgetStatus(BudgetStatus value)
		        {
		            if(this.CurrentBudgetStatus!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentBudgetStatus = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<BudgetItem> BudgetItems {get; set;}	

				/// <exclude/>
				public AccountingPeriodBuilder WithBudgetItem(BudgetItem value)
		        {
					if(this.BudgetItems == null)
					{
						this.BudgetItems = new global::System.Collections.Generic.List<BudgetItem>(); 
					}
		            this.BudgetItems.Add(value);
		            return this;
		        }		

				
				public global::System.DateTime? FromDate {get; set;}

				/// <exclude/>
				public AccountingPeriodBuilder WithFromDate(global::System.DateTime? value)
		        {
				    if(this.FromDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.FromDate = value;
		            return this;
		        }	

				public global::System.DateTime? ThroughDate {get; set;}

				/// <exclude/>
				public AccountingPeriodBuilder WithThroughDate(global::System.DateTime? value)
		        {
				    if(this.ThroughDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ThroughDate = value;
		            return this;
		        }	

				public global::System.String Comment {get; set;}

				/// <exclude/>
				public AccountingPeriodBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	

				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public AccountingPeriodBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public AccountingPeriodBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public AccountingPeriodBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public AccountingPeriodBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public SearchData SearchData {get; set;}

				/// <exclude/>
				public AccountingPeriodBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				

	}

	public partial class AccountingPeriods : global::Allors.ObjectsBase<AccountingPeriod>
	{
		public static readonly AccountingPeriodMeta Meta = AccountingPeriodMeta.Instance;

		public AccountingPeriods(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}