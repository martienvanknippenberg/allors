// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class Dimension
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (DimensionBuilder)objectBuilder;
			

			if(builder.Unit.HasValue)
			{
				this.Unit = builder.Unit.Value;
			}			
		

			this.Description = builder.Description;
					

			if(builder.UniqueId.HasValue)
			{
				this.UniqueId = builder.UniqueId.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
		

			this.UnitOfMeasure = builder.UnitOfMeasure;


			if(builder.EstimatedProductCosts!=null)
			{
				this.EstimatedProductCosts = builder.EstimatedProductCosts.ToArray();
			}

			if(builder.BasePrices!=null)
			{
				this.BasePrices = builder.BasePrices.ToArray();
			}

			if(builder.DependentFeatures!=null)
			{
				this.DependentFeatures = builder.DependentFeatures.ToArray();
			}

			if(builder.IncompatibleFeatures!=null)
			{
				this.IncompatibleFeatures = builder.IncompatibleFeatures.ToArray();
			}


			this.VatRate = builder.VatRate;



			this.SearchData = builder.SearchData;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}
	}

	public partial class DimensionBuilder : Allors.ObjectBuilder<Dimension> , ProductFeatureBuilder, global::System.IDisposable
	{		
		public DimensionBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.Decimal? Unit {get; set;}

				/// <exclude/>
				public DimensionBuilder WithUnit(global::System.Decimal? value)
		        {
				    if(this.Unit!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Unit = value;
		            return this;
		        }	

				public UnitOfMeasure UnitOfMeasure {get; set;}

				/// <exclude/>
				public DimensionBuilder WithUnitOfMeasure(UnitOfMeasure value)
		        {
		            if(this.UnitOfMeasure!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.UnitOfMeasure = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<EstimatedProductCost> EstimatedProductCosts {get; set;}	

				/// <exclude/>
				public DimensionBuilder WithEstimatedProductCost(EstimatedProductCost value)
		        {
					if(this.EstimatedProductCosts == null)
					{
						this.EstimatedProductCosts = new global::System.Collections.Generic.List<EstimatedProductCost>(); 
					}
		            this.EstimatedProductCosts.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PriceComponent> BasePrices {get; set;}	

				/// <exclude/>
				public DimensionBuilder WithBasePrice(PriceComponent value)
		        {
					if(this.BasePrices == null)
					{
						this.BasePrices = new global::System.Collections.Generic.List<PriceComponent>(); 
					}
		            this.BasePrices.Add(value);
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public DimensionBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<ProductFeature> DependentFeatures {get; set;}	

				/// <exclude/>
				public DimensionBuilder WithDependentFeature(ProductFeature value)
		        {
					if(this.DependentFeatures == null)
					{
						this.DependentFeatures = new global::System.Collections.Generic.List<ProductFeature>(); 
					}
		            this.DependentFeatures.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<ProductFeature> IncompatibleFeatures {get; set;}	

				/// <exclude/>
				public DimensionBuilder WithIncompatibleFeature(ProductFeature value)
		        {
					if(this.IncompatibleFeatures == null)
					{
						this.IncompatibleFeatures = new global::System.Collections.Generic.List<ProductFeature>(); 
					}
		            this.IncompatibleFeatures.Add(value);
		            return this;
		        }		

				
				public VatRate VatRate {get; set;}

				/// <exclude/>
				public DimensionBuilder WithVatRate(VatRate value)
		        {
		            if(this.VatRate!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.VatRate = value;
		            return this;
		        }		

				
				public SearchData SearchData {get; set;}

				/// <exclude/>
				public DimensionBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public DimensionBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public DimensionBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public DimensionBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public DimensionBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class Dimensions : global::Allors.ObjectsBase<Dimension>
	{
		public static readonly DimensionMeta Meta = DimensionMeta.Instance;

		public Dimensions(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}