// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class OrganisationGlAccount
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (OrganisationGlAccountBuilder)objectBuilder;
			

			if(builder.HasBankStatementTransactions.HasValue)
			{
				this.HasBankStatementTransactions = builder.HasBankStatementTransactions.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
					

			if(builder.FromDate.HasValue)
			{
				this.FromDate = builder.FromDate.Value;
			}			
					

			if(builder.ThroughDate.HasValue)
			{
				this.ThroughDate = builder.ThroughDate.Value;
			}			
		

			this.Product = builder.Product;



			this.Parent = builder.Parent;



			this.Party = builder.Party;



			this.ProductCategory = builder.ProductCategory;



			this.InternalOrganisation = builder.InternalOrganisation;



			this.GeneralLedgerAccount = builder.GeneralLedgerAccount;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}
	}

	public partial class OrganisationGlAccountBuilder : Allors.ObjectBuilder<OrganisationGlAccount> , UserInterfaceableBuilder, PeriodBuilder, global::System.IDisposable
	{		
		public OrganisationGlAccountBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public Product Product {get; set;}

				/// <exclude/>
				public OrganisationGlAccountBuilder WithProduct(Product value)
		        {
		            if(this.Product!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Product = value;
		            return this;
		        }		

				
				public OrganisationGlAccount Parent {get; set;}

				/// <exclude/>
				public OrganisationGlAccountBuilder WithParent(OrganisationGlAccount value)
		        {
		            if(this.Parent!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Parent = value;
		            return this;
		        }		

				
				public Party Party {get; set;}

				/// <exclude/>
				public OrganisationGlAccountBuilder WithParty(Party value)
		        {
		            if(this.Party!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Party = value;
		            return this;
		        }		

				
				public global::System.Boolean? HasBankStatementTransactions {get; set;}

				/// <exclude/>
				public OrganisationGlAccountBuilder WithHasBankStatementTransactions(global::System.Boolean? value)
		        {
				    if(this.HasBankStatementTransactions!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.HasBankStatementTransactions = value;
		            return this;
		        }	

				public ProductCategory ProductCategory {get; set;}

				/// <exclude/>
				public OrganisationGlAccountBuilder WithProductCategory(ProductCategory value)
		        {
		            if(this.ProductCategory!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ProductCategory = value;
		            return this;
		        }		

				
				public InternalOrganisation InternalOrganisation {get; set;}

				/// <exclude/>
				public OrganisationGlAccountBuilder WithInternalOrganisation(InternalOrganisation value)
		        {
		            if(this.InternalOrganisation!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.InternalOrganisation = value;
		            return this;
		        }		

				
				public GeneralLedgerAccount GeneralLedgerAccount {get; set;}

				/// <exclude/>
				public OrganisationGlAccountBuilder WithGeneralLedgerAccount(GeneralLedgerAccount value)
		        {
		            if(this.GeneralLedgerAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.GeneralLedgerAccount = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public OrganisationGlAccountBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public OrganisationGlAccountBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public OrganisationGlAccountBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.DateTime? FromDate {get; set;}

				/// <exclude/>
				public OrganisationGlAccountBuilder WithFromDate(global::System.DateTime? value)
		        {
				    if(this.FromDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.FromDate = value;
		            return this;
		        }	

				public global::System.DateTime? ThroughDate {get; set;}

				/// <exclude/>
				public OrganisationGlAccountBuilder WithThroughDate(global::System.DateTime? value)
		        {
				    if(this.ThroughDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ThroughDate = value;
		            return this;
		        }	


	}

	public partial class OrganisationGlAccounts : global::Allors.ObjectsBase<OrganisationGlAccount>
	{
		public static readonly OrganisationGlAccountMeta Meta = OrganisationGlAccountMeta.Instance;

		public OrganisationGlAccounts(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}