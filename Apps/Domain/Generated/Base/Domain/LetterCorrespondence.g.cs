// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class LetterCorrespondence
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (LetterCorrespondenceBuilder)objectBuilder;
			

			if(builder.ScheduledStart.HasValue)
			{
				this.ScheduledStart = builder.ScheduledStart.Value;
			}			
					

			if(builder.InitialScheduledStartDate.HasValue)
			{
				this.InitialScheduledStartDate = builder.InitialScheduledStartDate.Value;
			}			
		

			this.Description = builder.Description;
		

			this.Subject = builder.Subject;
					

			if(builder.ActualStart.HasValue)
			{
				this.ActualStart = builder.ActualStart.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
		

			this.Comment = builder.Comment;
					

			if(builder.UniqueId.HasValue)
			{
				this.UniqueId = builder.UniqueId.Value;
			}			
		
			if(builder.PostalAddresses!=null)
			{
				this.PostalAddresses = builder.PostalAddresses.ToArray();
			}


			this.Originator = builder.Originator;


			if(builder.Receivers!=null)
			{
				this.Receivers = builder.Receivers.ToArray();
			}

			if(builder.CommunicationEventStatuses!=null)
			{
				this.CommunicationEventStatuses = builder.CommunicationEventStatuses.ToArray();
			}

			if(builder.InvolvedParties!=null)
			{
				this.InvolvedParties = builder.InvolvedParties.ToArray();
			}


			this.CurrentObjectState = builder.CurrentObjectState;


			if(builder.EventPurposes!=null)
			{
				this.EventPurposes = builder.EventPurposes.ToArray();
			}

			if(builder.WorkEfforts!=null)
			{
				this.WorkEfforts = builder.WorkEfforts.ToArray();
			}


			this.PreviousObjectState = builder.PreviousObjectState;


			if(builder.Documents!=null)
			{
				this.Documents = builder.Documents.ToArray();
			}


			this.Case = builder.Case;



			this.Owner = builder.Owner;



			this.CurrentCommunicationEventStatus = builder.CurrentCommunicationEventStatus;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.SearchData = builder.SearchData;


		}
	}

	public partial class LetterCorrespondenceBuilder : Allors.ObjectBuilder<LetterCorrespondence> , CommunicationEventBuilder, global::System.IDisposable
	{		
		public LetterCorrespondenceBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.Collections.Generic.List<PostalAddress> PostalAddresses {get; set;}	

				/// <exclude/>
				public LetterCorrespondenceBuilder WithPostalAddress(PostalAddress value)
		        {
					if(this.PostalAddresses == null)
					{
						this.PostalAddresses = new global::System.Collections.Generic.List<PostalAddress>(); 
					}
		            this.PostalAddresses.Add(value);
		            return this;
		        }		

				
				public Party Originator {get; set;}

				/// <exclude/>
				public LetterCorrespondenceBuilder WithOriginator(Party value)
		        {
		            if(this.Originator!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Originator = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Party> Receivers {get; set;}	

				/// <exclude/>
				public LetterCorrespondenceBuilder WithReceiver(Party value)
		        {
					if(this.Receivers == null)
					{
						this.Receivers = new global::System.Collections.Generic.List<Party>(); 
					}
		            this.Receivers.Add(value);
		            return this;
		        }		

				
				public global::System.DateTime? ScheduledStart {get; set;}

				/// <exclude/>
				public LetterCorrespondenceBuilder WithScheduledStart(global::System.DateTime? value)
		        {
				    if(this.ScheduledStart!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ScheduledStart = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<CommunicationEventStatus> CommunicationEventStatuses {get; set;}	

				/// <exclude/>
				public LetterCorrespondenceBuilder WithCommunicationEventStatus(CommunicationEventStatus value)
		        {
					if(this.CommunicationEventStatuses == null)
					{
						this.CommunicationEventStatuses = new global::System.Collections.Generic.List<CommunicationEventStatus>(); 
					}
		            this.CommunicationEventStatuses.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Party> InvolvedParties {get; set;}	

				/// <exclude/>
				public LetterCorrespondenceBuilder WithInvolvedParty(Party value)
		        {
					if(this.InvolvedParties == null)
					{
						this.InvolvedParties = new global::System.Collections.Generic.List<Party>(); 
					}
		            this.InvolvedParties.Add(value);
		            return this;
		        }		

				
				public global::System.DateTime? InitialScheduledStartDate {get; set;}

				/// <exclude/>
				public LetterCorrespondenceBuilder WithInitialScheduledStartDate(global::System.DateTime? value)
		        {
				    if(this.InitialScheduledStartDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InitialScheduledStartDate = value;
		            return this;
		        }	

				public CommunicationEventObjectState CurrentObjectState {get; set;}

				/// <exclude/>
				public LetterCorrespondenceBuilder WithCurrentObjectState(CommunicationEventObjectState value)
		        {
		            if(this.CurrentObjectState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentObjectState = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<CommunicationEventPurpose> EventPurposes {get; set;}	

				/// <exclude/>
				public LetterCorrespondenceBuilder WithEventPurpose(CommunicationEventPurpose value)
		        {
					if(this.EventPurposes == null)
					{
						this.EventPurposes = new global::System.Collections.Generic.List<CommunicationEventPurpose>(); 
					}
		            this.EventPurposes.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<WorkEffort> WorkEfforts {get; set;}	

				/// <exclude/>
				public LetterCorrespondenceBuilder WithWorkEffort(WorkEffort value)
		        {
					if(this.WorkEfforts == null)
					{
						this.WorkEfforts = new global::System.Collections.Generic.List<WorkEffort>(); 
					}
		            this.WorkEfforts.Add(value);
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public LetterCorrespondenceBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.String Subject {get; set;}

				/// <exclude/>
				public LetterCorrespondenceBuilder WithSubject(global::System.String value)
		        {
				    if(this.Subject!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Subject = value;
		            return this;
		        }	

				public CommunicationEventObjectState PreviousObjectState {get; set;}

				/// <exclude/>
				public LetterCorrespondenceBuilder WithPreviousObjectState(CommunicationEventObjectState value)
		        {
		            if(this.PreviousObjectState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PreviousObjectState = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Media> Documents {get; set;}	

				/// <exclude/>
				public LetterCorrespondenceBuilder WithDocument(Media value)
		        {
					if(this.Documents == null)
					{
						this.Documents = new global::System.Collections.Generic.List<Media>(); 
					}
		            this.Documents.Add(value);
		            return this;
		        }		

				
				public Case Case {get; set;}

				/// <exclude/>
				public LetterCorrespondenceBuilder WithCase(Case value)
		        {
		            if(this.Case!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Case = value;
		            return this;
		        }		

				
				public Person Owner {get; set;}

				/// <exclude/>
				public LetterCorrespondenceBuilder WithOwner(Person value)
		        {
		            if(this.Owner!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Owner = value;
		            return this;
		        }		

				
				public CommunicationEventStatus CurrentCommunicationEventStatus {get; set;}

				/// <exclude/>
				public LetterCorrespondenceBuilder WithCurrentCommunicationEventStatus(CommunicationEventStatus value)
		        {
		            if(this.CurrentCommunicationEventStatus!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentCommunicationEventStatus = value;
		            return this;
		        }		

				
				public global::System.DateTime? ActualStart {get; set;}

				/// <exclude/>
				public LetterCorrespondenceBuilder WithActualStart(global::System.DateTime? value)
		        {
				    if(this.ActualStart!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ActualStart = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public LetterCorrespondenceBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public LetterCorrespondenceBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public LetterCorrespondenceBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public SearchData SearchData {get; set;}

				/// <exclude/>
				public LetterCorrespondenceBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				
				public global::System.String Comment {get; set;}

				/// <exclude/>
				public LetterCorrespondenceBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	

				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public LetterCorrespondenceBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	


	}

	public partial class LetterCorrespondences : global::Allors.ObjectsBase<LetterCorrespondence>
	{
		public static readonly LetterCorrespondenceMeta Meta = LetterCorrespondenceMeta.Instance;

		public LetterCorrespondences(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}