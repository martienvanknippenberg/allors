// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class SalesInvoiceItem
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (SalesInvoiceItemBuilder)objectBuilder;
			

			if(builder.RequiredProfitMargin.HasValue)
			{
				this.RequiredProfitMargin = builder.RequiredProfitMargin.Value;
			}			
					

			if(builder.InitialMarkupPercentage.HasValue)
			{
				this.InitialMarkupPercentage = builder.InitialMarkupPercentage.Value;
			}			
					

			if(builder.MaintainedMarkupPercentage.HasValue)
			{
				this.MaintainedMarkupPercentage = builder.MaintainedMarkupPercentage.Value;
			}			
					

			if(builder.UnitPurchasePrice.HasValue)
			{
				this.UnitPurchasePrice = builder.UnitPurchasePrice.Value;
			}			
					

			if(builder.InitialProfitMargin.HasValue)
			{
				this.InitialProfitMargin = builder.InitialProfitMargin.Value;
			}			
					

			if(builder.MaintainedProfitMargin.HasValue)
			{
				this.MaintainedProfitMargin = builder.MaintainedProfitMargin.Value;
			}			
					

			if(builder.RequiredMarkupPercentage.HasValue)
			{
				this.RequiredMarkupPercentage = builder.RequiredMarkupPercentage.Value;
			}			
					

			if(builder.TotalIncVatCustomerCurrency.HasValue)
			{
				this.TotalIncVatCustomerCurrency = builder.TotalIncVatCustomerCurrency.Value;
			}			
					

			if(builder.TotalVatCustomerCurrency.HasValue)
			{
				this.TotalVatCustomerCurrency = builder.TotalVatCustomerCurrency.Value;
			}			
					

			if(builder.TotalBasePrice.HasValue)
			{
				this.TotalBasePrice = builder.TotalBasePrice.Value;
			}			
					

			if(builder.TotalSurcharge.HasValue)
			{
				this.TotalSurcharge = builder.TotalSurcharge.Value;
			}			
					

			if(builder.TotalInvoiceAdjustment.HasValue)
			{
				this.TotalInvoiceAdjustment = builder.TotalInvoiceAdjustment.Value;
			}			
					

			if(builder.TotalExVatCustomerCurrency.HasValue)
			{
				this.TotalExVatCustomerCurrency = builder.TotalExVatCustomerCurrency.Value;
			}			
					

			if(builder.TotalDiscount.HasValue)
			{
				this.TotalDiscount = builder.TotalDiscount.Value;
			}			
					

			if(builder.TotalDiscountAsPercentage.HasValue)
			{
				this.TotalDiscountAsPercentage = builder.TotalDiscountAsPercentage.Value;
			}			
					

			if(builder.CalculatedUnitPrice.HasValue)
			{
				this.CalculatedUnitPrice = builder.CalculatedUnitPrice.Value;
			}			
					

			if(builder.UnitDiscount.HasValue)
			{
				this.UnitDiscount = builder.UnitDiscount.Value;
			}			
					

			if(builder.TotalIncVat.HasValue)
			{
				this.TotalIncVat = builder.TotalIncVat.Value;
			}			
					

			if(builder.UnitBasePrice.HasValue)
			{
				this.UnitBasePrice = builder.UnitBasePrice.Value;
			}			
					

			if(builder.TotalSurchargeCustomerCurrency.HasValue)
			{
				this.TotalSurchargeCustomerCurrency = builder.TotalSurchargeCustomerCurrency.Value;
			}			
					

			if(builder.ActualUnitPrice.HasValue)
			{
				this.ActualUnitPrice = builder.ActualUnitPrice.Value;
			}			
		

			this.Message = builder.Message;
					

			if(builder.TotalInvoiceAdjustmentCustomerCurrency.HasValue)
			{
				this.TotalInvoiceAdjustmentCustomerCurrency = builder.TotalInvoiceAdjustmentCustomerCurrency.Value;
			}			
					

			if(builder.AmountPaid.HasValue)
			{
				this.AmountPaid = builder.AmountPaid.Value;
			}			
					

			if(builder.TotalDiscountCustomerCurrency.HasValue)
			{
				this.TotalDiscountCustomerCurrency = builder.TotalDiscountCustomerCurrency.Value;
			}			
					

			if(builder.UnitSurcharge.HasValue)
			{
				this.UnitSurcharge = builder.UnitSurcharge.Value;
			}			
					

			if(builder.TotalExVat.HasValue)
			{
				this.TotalExVat = builder.TotalExVat.Value;
			}			
					

			if(builder.Quantity.HasValue)
			{
				this.Quantity = builder.Quantity.Value;
			}			
					

			if(builder.TotalSurchargeAsPercentage.HasValue)
			{
				this.TotalSurchargeAsPercentage = builder.TotalSurchargeAsPercentage.Value;
			}			
					

			if(builder.TotalBasePriceCustomerCurrency.HasValue)
			{
				this.TotalBasePriceCustomerCurrency = builder.TotalBasePriceCustomerCurrency.Value;
			}			
					

			if(builder.TotalVat.HasValue)
			{
				this.TotalVat = builder.TotalVat.Value;
			}			
					

			if(builder.UnitVat.HasValue)
			{
				this.UnitVat = builder.UnitVat.Value;
			}			
		

			this.Description = builder.Description;
		

			this.DisplayName = builder.DisplayName;
		

			this.ProductFeature = builder.ProductFeature;



			this.CurrentObjectState = builder.CurrentObjectState;



			this.Product = builder.Product;


			if(builder.InvoiceItemStatuses!=null)
			{
				this.InvoiceItemStatuses = builder.InvoiceItemStatuses.ToArray();
			}


			this.SalesOrderItem = builder.SalesOrderItem;



			this.SalesInvoiceItemType = builder.SalesInvoiceItemType;



			this.SalesRep = builder.SalesRep;



			this.CurrentInvoiceItemStatus = builder.CurrentInvoiceItemStatus;


			if(builder.TimeEntries!=null)
			{
				this.TimeEntries = builder.TimeEntries.ToArray();
			}


			this.PreviousObjectState = builder.PreviousObjectState;


			if(builder.InvoiceTerms!=null)
			{
				this.InvoiceTerms = builder.InvoiceTerms.ToArray();
			}

			if(builder.InvoiceVatRateItems!=null)
			{
				this.InvoiceVatRateItems = builder.InvoiceVatRateItems.ToArray();
			}


			this.AssignedVatRegime = builder.AssignedVatRegime;



			this.AdjustmentFor = builder.AdjustmentFor;



			this.SerializedInventoryItem = builder.SerializedInventoryItem;


			if(builder.CurrentPriceComponents!=null)
			{
				this.CurrentPriceComponents = builder.CurrentPriceComponents.ToArray();
			}


			this.DiscountAdjustment = builder.DiscountAdjustment;



			this.DerivedVatRate = builder.DerivedVatRate;



			this.VatRegime = builder.VatRegime;



			this.SurchargeAdjustment = builder.SurchargeAdjustment;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}
	}

	public partial class SalesInvoiceItemBuilder : Allors.ObjectBuilder<SalesInvoiceItem> , InvoiceItemBuilder, global::System.IDisposable
	{		
		public SalesInvoiceItemBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public ProductFeature ProductFeature {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithProductFeature(ProductFeature value)
		        {
		            if(this.ProductFeature!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ProductFeature = value;
		            return this;
		        }		

				
				public SalesInvoiceItemObjectState CurrentObjectState {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithCurrentObjectState(SalesInvoiceItemObjectState value)
		        {
		            if(this.CurrentObjectState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentObjectState = value;
		            return this;
		        }		

				
				public global::System.Decimal? RequiredProfitMargin {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithRequiredProfitMargin(global::System.Decimal? value)
		        {
				    if(this.RequiredProfitMargin!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.RequiredProfitMargin = value;
		            return this;
		        }	

				public global::System.Decimal? InitialMarkupPercentage {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithInitialMarkupPercentage(global::System.Decimal? value)
		        {
				    if(this.InitialMarkupPercentage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InitialMarkupPercentage = value;
		            return this;
		        }	

				public global::System.Decimal? MaintainedMarkupPercentage {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithMaintainedMarkupPercentage(global::System.Decimal? value)
		        {
				    if(this.MaintainedMarkupPercentage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.MaintainedMarkupPercentage = value;
		            return this;
		        }	

				public Product Product {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithProduct(Product value)
		        {
		            if(this.Product!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Product = value;
		            return this;
		        }		

				
				public global::System.Decimal? UnitPurchasePrice {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithUnitPurchasePrice(global::System.Decimal? value)
		        {
				    if(this.UnitPurchasePrice!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UnitPurchasePrice = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<SalesInvoiceItemStatus> InvoiceItemStatuses {get; set;}	

				/// <exclude/>
				public SalesInvoiceItemBuilder WithInvoiceItemStatus(SalesInvoiceItemStatus value)
		        {
					if(this.InvoiceItemStatuses == null)
					{
						this.InvoiceItemStatuses = new global::System.Collections.Generic.List<SalesInvoiceItemStatus>(); 
					}
		            this.InvoiceItemStatuses.Add(value);
		            return this;
		        }		

				
				public SalesOrderItem SalesOrderItem {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithSalesOrderItem(SalesOrderItem value)
		        {
		            if(this.SalesOrderItem!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesOrderItem = value;
		            return this;
		        }		

				
				public SalesInvoiceItemType SalesInvoiceItemType {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithSalesInvoiceItemType(SalesInvoiceItemType value)
		        {
		            if(this.SalesInvoiceItemType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesInvoiceItemType = value;
		            return this;
		        }		

				
				public Person SalesRep {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithSalesRep(Person value)
		        {
		            if(this.SalesRep!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesRep = value;
		            return this;
		        }		

				
				public global::System.Decimal? InitialProfitMargin {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithInitialProfitMargin(global::System.Decimal? value)
		        {
				    if(this.InitialProfitMargin!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InitialProfitMargin = value;
		            return this;
		        }	

				public SalesInvoiceItemStatus CurrentInvoiceItemStatus {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithCurrentInvoiceItemStatus(SalesInvoiceItemStatus value)
		        {
		            if(this.CurrentInvoiceItemStatus!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CurrentInvoiceItemStatus = value;
		            return this;
		        }		

				
				public global::System.Decimal? MaintainedProfitMargin {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithMaintainedProfitMargin(global::System.Decimal? value)
		        {
				    if(this.MaintainedProfitMargin!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.MaintainedProfitMargin = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<TimeEntry> TimeEntries {get; set;}	

				/// <exclude/>
				public SalesInvoiceItemBuilder WithTimeEntry(TimeEntry value)
		        {
					if(this.TimeEntries == null)
					{
						this.TimeEntries = new global::System.Collections.Generic.List<TimeEntry>(); 
					}
		            this.TimeEntries.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? RequiredMarkupPercentage {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithRequiredMarkupPercentage(global::System.Decimal? value)
		        {
				    if(this.RequiredMarkupPercentage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.RequiredMarkupPercentage = value;
		            return this;
		        }	

				public SalesInvoiceItemObjectState PreviousObjectState {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithPreviousObjectState(SalesInvoiceItemObjectState value)
		        {
		            if(this.PreviousObjectState!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PreviousObjectState = value;
		            return this;
		        }		

				
				public global::System.Decimal? TotalIncVatCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithTotalIncVatCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalIncVatCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalIncVatCustomerCurrency = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<AgreementTerm> InvoiceTerms {get; set;}	

				/// <exclude/>
				public SalesInvoiceItemBuilder WithInvoiceTerm(AgreementTerm value)
		        {
					if(this.InvoiceTerms == null)
					{
						this.InvoiceTerms = new global::System.Collections.Generic.List<AgreementTerm>(); 
					}
		            this.InvoiceTerms.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? TotalVatCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithTotalVatCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalVatCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalVatCustomerCurrency = value;
		            return this;
		        }	

				public global::System.Decimal? TotalBasePrice {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithTotalBasePrice(global::System.Decimal? value)
		        {
				    if(this.TotalBasePrice!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalBasePrice = value;
		            return this;
		        }	

				public global::System.Decimal? TotalSurcharge {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithTotalSurcharge(global::System.Decimal? value)
		        {
				    if(this.TotalSurcharge!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalSurcharge = value;
		            return this;
		        }	

				public global::System.Decimal? TotalInvoiceAdjustment {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithTotalInvoiceAdjustment(global::System.Decimal? value)
		        {
				    if(this.TotalInvoiceAdjustment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalInvoiceAdjustment = value;
		            return this;
		        }	

				public global::System.Decimal? TotalExVatCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithTotalExVatCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalExVatCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalExVatCustomerCurrency = value;
		            return this;
		        }	

				public global::System.Decimal? TotalDiscount {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithTotalDiscount(global::System.Decimal? value)
		        {
				    if(this.TotalDiscount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalDiscount = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<InvoiceVatRateItem> InvoiceVatRateItems {get; set;}	

				/// <exclude/>
				public SalesInvoiceItemBuilder WithInvoiceVatRateItem(InvoiceVatRateItem value)
		        {
					if(this.InvoiceVatRateItems == null)
					{
						this.InvoiceVatRateItems = new global::System.Collections.Generic.List<InvoiceVatRateItem>(); 
					}
		            this.InvoiceVatRateItems.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? TotalDiscountAsPercentage {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithTotalDiscountAsPercentage(global::System.Decimal? value)
		        {
				    if(this.TotalDiscountAsPercentage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalDiscountAsPercentage = value;
		            return this;
		        }	

				public global::System.Decimal? CalculatedUnitPrice {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithCalculatedUnitPrice(global::System.Decimal? value)
		        {
				    if(this.CalculatedUnitPrice!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CalculatedUnitPrice = value;
		            return this;
		        }	

				public global::System.Decimal? UnitDiscount {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithUnitDiscount(global::System.Decimal? value)
		        {
				    if(this.UnitDiscount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UnitDiscount = value;
		            return this;
		        }	

				public VatRegime AssignedVatRegime {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithAssignedVatRegime(VatRegime value)
		        {
		            if(this.AssignedVatRegime!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.AssignedVatRegime = value;
		            return this;
		        }		

				
				public global::System.Decimal? TotalIncVat {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithTotalIncVat(global::System.Decimal? value)
		        {
				    if(this.TotalIncVat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalIncVat = value;
		            return this;
		        }	

				public InvoiceItem AdjustmentFor {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithAdjustmentFor(InvoiceItem value)
		        {
		            if(this.AdjustmentFor!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.AdjustmentFor = value;
		            return this;
		        }		

				
				public global::System.Decimal? UnitBasePrice {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithUnitBasePrice(global::System.Decimal? value)
		        {
				    if(this.UnitBasePrice!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UnitBasePrice = value;
		            return this;
		        }	

				public global::System.Decimal? TotalSurchargeCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithTotalSurchargeCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalSurchargeCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalSurchargeCustomerCurrency = value;
		            return this;
		        }	

				public SerializedInventoryItem SerializedInventoryItem {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithSerializedInventoryItem(SerializedInventoryItem value)
		        {
		            if(this.SerializedInventoryItem!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SerializedInventoryItem = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<PriceComponent> CurrentPriceComponents {get; set;}	

				/// <exclude/>
				public SalesInvoiceItemBuilder WithCurrentPriceComponent(PriceComponent value)
		        {
					if(this.CurrentPriceComponents == null)
					{
						this.CurrentPriceComponents = new global::System.Collections.Generic.List<PriceComponent>(); 
					}
		            this.CurrentPriceComponents.Add(value);
		            return this;
		        }		

				
				public DiscountAdjustment DiscountAdjustment {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithDiscountAdjustment(DiscountAdjustment value)
		        {
		            if(this.DiscountAdjustment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DiscountAdjustment = value;
		            return this;
		        }		

				
				public global::System.Decimal? ActualUnitPrice {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithActualUnitPrice(global::System.Decimal? value)
		        {
				    if(this.ActualUnitPrice!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ActualUnitPrice = value;
		            return this;
		        }	

				public global::System.String Message {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithMessage(global::System.String value)
		        {
				    if(this.Message!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Message = value;
		            return this;
		        }	

				public global::System.Decimal? TotalInvoiceAdjustmentCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithTotalInvoiceAdjustmentCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalInvoiceAdjustmentCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalInvoiceAdjustmentCustomerCurrency = value;
		            return this;
		        }	

				public global::System.Decimal? AmountPaid {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithAmountPaid(global::System.Decimal? value)
		        {
				    if(this.AmountPaid!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AmountPaid = value;
		            return this;
		        }	

				public VatRate DerivedVatRate {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithDerivedVatRate(VatRate value)
		        {
		            if(this.DerivedVatRate!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DerivedVatRate = value;
		            return this;
		        }		

				
				public global::System.Decimal? TotalDiscountCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithTotalDiscountCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalDiscountCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalDiscountCustomerCurrency = value;
		            return this;
		        }	

				public global::System.Decimal? UnitSurcharge {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithUnitSurcharge(global::System.Decimal? value)
		        {
				    if(this.UnitSurcharge!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UnitSurcharge = value;
		            return this;
		        }	

				public global::System.Decimal? TotalExVat {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithTotalExVat(global::System.Decimal? value)
		        {
				    if(this.TotalExVat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalExVat = value;
		            return this;
		        }	

				public global::System.Decimal? Quantity {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithQuantity(global::System.Decimal? value)
		        {
				    if(this.Quantity!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Quantity = value;
		            return this;
		        }	

				public global::System.Decimal? TotalSurchargeAsPercentage {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithTotalSurchargeAsPercentage(global::System.Decimal? value)
		        {
				    if(this.TotalSurchargeAsPercentage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalSurchargeAsPercentage = value;
		            return this;
		        }	

				public VatRegime VatRegime {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithVatRegime(VatRegime value)
		        {
		            if(this.VatRegime!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.VatRegime = value;
		            return this;
		        }		

				
				public global::System.Decimal? TotalBasePriceCustomerCurrency {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithTotalBasePriceCustomerCurrency(global::System.Decimal? value)
		        {
				    if(this.TotalBasePriceCustomerCurrency!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalBasePriceCustomerCurrency = value;
		            return this;
		        }	

				public global::System.Decimal? TotalVat {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithTotalVat(global::System.Decimal? value)
		        {
				    if(this.TotalVat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.TotalVat = value;
		            return this;
		        }	

				public SurchargeAdjustment SurchargeAdjustment {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithSurchargeAdjustment(SurchargeAdjustment value)
		        {
		            if(this.SurchargeAdjustment!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SurchargeAdjustment = value;
		            return this;
		        }		

				
				public global::System.Decimal? UnitVat {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithUnitVat(global::System.Decimal? value)
		        {
				    if(this.UnitVat!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UnitVat = value;
		            return this;
		        }	

				public global::System.String Description {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public SalesInvoiceItemBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public SalesInvoiceItemBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public SalesInvoiceItemBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class SalesInvoiceItems : global::Allors.ObjectsBase<SalesInvoiceItem>
	{
		public static readonly SalesInvoiceItemMeta Meta = SalesInvoiceItemMeta.Instance;

		public SalesInvoiceItems(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}