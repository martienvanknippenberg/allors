// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class SalesRepPartyProductCategoryRevenue
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (SalesRepPartyProductCategoryRevenueBuilder)objectBuilder;
			

			if(builder.Year.HasValue)
			{
				this.Year = builder.Year.Value;
			}			
					

			if(builder.Month.HasValue)
			{
				this.Month = builder.Month.Value;
			}			
					

			if(builder.Revenue.HasValue)
			{
				this.Revenue = builder.Revenue.Value;
			}			
		

			this.SalesRepName = builder.SalesRepName;
		

			this.DisplayName = builder.DisplayName;
		

			this.SalesRep = builder.SalesRep;



			this.ProductCategory = builder.ProductCategory;



			this.Party = builder.Party;



			this.Currency = builder.Currency;



			this.InternalOrganisation = builder.InternalOrganisation;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}
	}

	public partial class SalesRepPartyProductCategoryRevenueBuilder : Allors.ObjectBuilder<SalesRepPartyProductCategoryRevenue> , UserInterfaceableBuilder, global::System.IDisposable
	{		
		public SalesRepPartyProductCategoryRevenueBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.Int32? Year {get; set;}

				/// <exclude/>
				public SalesRepPartyProductCategoryRevenueBuilder WithYear(global::System.Int32? value)
		        {
				    if(this.Year!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Year = value;
		            return this;
		        }	

				public Person SalesRep {get; set;}

				/// <exclude/>
				public SalesRepPartyProductCategoryRevenueBuilder WithSalesRep(Person value)
		        {
		            if(this.SalesRep!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesRep = value;
		            return this;
		        }		

				
				public ProductCategory ProductCategory {get; set;}

				/// <exclude/>
				public SalesRepPartyProductCategoryRevenueBuilder WithProductCategory(ProductCategory value)
		        {
		            if(this.ProductCategory!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.ProductCategory = value;
		            return this;
		        }		

				
				public global::System.Int32? Month {get; set;}

				/// <exclude/>
				public SalesRepPartyProductCategoryRevenueBuilder WithMonth(global::System.Int32? value)
		        {
				    if(this.Month!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Month = value;
		            return this;
		        }	

				public Party Party {get; set;}

				/// <exclude/>
				public SalesRepPartyProductCategoryRevenueBuilder WithParty(Party value)
		        {
		            if(this.Party!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Party = value;
		            return this;
		        }		

				
				public global::System.Decimal? Revenue {get; set;}

				/// <exclude/>
				public SalesRepPartyProductCategoryRevenueBuilder WithRevenue(global::System.Decimal? value)
		        {
				    if(this.Revenue!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Revenue = value;
		            return this;
		        }	

				public Currency Currency {get; set;}

				/// <exclude/>
				public SalesRepPartyProductCategoryRevenueBuilder WithCurrency(Currency value)
		        {
		            if(this.Currency!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Currency = value;
		            return this;
		        }		

				
				public InternalOrganisation InternalOrganisation {get; set;}

				/// <exclude/>
				public SalesRepPartyProductCategoryRevenueBuilder WithInternalOrganisation(InternalOrganisation value)
		        {
		            if(this.InternalOrganisation!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.InternalOrganisation = value;
		            return this;
		        }		

				
				public global::System.String SalesRepName {get; set;}

				/// <exclude/>
				public SalesRepPartyProductCategoryRevenueBuilder WithSalesRepName(global::System.String value)
		        {
				    if(this.SalesRepName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SalesRepName = value;
		            return this;
		        }	

				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public SalesRepPartyProductCategoryRevenueBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public SalesRepPartyProductCategoryRevenueBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public SalesRepPartyProductCategoryRevenueBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class SalesRepPartyProductCategoryRevenues : global::Allors.ObjectsBase<SalesRepPartyProductCategoryRevenue>
	{
		public static readonly SalesRepPartyProductCategoryRevenueMeta Meta = SalesRepPartyProductCategoryRevenueMeta.Instance;

		public SalesRepPartyProductCategoryRevenues(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}