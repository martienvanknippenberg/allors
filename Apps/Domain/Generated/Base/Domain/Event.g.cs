// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class Event
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (EventBuilder)objectBuilder;
			

			if(builder.RegistrationRequired.HasValue)
			{
				this.RegistrationRequired = builder.RegistrationRequired.Value;
			}			
		

			this.Link = builder.Link;
		

			this.Location = builder.Location;
		

			this.Text = builder.Text;
		

			this.AnnouncementText = builder.AnnouncementText;
					

			if(builder.From.HasValue)
			{
				this.From = builder.From.Value;
			}			
		

			this.Title = builder.Title;
					

			if(builder.Announce.HasValue)
			{
				this.Announce = builder.Announce.Value;
			}			
					

			if(builder.To.HasValue)
			{
				this.To = builder.To.Value;
			}			
		

			this.Locale = builder.Locale;



			this.Photo = builder.Photo;


		}
	}

	public partial class EventBuilder : Allors.ObjectBuilder<Event> , global::System.IDisposable
	{		
		public EventBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.Boolean? RegistrationRequired {get; set;}

				/// <exclude/>
				public EventBuilder WithRegistrationRequired(global::System.Boolean? value)
		        {
				    if(this.RegistrationRequired!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.RegistrationRequired = value;
		            return this;
		        }	

				public global::System.String Link {get; set;}

				/// <exclude/>
				public EventBuilder WithLink(global::System.String value)
		        {
				    if(this.Link!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Link = value;
		            return this;
		        }	

				public global::System.String Location {get; set;}

				/// <exclude/>
				public EventBuilder WithLocation(global::System.String value)
		        {
				    if(this.Location!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Location = value;
		            return this;
		        }	

				public global::System.String Text {get; set;}

				/// <exclude/>
				public EventBuilder WithText(global::System.String value)
		        {
				    if(this.Text!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Text = value;
		            return this;
		        }	

				public global::System.String AnnouncementText {get; set;}

				/// <exclude/>
				public EventBuilder WithAnnouncementText(global::System.String value)
		        {
				    if(this.AnnouncementText!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AnnouncementText = value;
		            return this;
		        }	

				public global::System.DateTime? From {get; set;}

				/// <exclude/>
				public EventBuilder WithFrom(global::System.DateTime? value)
		        {
				    if(this.From!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.From = value;
		            return this;
		        }	

				public Locale Locale {get; set;}

				/// <exclude/>
				public EventBuilder WithLocale(Locale value)
		        {
		            if(this.Locale!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Locale = value;
		            return this;
		        }		

				
				public global::System.String Title {get; set;}

				/// <exclude/>
				public EventBuilder WithTitle(global::System.String value)
		        {
				    if(this.Title!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Title = value;
		            return this;
		        }	

				public Media Photo {get; set;}

				/// <exclude/>
				public EventBuilder WithPhoto(Media value)
		        {
		            if(this.Photo!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Photo = value;
		            return this;
		        }		

				
				public global::System.Boolean? Announce {get; set;}

				/// <exclude/>
				public EventBuilder WithAnnounce(global::System.Boolean? value)
		        {
				    if(this.Announce!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Announce = value;
		            return this;
		        }	

				public global::System.DateTime? To {get; set;}

				/// <exclude/>
				public EventBuilder WithTo(global::System.DateTime? value)
		        {
				    if(this.To!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.To = value;
		            return this;
		        }	


	}

	public partial class Events : global::Allors.ObjectsBase<Event>
	{
		public static readonly EventMeta Meta = EventMeta.Instance;

		public Events(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}