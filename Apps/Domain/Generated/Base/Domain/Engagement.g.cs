// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class Engagement
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (EngagementBuilder)objectBuilder;
			

			if(builder.MaximumAmount.HasValue)
			{
				this.MaximumAmount = builder.MaximumAmount.Value;
			}			
		

			this.Description = builder.Description;
					

			if(builder.StartDate.HasValue)
			{
				this.StartDate = builder.StartDate.Value;
			}			
					

			if(builder.EstimatedAmount.HasValue)
			{
				this.EstimatedAmount = builder.EstimatedAmount.Value;
			}			
					

			if(builder.EndDate.HasValue)
			{
				this.EndDate = builder.EndDate.Value;
			}			
					

			if(builder.ContractDate.HasValue)
			{
				this.ContractDate = builder.ContractDate.Value;
			}			
		

			this.ClientPurchaseOrderNumber = builder.ClientPurchaseOrderNumber;
		

			this.DisplayName = builder.DisplayName;
		

			this.Agreement = builder.Agreement;



			this.PlacingContactMechanism = builder.PlacingContactMechanism;



			this.BillToContactMechanism = builder.BillToContactMechanism;



			this.BillToParty = builder.BillToParty;



			this.PlacingParty = builder.PlacingParty;



			this.TakenViaInternalOrganisation = builder.TakenViaInternalOrganisation;



			this.TakenViaContactMechanism = builder.TakenViaContactMechanism;


			if(builder.EngagementItems!=null)
			{
				this.EngagementItems = builder.EngagementItems.ToArray();
			}


			this.TakenViaOrganisationContactRelationship = builder.TakenViaOrganisationContactRelationship;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.SearchData = builder.SearchData;


		}
	}

	public partial class EngagementBuilder : Allors.ObjectBuilder<Engagement> , UserInterfaceableBuilder, SearchableBuilder, SearchResultBuilder, global::System.IDisposable
	{		
		public EngagementBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public Agreement Agreement {get; set;}

				/// <exclude/>
				public EngagementBuilder WithAgreement(Agreement value)
		        {
		            if(this.Agreement!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Agreement = value;
		            return this;
		        }		

				
				public ContactMechanism PlacingContactMechanism {get; set;}

				/// <exclude/>
				public EngagementBuilder WithPlacingContactMechanism(ContactMechanism value)
		        {
		            if(this.PlacingContactMechanism!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PlacingContactMechanism = value;
		            return this;
		        }		

				
				public global::System.Decimal? MaximumAmount {get; set;}

				/// <exclude/>
				public EngagementBuilder WithMaximumAmount(global::System.Decimal? value)
		        {
				    if(this.MaximumAmount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.MaximumAmount = value;
		            return this;
		        }	

				public ContactMechanism BillToContactMechanism {get; set;}

				/// <exclude/>
				public EngagementBuilder WithBillToContactMechanism(ContactMechanism value)
		        {
		            if(this.BillToContactMechanism!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BillToContactMechanism = value;
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public EngagementBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public Party BillToParty {get; set;}

				/// <exclude/>
				public EngagementBuilder WithBillToParty(Party value)
		        {
		            if(this.BillToParty!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.BillToParty = value;
		            return this;
		        }		

				
				public Party PlacingParty {get; set;}

				/// <exclude/>
				public EngagementBuilder WithPlacingParty(Party value)
		        {
		            if(this.PlacingParty!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PlacingParty = value;
		            return this;
		        }		

				
				public InternalOrganisation TakenViaInternalOrganisation {get; set;}

				/// <exclude/>
				public EngagementBuilder WithTakenViaInternalOrganisation(InternalOrganisation value)
		        {
		            if(this.TakenViaInternalOrganisation!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.TakenViaInternalOrganisation = value;
		            return this;
		        }		

				
				public global::System.DateTime? StartDate {get; set;}

				/// <exclude/>
				public EngagementBuilder WithStartDate(global::System.DateTime? value)
		        {
				    if(this.StartDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.StartDate = value;
		            return this;
		        }	

				public ContactMechanism TakenViaContactMechanism {get; set;}

				/// <exclude/>
				public EngagementBuilder WithTakenViaContactMechanism(ContactMechanism value)
		        {
		            if(this.TakenViaContactMechanism!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.TakenViaContactMechanism = value;
		            return this;
		        }		

				
				public global::System.Decimal? EstimatedAmount {get; set;}

				/// <exclude/>
				public EngagementBuilder WithEstimatedAmount(global::System.Decimal? value)
		        {
				    if(this.EstimatedAmount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.EstimatedAmount = value;
		            return this;
		        }	

				public global::System.DateTime? EndDate {get; set;}

				/// <exclude/>
				public EngagementBuilder WithEndDate(global::System.DateTime? value)
		        {
				    if(this.EndDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.EndDate = value;
		            return this;
		        }	

				public global::System.DateTime? ContractDate {get; set;}

				/// <exclude/>
				public EngagementBuilder WithContractDate(global::System.DateTime? value)
		        {
				    if(this.ContractDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ContractDate = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<EngagementItem> EngagementItems {get; set;}	

				/// <exclude/>
				public EngagementBuilder WithEngagementItem(EngagementItem value)
		        {
					if(this.EngagementItems == null)
					{
						this.EngagementItems = new global::System.Collections.Generic.List<EngagementItem>(); 
					}
		            this.EngagementItems.Add(value);
		            return this;
		        }		

				
				public global::System.String ClientPurchaseOrderNumber {get; set;}

				/// <exclude/>
				public EngagementBuilder WithClientPurchaseOrderNumber(global::System.String value)
		        {
				    if(this.ClientPurchaseOrderNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ClientPurchaseOrderNumber = value;
		            return this;
		        }	

				public OrganisationContactRelationship TakenViaOrganisationContactRelationship {get; set;}

				/// <exclude/>
				public EngagementBuilder WithTakenViaOrganisationContactRelationship(OrganisationContactRelationship value)
		        {
		            if(this.TakenViaOrganisationContactRelationship!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.TakenViaOrganisationContactRelationship = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public EngagementBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public EngagementBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public EngagementBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public SearchData SearchData {get; set;}

				/// <exclude/>
				public EngagementBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				

	}

	public partial class Engagements : global::Allors.ObjectsBase<Engagement>
	{
		public static readonly EngagementMeta Meta = EngagementMeta.Instance;

		public Engagements(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}