// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class SalesRepRelationship
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (SalesRepRelationshipBuilder)objectBuilder;
			

			if(builder.LastYearsCommission.HasValue)
			{
				this.LastYearsCommission = builder.LastYearsCommission.Value;
			}			
					

			if(builder.YTDCommission.HasValue)
			{
				this.YTDCommission = builder.YTDCommission.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
		

			this.Comment = builder.Comment;
					

			if(builder.FromDate.HasValue)
			{
				this.FromDate = builder.FromDate.Value;
			}			
					

			if(builder.ThroughDate.HasValue)
			{
				this.ThroughDate = builder.ThroughDate.Value;
			}			
					

			if(builder.SimpleMovingAverage.HasValue)
			{
				this.SimpleMovingAverage = builder.SimpleMovingAverage.Value;
			}			
		

			this.SalesRepresentative = builder.SalesRepresentative;


			if(builder.ProductCategories!=null)
			{
				this.ProductCategories = builder.ProductCategories.ToArray();
			}


			this.InternalOrganisation = builder.InternalOrganisation;



			this.Customer = builder.Customer;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.PartyRelationshipStatus = builder.PartyRelationshipStatus;


			if(builder.Agreements!=null)
			{
				this.Agreements = builder.Agreements.ToArray();
			}


			this.PartyRelationshipPriority = builder.PartyRelationshipPriority;


			if(builder.CommunicationEvents!=null)
			{
				this.CommunicationEvents = builder.CommunicationEvents.ToArray();
			}

		}
	}

	public partial class SalesRepRelationshipBuilder : Allors.ObjectBuilder<SalesRepRelationship> , UserInterfaceableBuilder, CommentableBuilder, AccessControlledObjectBuilder, PeriodBuilder, PartyRelationshipBuilder, global::System.IDisposable
	{		
		public SalesRepRelationshipBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public Person SalesRepresentative {get; set;}

				/// <exclude/>
				public SalesRepRelationshipBuilder WithSalesRepresentative(Person value)
		        {
		            if(this.SalesRepresentative!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SalesRepresentative = value;
		            return this;
		        }		

				
				public global::System.Decimal? LastYearsCommission {get; set;}

				/// <exclude/>
				public SalesRepRelationshipBuilder WithLastYearsCommission(global::System.Decimal? value)
		        {
				    if(this.LastYearsCommission!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.LastYearsCommission = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<ProductCategory> ProductCategories {get; set;}	

				/// <exclude/>
				public SalesRepRelationshipBuilder WithProductCategory(ProductCategory value)
		        {
					if(this.ProductCategories == null)
					{
						this.ProductCategories = new global::System.Collections.Generic.List<ProductCategory>(); 
					}
		            this.ProductCategories.Add(value);
		            return this;
		        }		

				
				public InternalOrganisation InternalOrganisation {get; set;}

				/// <exclude/>
				public SalesRepRelationshipBuilder WithInternalOrganisation(InternalOrganisation value)
		        {
		            if(this.InternalOrganisation!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.InternalOrganisation = value;
		            return this;
		        }		

				
				public global::System.Decimal? YTDCommission {get; set;}

				/// <exclude/>
				public SalesRepRelationshipBuilder WithYTDCommission(global::System.Decimal? value)
		        {
				    if(this.YTDCommission!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.YTDCommission = value;
		            return this;
		        }	

				public Party Customer {get; set;}

				/// <exclude/>
				public SalesRepRelationshipBuilder WithCustomer(Party value)
		        {
		            if(this.Customer!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Customer = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public SalesRepRelationshipBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public SalesRepRelationshipBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public SalesRepRelationshipBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.String Comment {get; set;}

				/// <exclude/>
				public SalesRepRelationshipBuilder WithComment(global::System.String value)
		        {
				    if(this.Comment!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Comment = value;
		            return this;
		        }	

				public global::System.DateTime? FromDate {get; set;}

				/// <exclude/>
				public SalesRepRelationshipBuilder WithFromDate(global::System.DateTime? value)
		        {
				    if(this.FromDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.FromDate = value;
		            return this;
		        }	

				public global::System.DateTime? ThroughDate {get; set;}

				/// <exclude/>
				public SalesRepRelationshipBuilder WithThroughDate(global::System.DateTime? value)
		        {
				    if(this.ThroughDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ThroughDate = value;
		            return this;
		        }	

				public PartyRelationshipStatus PartyRelationshipStatus {get; set;}

				/// <exclude/>
				public SalesRepRelationshipBuilder WithPartyRelationshipStatus(PartyRelationshipStatus value)
		        {
		            if(this.PartyRelationshipStatus!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PartyRelationshipStatus = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Agreement> Agreements {get; set;}	

				/// <exclude/>
				public SalesRepRelationshipBuilder WithAgreement(Agreement value)
		        {
					if(this.Agreements == null)
					{
						this.Agreements = new global::System.Collections.Generic.List<Agreement>(); 
					}
		            this.Agreements.Add(value);
		            return this;
		        }		

				
				public PartyRelationshipPriority PartyRelationshipPriority {get; set;}

				/// <exclude/>
				public SalesRepRelationshipBuilder WithPartyRelationshipPriority(PartyRelationshipPriority value)
		        {
		            if(this.PartyRelationshipPriority!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PartyRelationshipPriority = value;
		            return this;
		        }		

				
				public global::System.Decimal? SimpleMovingAverage {get; set;}

				/// <exclude/>
				public SalesRepRelationshipBuilder WithSimpleMovingAverage(global::System.Decimal? value)
		        {
				    if(this.SimpleMovingAverage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SimpleMovingAverage = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<CommunicationEvent> CommunicationEvents {get; set;}	

				/// <exclude/>
				public SalesRepRelationshipBuilder WithCommunicationEvent(CommunicationEvent value)
		        {
					if(this.CommunicationEvents == null)
					{
						this.CommunicationEvents = new global::System.Collections.Generic.List<CommunicationEvent>(); 
					}
		            this.CommunicationEvents.Add(value);
		            return this;
		        }		

				

	}

	public partial class SalesRepRelationships : global::Allors.ObjectsBase<SalesRepRelationship>
	{
		public static readonly SalesRepRelationshipMeta Meta = SalesRepRelationshipMeta.Instance;

		public SalesRepRelationships(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}