// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class Bank
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (BankBuilder)objectBuilder;

			this.Bic = builder.Bic;
		

			this.SwiftCode = builder.SwiftCode;
		

			this.Name = builder.Name;
		

			this.DisplayName = builder.DisplayName;
		

			this.Logo = builder.Logo;



			this.Country = builder.Country;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.SearchData = builder.SearchData;


		}
	}

	public partial class BankBuilder : Allors.ObjectBuilder<Bank> , UserInterfaceableBuilder, SearchableBuilder, global::System.IDisposable
	{		
		public BankBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public Media Logo {get; set;}

				/// <exclude/>
				public BankBuilder WithLogo(Media value)
		        {
		            if(this.Logo!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Logo = value;
		            return this;
		        }		

				
				public global::System.String Bic {get; set;}

				/// <exclude/>
				public BankBuilder WithBic(global::System.String value)
		        {
				    if(this.Bic!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Bic = value;
		            return this;
		        }	

				public global::System.String SwiftCode {get; set;}

				/// <exclude/>
				public BankBuilder WithSwiftCode(global::System.String value)
		        {
				    if(this.SwiftCode!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SwiftCode = value;
		            return this;
		        }	

				public Country Country {get; set;}

				/// <exclude/>
				public BankBuilder WithCountry(Country value)
		        {
		            if(this.Country!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Country = value;
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public BankBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public BankBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public BankBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public BankBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public SearchData SearchData {get; set;}

				/// <exclude/>
				public BankBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				

	}

	public partial class Banks : global::Allors.ObjectsBase<Bank>
	{
		public static readonly BankMeta Meta = BankMeta.Instance;

		public Banks(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}