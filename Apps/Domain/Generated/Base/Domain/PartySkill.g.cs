// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class PartySkill
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (PartySkillBuilder)objectBuilder;
			

			if(builder.YearsExperience.HasValue)
			{
				this.YearsExperience = builder.YearsExperience.Value;
			}			
					

			if(builder.StartedUsingDate.HasValue)
			{
				this.StartedUsingDate = builder.StartedUsingDate.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
		

			this.SkillRating = builder.SkillRating;



			this.SkillLevel = builder.SkillLevel;



			this.Skill = builder.Skill;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}
	}

	public partial class PartySkillBuilder : Allors.ObjectBuilder<PartySkill> , UserInterfaceableBuilder, global::System.IDisposable
	{		
		public PartySkillBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.Decimal? YearsExperience {get; set;}

				/// <exclude/>
				public PartySkillBuilder WithYearsExperience(global::System.Decimal? value)
		        {
				    if(this.YearsExperience!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.YearsExperience = value;
		            return this;
		        }	

				public global::System.DateTime? StartedUsingDate {get; set;}

				/// <exclude/>
				public PartySkillBuilder WithStartedUsingDate(global::System.DateTime? value)
		        {
				    if(this.StartedUsingDate!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.StartedUsingDate = value;
		            return this;
		        }	

				public SkillRating SkillRating {get; set;}

				/// <exclude/>
				public PartySkillBuilder WithSkillRating(SkillRating value)
		        {
		            if(this.SkillRating!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SkillRating = value;
		            return this;
		        }		

				
				public SkillLevel SkillLevel {get; set;}

				/// <exclude/>
				public PartySkillBuilder WithSkillLevel(SkillLevel value)
		        {
		            if(this.SkillLevel!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SkillLevel = value;
		            return this;
		        }		

				
				public Skill Skill {get; set;}

				/// <exclude/>
				public PartySkillBuilder WithSkill(Skill value)
		        {
		            if(this.Skill!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Skill = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public PartySkillBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public PartySkillBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public PartySkillBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class PartySkills : global::Allors.ObjectsBase<PartySkill>
	{
		public static readonly PartySkillMeta Meta = PartySkillMeta.Instance;

		public PartySkills(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}