// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class GeneralLedgerAccount
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (GeneralLedgerAccountBuilder)objectBuilder;

			this.Description = builder.Description;
					

			if(builder.CashAccount.HasValue)
			{
				this.CashAccount = builder.CashAccount.Value;
			}			
					

			if(builder.CostCenterAccount.HasValue)
			{
				this.CostCenterAccount = builder.CostCenterAccount.Value;
			}			
					

			if(builder.BalanceSheetAccount.HasValue)
			{
				this.BalanceSheetAccount = builder.BalanceSheetAccount.Value;
			}			
					

			if(builder.ReconciliationAccount.HasValue)
			{
				this.ReconciliationAccount = builder.ReconciliationAccount.Value;
			}			
		

			this.Name = builder.Name;
					

			if(builder.CostCenterRequired.HasValue)
			{
				this.CostCenterRequired = builder.CostCenterRequired.Value;
			}			
					

			if(builder.CostUnitRequired.HasValue)
			{
				this.CostUnitRequired = builder.CostUnitRequired.Value;
			}			
					

			if(builder.CostUnitAccount.HasValue)
			{
				this.CostUnitAccount = builder.CostUnitAccount.Value;
			}			
		

			this.AccountNumber = builder.AccountNumber;
					

			if(builder.Protected.HasValue)
			{
				this.Protected = builder.Protected.Value;
			}			
					

			if(builder.UniqueId.HasValue)
			{
				this.UniqueId = builder.UniqueId.Value;
			}			
		

			this.DisplayName = builder.DisplayName;
		

			this.DefaultCostUnit = builder.DefaultCostUnit;



			this.DefaultCostCenter = builder.DefaultCostCenter;



			this.GeneralLedgerAccountType = builder.GeneralLedgerAccountType;



			this.Side = builder.Side;



			this.GeneralLedgerAccountGroup = builder.GeneralLedgerAccountGroup;


			if(builder.CostCentersAllowed!=null)
			{
				this.CostCentersAllowed = builder.CostCentersAllowed.ToArray();
			}

			if(builder.CostUnitsAllowed!=null)
			{
				this.CostUnitsAllowed = builder.CostUnitsAllowed.ToArray();
			}

			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.SearchData = builder.SearchData;


		}
	}

	public partial class GeneralLedgerAccountBuilder : Allors.ObjectBuilder<GeneralLedgerAccount> , UniquelyIdentifiableBuilder, UserInterfaceableBuilder, SearchableBuilder, SearchResultBuilder, global::System.IDisposable
	{		
		public GeneralLedgerAccountBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public Product DefaultCostUnit {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithDefaultCostUnit(Product value)
		        {
		            if(this.DefaultCostUnit!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultCostUnit = value;
		            return this;
		        }		

				
				public CostCenter DefaultCostCenter {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithDefaultCostCenter(CostCenter value)
		        {
		            if(this.DefaultCostCenter!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultCostCenter = value;
		            return this;
		        }		

				
				public global::System.String Description {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public GeneralLedgerAccountType GeneralLedgerAccountType {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithGeneralLedgerAccountType(GeneralLedgerAccountType value)
		        {
		            if(this.GeneralLedgerAccountType!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.GeneralLedgerAccountType = value;
		            return this;
		        }		

				
				public global::System.Boolean? CashAccount {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithCashAccount(global::System.Boolean? value)
		        {
				    if(this.CashAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CashAccount = value;
		            return this;
		        }	

				public global::System.Boolean? CostCenterAccount {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithCostCenterAccount(global::System.Boolean? value)
		        {
				    if(this.CostCenterAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CostCenterAccount = value;
		            return this;
		        }	

				public DebitCreditConstant Side {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithSide(DebitCreditConstant value)
		        {
		            if(this.Side!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Side = value;
		            return this;
		        }		

				
				public global::System.Boolean? BalanceSheetAccount {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithBalanceSheetAccount(global::System.Boolean? value)
		        {
				    if(this.BalanceSheetAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.BalanceSheetAccount = value;
		            return this;
		        }	

				public global::System.Boolean? ReconciliationAccount {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithReconciliationAccount(global::System.Boolean? value)
		        {
				    if(this.ReconciliationAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.ReconciliationAccount = value;
		            return this;
		        }	

				public global::System.String Name {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.Boolean? CostCenterRequired {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithCostCenterRequired(global::System.Boolean? value)
		        {
				    if(this.CostCenterRequired!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CostCenterRequired = value;
		            return this;
		        }	

				public global::System.Boolean? CostUnitRequired {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithCostUnitRequired(global::System.Boolean? value)
		        {
				    if(this.CostUnitRequired!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CostUnitRequired = value;
		            return this;
		        }	

				public GeneralLedgerAccountGroup GeneralLedgerAccountGroup {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithGeneralLedgerAccountGroup(GeneralLedgerAccountGroup value)
		        {
		            if(this.GeneralLedgerAccountGroup!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.GeneralLedgerAccountGroup = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<CostCenter> CostCentersAllowed {get; set;}	

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithCostCenterAllowed(CostCenter value)
		        {
					if(this.CostCentersAllowed == null)
					{
						this.CostCentersAllowed = new global::System.Collections.Generic.List<CostCenter>(); 
					}
		            this.CostCentersAllowed.Add(value);
		            return this;
		        }		

				
				public global::System.Boolean? CostUnitAccount {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithCostUnitAccount(global::System.Boolean? value)
		        {
				    if(this.CostUnitAccount!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.CostUnitAccount = value;
		            return this;
		        }	

				public global::System.String AccountNumber {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithAccountNumber(global::System.String value)
		        {
				    if(this.AccountNumber!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AccountNumber = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Product> CostUnitsAllowed {get; set;}	

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithCostUnitAllowed(Product value)
		        {
					if(this.CostUnitsAllowed == null)
					{
						this.CostUnitsAllowed = new global::System.Collections.Generic.List<Product>(); 
					}
		            this.CostUnitsAllowed.Add(value);
		            return this;
		        }		

				
				public global::System.Boolean? Protected {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithProtected(global::System.Boolean? value)
		        {
				    if(this.Protected!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Protected = value;
		            return this;
		        }	

				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	

				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public SearchData SearchData {get; set;}

				/// <exclude/>
				public GeneralLedgerAccountBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				

	}

	public partial class GeneralLedgerAccounts : global::Allors.ObjectsBase<GeneralLedgerAccount>
	{
		public static readonly GeneralLedgerAccountMeta Meta = GeneralLedgerAccountMeta.Instance;

		public GeneralLedgerAccounts(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}