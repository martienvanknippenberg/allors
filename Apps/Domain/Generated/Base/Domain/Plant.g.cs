// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class Plant
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (PlantBuilder)objectBuilder;
			

			if(builder.SquareFootage.HasValue)
			{
				this.SquareFootage = builder.SquareFootage.Value;
			}			
		

			this.Description = builder.Description;
		

			this.Name = builder.Name;
		

			this.DisplayName = builder.DisplayName;
					

			if(builder.Latitude.HasValue)
			{
				this.Latitude = builder.Latitude.Value;
			}			
					

			if(builder.Longitude.HasValue)
			{
				this.Longitude = builder.Longitude.Value;
			}			
					

			if(builder.UniqueId.HasValue)
			{
				this.UniqueId = builder.UniqueId.Value;
			}			
		

			this.MadeUpOf = builder.MadeUpOf;


			if(builder.FacilityContactMechanisms!=null)
			{
				this.FacilityContactMechanisms = builder.FacilityContactMechanisms.ToArray();
			}


			this.Owner = builder.Owner;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}


			this.SearchData = builder.SearchData;


		}
	}

	public partial class PlantBuilder : Allors.ObjectBuilder<Plant> , FacilityBuilder, global::System.IDisposable
	{		
		public PlantBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public Facility MadeUpOf {get; set;}

				/// <exclude/>
				public PlantBuilder WithMadeUpOf(Facility value)
		        {
		            if(this.MadeUpOf!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.MadeUpOf = value;
		            return this;
		        }		

				
				public global::System.Decimal? SquareFootage {get; set;}

				/// <exclude/>
				public PlantBuilder WithSquareFootage(global::System.Decimal? value)
		        {
				    if(this.SquareFootage!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.SquareFootage = value;
		            return this;
		        }	

				public global::System.String Description {get; set;}

				/// <exclude/>
				public PlantBuilder WithDescription(global::System.String value)
		        {
				    if(this.Description!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Description = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<ContactMechanism> FacilityContactMechanisms {get; set;}	

				/// <exclude/>
				public PlantBuilder WithFacilityContactMechanism(ContactMechanism value)
		        {
					if(this.FacilityContactMechanisms == null)
					{
						this.FacilityContactMechanisms = new global::System.Collections.Generic.List<ContactMechanism>(); 
					}
		            this.FacilityContactMechanisms.Add(value);
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public PlantBuilder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public InternalOrganisation Owner {get; set;}

				/// <exclude/>
				public PlantBuilder WithOwner(InternalOrganisation value)
		        {
		            if(this.Owner!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Owner = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public PlantBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public PlantBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public PlantBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? Latitude {get; set;}

				/// <exclude/>
				public PlantBuilder WithLatitude(global::System.Decimal? value)
		        {
				    if(this.Latitude!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Latitude = value;
		            return this;
		        }	

				public global::System.Decimal? Longitude {get; set;}

				/// <exclude/>
				public PlantBuilder WithLongitude(global::System.Decimal? value)
		        {
				    if(this.Longitude!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Longitude = value;
		            return this;
		        }	

				public SearchData SearchData {get; set;}

				/// <exclude/>
				public PlantBuilder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				
				public global::System.Guid? UniqueId {get; set;}

				/// <exclude/>
				public PlantBuilder WithUniqueId(global::System.Guid? value)
		        {
				    if(this.UniqueId!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.UniqueId = value;
		            return this;
		        }	


	}

	public partial class Plants : global::Allors.ObjectsBase<Plant>
	{
		public static readonly PlantMeta Meta = PlantMeta.Instance;

		public Plants(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}