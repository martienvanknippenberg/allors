// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class BadUI
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (BadUIBuilder)objectBuilder;

			this.AllorsString = builder.AllorsString;
		

			this.DisplayName = builder.DisplayName;
		
			if(builder.PersonsMany!=null)
			{
				this.PersonsMany = builder.PersonsMany.ToArray();
			}


			this.CompanyOne = builder.CompanyOne;



			this.PersonOne = builder.PersonOne;



			this.CompanyMany = builder.CompanyMany;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}
	}

	public partial class BadUIBuilder : Allors.ObjectBuilder<BadUI> , UserInterfaceableBuilder, global::System.IDisposable
	{		
		public BadUIBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.Collections.Generic.List<Person> PersonsMany {get; set;}	

				/// <exclude/>
				public BadUIBuilder WithPersonMany(Person value)
		        {
					if(this.PersonsMany == null)
					{
						this.PersonsMany = new global::System.Collections.Generic.List<Person>(); 
					}
		            this.PersonsMany.Add(value);
		            return this;
		        }		

				
				public Organisation CompanyOne {get; set;}

				/// <exclude/>
				public BadUIBuilder WithCompanyOne(Organisation value)
		        {
		            if(this.CompanyOne!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CompanyOne = value;
		            return this;
		        }		

				
				public Person PersonOne {get; set;}

				/// <exclude/>
				public BadUIBuilder WithPersonOne(Person value)
		        {
		            if(this.PersonOne!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PersonOne = value;
		            return this;
		        }		

				
				public Organisation CompanyMany {get; set;}

				/// <exclude/>
				public BadUIBuilder WithCompanyMany(Organisation value)
		        {
		            if(this.CompanyMany!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.CompanyMany = value;
		            return this;
		        }		

				
				public global::System.String AllorsString {get; set;}

				/// <exclude/>
				public BadUIBuilder WithAllorsString(global::System.String value)
		        {
				    if(this.AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsString = value;
		            return this;
		        }	

				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public BadUIBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public BadUIBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public BadUIBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class BadUIs : global::Allors.ObjectsBase<BadUI>
	{
		public static readonly BadUIMeta Meta = BadUIMeta.Instance;

		public BadUIs(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}