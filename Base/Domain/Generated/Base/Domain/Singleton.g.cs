// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class SingletonBuilder : Allors.ObjectBuilder<Singleton> , UserInterfaceableBuilder, global::System.IDisposable
	{		
		public SingletonBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public SecurityToken AdministratorSecurityToken {get; set;}

				/// <exclude/>
				public SingletonBuilder WithAdministratorSecurityToken(SecurityToken value)
		        {
		            if(this.AdministratorSecurityToken!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.AdministratorSecurityToken = value;
		            return this;
		        }		

				
				public User Guest {get; set;}

				/// <exclude/>
				public SingletonBuilder WithGuest(User value)
		        {
		            if(this.Guest!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Guest = value;
		            return this;
		        }		

				
				public SecurityToken DefaultSecurityToken {get; set;}

				/// <exclude/>
				public SingletonBuilder WithDefaultSecurityToken(SecurityToken value)
		        {
		            if(this.DefaultSecurityToken!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultSecurityToken = value;
		            return this;
		        }		

				
				public PrintQueue DefaultPrintQueue {get; set;}

				/// <exclude/>
				public SingletonBuilder WithDefaultPrintQueue(PrintQueue value)
		        {
		            if(this.DefaultPrintQueue!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultPrintQueue = value;
		            return this;
		        }		

				
				public Locale DefaultLocale {get; set;}

				/// <exclude/>
				public SingletonBuilder WithDefaultLocale(Locale value)
		        {
		            if(this.DefaultLocale!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.DefaultLocale = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<Locale> Locale {get; set;}	

				/// <exclude/>
				public SingletonBuilder WithLocale(Locale value)
		        {
					if(this.Locale == null)
					{
						this.Locale = new global::System.Collections.Generic.List<Locale>(); 
					}
		            this.Locale.Add(value);
		            return this;
		        }		

				
				public StringTemplate PersonTemplate {get; set;}

				/// <exclude/>
				public SingletonBuilder WithPersonTemplate(StringTemplate value)
		        {
		            if(this.PersonTemplate!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.PersonTemplate = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public SingletonBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermission {get; set;}	

				/// <exclude/>
				public SingletonBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermission == null)
					{
						this.DeniedPermission = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermission.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityToken {get; set;}	

				/// <exclude/>
				public SingletonBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityToken == null)
					{
						this.SecurityToken = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityToken.Add(value);
		            return this;
		        }		

				

	}

	public partial class Singletons : global::Allors.ObjectsBase<Singleton>
	{
		public static readonly SingletonMeta Meta = SingletonMeta.Instance;

		public Singletons(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}