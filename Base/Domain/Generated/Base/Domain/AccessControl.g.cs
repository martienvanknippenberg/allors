// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{

	public partial class AccessControl
	{		
		internal override void OnBuild(global::Allors.IObjectBuilder objectBuilder)
		{
			var builder = (AccessControlBuilder)objectBuilder;

			this.DisplayName = builder.DisplayName;
		
			if(builder.SubjectGroups!=null)
			{
				this.SubjectGroups = builder.SubjectGroups.ToArray();
			}

			if(builder.Subjects!=null)
			{
				this.Subjects = builder.Subjects.ToArray();
			}

			if(builder.Objects!=null)
			{
				this.Objects = builder.Objects.ToArray();
			}


			this.Role = builder.Role;


			if(builder.DeniedPermissions!=null)
			{
				this.DeniedPermissions = builder.DeniedPermissions.ToArray();
			}

			if(builder.SecurityTokens!=null)
			{
				this.SecurityTokens = builder.SecurityTokens.ToArray();
			}

		}
	}

	public partial class AccessControlBuilder : Allors.ObjectBuilder<AccessControl> , UserInterfaceableBuilder, global::System.IDisposable
	{		
		public AccessControlBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.Collections.Generic.List<UserGroup> SubjectGroups {get; set;}	

				/// <exclude/>
				public AccessControlBuilder WithSubjectGroup(UserGroup value)
		        {
					if(this.SubjectGroups == null)
					{
						this.SubjectGroups = new global::System.Collections.Generic.List<UserGroup>(); 
					}
		            this.SubjectGroups.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<User> Subjects {get; set;}	

				/// <exclude/>
				public AccessControlBuilder WithSubject(User value)
		        {
					if(this.Subjects == null)
					{
						this.Subjects = new global::System.Collections.Generic.List<User>(); 
					}
		            this.Subjects.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> Objects {get; set;}	

				/// <exclude/>
				public AccessControlBuilder WithObject(SecurityToken value)
		        {
					if(this.Objects == null)
					{
						this.Objects = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.Objects.Add(value);
		            return this;
		        }		

				
				public Role Role {get; set;}

				/// <exclude/>
				public AccessControlBuilder WithRole(Role value)
		        {
		            if(this.Role!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.Role = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public AccessControlBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermissions {get; set;}	

				/// <exclude/>
				public AccessControlBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermissions == null)
					{
						this.DeniedPermissions = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermissions.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityTokens {get; set;}	

				/// <exclude/>
				public AccessControlBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityTokens == null)
					{
						this.SecurityTokens = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityTokens.Add(value);
		            return this;
		        }		

				

	}

	public partial class AccessControls : global::Allors.ObjectsBase<AccessControl>
	{
		public static readonly AccessControlMeta Meta = AccessControlMeta.Instance;

		public AccessControls(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}