// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	public partial class SandboxBuilder : Allors.ObjectBuilder<Sandbox> , global::System.IDisposable
	{		
		public SandboxBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.Collections.Generic.List<Sandbox> InvisibleMany {get; set;}	

				/// <exclude/>
				public SandboxBuilder WithInvisibleMany(Sandbox value)
		        {
					if(this.InvisibleMany == null)
					{
						this.InvisibleMany = new global::System.Collections.Generic.List<Sandbox>(); 
					}
		            this.InvisibleMany.Add(value);
		            return this;
		        }		

				
				public Sandbox InvisibleOne {get; set;}

				/// <exclude/>
				public SandboxBuilder WithInvisibleOne(Sandbox value)
		        {
		            if(this.InvisibleOne!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.InvisibleOne = value;
		            return this;
		        }		

				
				public global::System.String InvisibleValue {get; set;}

				/// <exclude/>
				public SandboxBuilder WithInvisibleValue(global::System.String value)
		        {
				    if(this.InvisibleValue!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.InvisibleValue = value;
		            return this;
		        }	

				public global::System.String Test {get; set;}

				/// <exclude/>
				public SandboxBuilder WithTest(global::System.String value)
		        {
				    if(this.Test!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Test = value;
		            return this;
		        }	

				public global::System.String AllorsString {get; set;}

				/// <exclude/>
				public SandboxBuilder WithAllorsString(global::System.String value)
		        {
				    if(this.AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.AllorsString = value;
		            return this;
		        }	


	}

	public partial class Sandboxes : global::Allors.ObjectsBase<Sandbox>
	{
		public static readonly SandboxMeta Meta = SandboxMeta.Instance;

		public Sandboxes(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}