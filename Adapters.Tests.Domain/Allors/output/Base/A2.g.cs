// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public abstract partial class A2 : A2Allors , global::Domain.AI2
	{
		public A2(Allors.R1.IStrategy allors) : base(allors) {}

		public static A2 Instantiate (Allors.R1.ISession allorsSession, string allorsObjectId)
		{
			return (A2) allorsSession.Instantiate(allorsObjectId);		
		}
	}

	[System.Diagnostics.DebuggerNonUserCode]
	public abstract class A2Allors :  Allors.R1.ObjectBase 
	{
		protected A2Allors(Allors.R1.IStrategy allors) : base(allors){}



		virtual public global::System.String A2AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(A2Meta.A2AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(A2Meta.A2AllorsString, value);
			}
		}

		virtual public bool ExistA2AllorsString{
			get
			{
				return Strategy.ExistUnitRole(A2Meta.A2AllorsString);
			}
		}

		virtual public void RemoveA2AllorsString()
		{
			Strategy.RemoveUnitRole(A2Meta.A2AllorsString);
		}



		virtual public Allors.R1.Extent<global::Domain.A1> A1sWhereA2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(A2Meta.A1sWhereA2Many2Many);
			}
		}

		virtual public bool ExistA1sWhereA2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(A2Meta.A1sWhereA2Many2Many);
			}
		}


		virtual public global::Domain.A1 A1WhereA2One2One
		{ 
			get
			{
				return (global::Domain.A1) Strategy.GetCompositeAssociation(A2Meta.A1WhereA2One2One);
			}
		} 

		virtual public bool ExistA1WhereA2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(A2Meta.A1WhereA2One2One);
			}
		}


		virtual public Allors.R1.Extent<global::Domain.A1> A1sWhereA2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(A2Meta.A1sWhereA2Many2One);
			}
		}

		virtual public bool ExistA1sWhereA2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(A2Meta.A1sWhereA2Many2One);
			}
		}


		virtual public global::Domain.A1 A1WhereA2One2Many
		{ 
			get
			{
				return (global::Domain.A1) Strategy.GetCompositeAssociation(A2Meta.A1WhereA2One2Many);
			}
		} 

		virtual public bool ExistA1WhereA2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(A2Meta.A1WhereA2One2Many);
			}
		}

	}
}