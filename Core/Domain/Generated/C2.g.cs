// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
	[System.Diagnostics.DebuggerNonUserCode]
	public partial class C2 : Allors.ObjectBase , I2
	{
		public static readonly C2Meta Meta = C2Meta.Instance;

		public C2(Allors.IStrategy allors) : base(allors) {}

		public static C2 Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (C2) allorsSession.Instantiate(allorsObjectId);		
		}




		virtual public global::System.Decimal? C2AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.C2AllorsDecimal);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsDecimal, value);
			}
		}

		virtual public bool ExistC2AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsDecimal);
			}
		}

		virtual public void RemoveC2AllorsDecimal()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsDecimal);
		}


		virtual public C1 C2C1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.C2C1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2C1One2One ,value);
			}
		}

		virtual public bool ExistC2C1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2C1One2One);
			}
		}

		virtual public void RemoveC2C1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2C1One2One);
		}


		virtual public C2 C2C2Many2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.C2C2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2C2Many2One ,value);
			}
		}

		virtual public bool ExistC2C2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2C2Many2One);
			}
		}

		virtual public void RemoveC2C2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2C2Many2One);
		}



		virtual public global::System.Guid? C2AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.C2AllorsUnique);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsUnique, value);
			}
		}

		virtual public bool ExistC2AllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsUnique);
			}
		}

		virtual public void RemoveC2AllorsUnique()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsUnique);
		}


		virtual public I12 C2I12Many2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.C2I12Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2I12Many2One ,value);
			}
		}

		virtual public bool ExistC2I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2I12Many2One);
			}
		}

		virtual public void RemoveC2I12Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2I12Many2One);
		}



		virtual public global::System.DateTime? C2AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.C2AllorsDateTime);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsDateTime, value);
			}
		}

		virtual public bool ExistC2AllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsDateTime);
			}
		}

		virtual public void RemoveC2AllorsDateTime()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsDateTime);
		}


		virtual public I12 C2I12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.C2I12One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2I12One2One ,value);
			}
		}

		virtual public bool ExistC2I12One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2I12One2One);
			}
		}

		virtual public void RemoveC2I12One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2I12One2One);
		}


		virtual public global::Allors.Extent<I1> C2I1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2I1Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2I1Many2Many, value);
			}
		}

		virtual public void AddC2I1Many2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.C2I1Many2Many, value);
		}

		virtual public void RemoveC2I1Many2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2I1Many2Many,value);
		}

		virtual public bool ExistC2I1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2I1Many2Many);
			}
		}

		virtual public void RemoveC2I1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2I1Many2Many);
		}



		virtual public global::System.Double? C2AllorsDouble 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(Meta.C2AllorsDouble);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsDouble, value);
			}
		}

		virtual public bool ExistC2AllorsDouble{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsDouble);
			}
		}

		virtual public void RemoveC2AllorsDouble()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsDouble);
		}


		virtual public global::Allors.Extent<I1> C2I1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2I1One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2I1One2Many, value);
			}
		}

		virtual public void AddC2I1One2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.C2I1One2Many, value);
		}

		virtual public void RemoveC2I1One2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2I1One2Many,value);
		}

		virtual public bool ExistC2I1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2I1One2Many);
			}
		}

		virtual public void RemoveC2I1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2I1One2Many);
		}


		virtual public I2 C2I2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.C2I2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2I2One2One ,value);
			}
		}

		virtual public bool ExistC2I2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2I2One2One);
			}
		}

		virtual public void RemoveC2I2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2I2One2One);
		}



		virtual public global::System.Int64? C2AllorsLong 
		{
			get
			{
				return (global::System.Int64?) Strategy.GetUnitRole(Meta.C2AllorsLong);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsLong, value);
			}
		}

		virtual public bool ExistC2AllorsLong{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsLong);
			}
		}

		virtual public void RemoveC2AllorsLong()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsLong);
		}



		virtual public global::System.Int32? C2AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.C2AllorsInteger);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsInteger, value);
			}
		}

		virtual public bool ExistC2AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsInteger);
			}
		}

		virtual public void RemoveC2AllorsInteger()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsInteger);
		}


		virtual public global::Allors.Extent<I2> C2I2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2I2Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2I2Many2Many, value);
			}
		}

		virtual public void AddC2I2Many2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.C2I2Many2Many, value);
		}

		virtual public void RemoveC2I2Many2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2I2Many2Many,value);
		}

		virtual public bool ExistC2I2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2I2Many2Many);
			}
		}

		virtual public void RemoveC2I2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2I2Many2Many);
		}


		virtual public global::Allors.Extent<I12> C2I12Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2I12Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2I12Many2Many, value);
			}
		}

		virtual public void AddC2I12Many2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.C2I12Many2Many, value);
		}

		virtual public void RemoveC2I12Many2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2I12Many2Many,value);
		}

		virtual public bool ExistC2I12Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2I12Many2Many);
			}
		}

		virtual public void RemoveC2I12Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2I12Many2Many);
		}


		virtual public global::Allors.Extent<C2> C2C2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2C2One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2C2One2Many, value);
			}
		}

		virtual public void AddC2C2One2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.C2C2One2Many, value);
		}

		virtual public void RemoveC2C2One2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2C2One2Many,value);
		}

		virtual public bool ExistC2C2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2C2One2Many);
			}
		}

		virtual public void RemoveC2C2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2C2One2Many);
		}



		virtual public global::System.Boolean? C2AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.C2AllorsBoolean);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsBoolean, value);
			}
		}

		virtual public bool ExistC2AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsBoolean);
			}
		}

		virtual public void RemoveC2AllorsBoolean()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsBoolean);
		}


		virtual public I1 C2I1Many2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.C2I1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2I1Many2One ,value);
			}
		}

		virtual public bool ExistC2I1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2I1Many2One);
			}
		}

		virtual public void RemoveC2I1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2I1Many2One);
		}


		virtual public I1 C2I1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.C2I1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2I1One2One ,value);
			}
		}

		virtual public bool ExistC2I1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2I1One2One);
			}
		}

		virtual public void RemoveC2I1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2I1One2One);
		}


		virtual public global::Allors.Extent<C1> C2C1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2C1Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2C1Many2Many, value);
			}
		}

		virtual public void AddC2C1Many2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.C2C1Many2Many, value);
		}

		virtual public void RemoveC2C1Many2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2C1Many2Many,value);
		}

		virtual public bool ExistC2C1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2C1Many2Many);
			}
		}

		virtual public void RemoveC2C1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2C1Many2Many);
		}


		virtual public global::Allors.Extent<I12> C2I12One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2I12One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2I12One2Many, value);
			}
		}

		virtual public void AddC2I12One2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.C2I12One2Many, value);
		}

		virtual public void RemoveC2I12One2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2I12One2Many,value);
		}

		virtual public bool ExistC2I12One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2I12One2Many);
			}
		}

		virtual public void RemoveC2I12One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2I12One2Many);
		}


		virtual public global::Allors.Extent<I2> C2I2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2I2One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2I2One2Many, value);
			}
		}

		virtual public void AddC2I2One2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.C2I2One2Many, value);
		}

		virtual public void RemoveC2I2One2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2I2One2Many,value);
		}

		virtual public bool ExistC2I2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2I2One2Many);
			}
		}

		virtual public void RemoveC2I2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2I2One2Many);
		}


		virtual public C2 C2C2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.C2C2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2C2One2One ,value);
			}
		}

		virtual public bool ExistC2C2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2C2One2One);
			}
		}

		virtual public void RemoveC2C2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2C2One2One);
		}



		virtual public global::System.String C2AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.C2AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsString, value);
			}
		}

		virtual public bool ExistC2AllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsString);
			}
		}

		virtual public void RemoveC2AllorsString()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsString);
		}


		virtual public C1 C2C1Many2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.C2C1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2C1Many2One ,value);
			}
		}

		virtual public bool ExistC2C1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2C1Many2One);
			}
		}

		virtual public void RemoveC2C1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2C1Many2One);
		}


		virtual public global::Allors.Extent<C2> C2C2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2C2Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2C2Many2Many, value);
			}
		}

		virtual public void AddC2C2Many2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.C2C2Many2Many, value);
		}

		virtual public void RemoveC2C2Many2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2C2Many2Many,value);
		}

		virtual public bool ExistC2C2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2C2Many2Many);
			}
		}

		virtual public void RemoveC2C2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2C2Many2Many);
		}


		virtual public I2 C2I2Many2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.C2I2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.C2I2Many2One ,value);
			}
		}

		virtual public bool ExistC2I2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.C2I2Many2One);
			}
		}

		virtual public void RemoveC2I2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.C2I2Many2One);
		}


		virtual public global::Allors.Extent<C1> C2C1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.C2C1One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.C2C1One2Many, value);
			}
		}

		virtual public void AddC2C1One2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.C2C1One2Many, value);
		}

		virtual public void RemoveC2C1One2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.C2C1One2Many,value);
		}

		virtual public bool ExistC2C1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.C2C1One2Many);
			}
		}

		virtual public void RemoveC2C1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.C2C1One2Many);
		}



		virtual public global::System.Byte[] C2AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(Meta.C2AllorsBinary);
			}
			set
			{
				Strategy.SetUnitRole(Meta.C2AllorsBinary, value);
			}
		}

		virtual public bool ExistC2AllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(Meta.C2AllorsBinary);
			}
		}

		virtual public void RemoveC2AllorsBinary()
		{
			Strategy.RemoveUnitRole(Meta.C2AllorsBinary);
		}


		virtual public I2 I2I2Many2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I2I2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2I2Many2One ,value);
			}
		}

		virtual public bool ExistI2I2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2I2Many2One);
			}
		}

		virtual public void RemoveI2I2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2I2Many2One);
		}


		virtual public C1 I2C1Many2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I2C1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2C1Many2One ,value);
			}
		}

		virtual public bool ExistI2C1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2C1Many2One);
			}
		}

		virtual public void RemoveI2C1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2C1Many2One);
		}


		virtual public I12 I2I12Many2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I2I12Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2I12Many2One ,value);
			}
		}

		virtual public bool ExistI2I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2I12Many2One);
			}
		}

		virtual public void RemoveI2I12Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2I12Many2One);
		}



		virtual public global::System.Boolean? I2AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.I2AllorsBoolean);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsBoolean, value);
			}
		}

		virtual public bool ExistI2AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsBoolean);
			}
		}

		virtual public void RemoveI2AllorsBoolean()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsBoolean);
		}


		virtual public global::Allors.Extent<C1> I2C1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2C1One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2C1One2Many, value);
			}
		}

		virtual public void AddI2C1One2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I2C1One2Many, value);
		}

		virtual public void RemoveI2C1One2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2C1One2Many,value);
		}

		virtual public bool ExistI2C1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2C1One2Many);
			}
		}

		virtual public void RemoveI2C1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2C1One2Many);
		}


		virtual public C1 I2C1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I2C1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2C1One2One ,value);
			}
		}

		virtual public bool ExistI2C1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2C1One2One);
			}
		}

		virtual public void RemoveI2C1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2C1One2One);
		}



		virtual public global::System.Decimal? I2AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.I2AllorsDecimal);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsDecimal, value);
			}
		}

		virtual public bool ExistI2AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsDecimal);
			}
		}

		virtual public void RemoveI2AllorsDecimal()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsDecimal);
		}


		virtual public global::Allors.Extent<I2> I2I2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2Many2any);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2Many2any, value);
			}
		}

		virtual public void AddI2Many2any (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I2Many2any, value);
		}

		virtual public void RemoveI2Many2any (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2Many2any,value);
		}

		virtual public bool ExistI2I2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2Many2any);
			}
		}

		virtual public void RemoveI2I2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2Many2any);
		}



		virtual public global::System.Byte[] I2AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(Meta.I2AllorsBinary);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsBinary, value);
			}
		}

		virtual public bool ExistI2AllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsBinary);
			}
		}

		virtual public void RemoveI2AllorsBinary()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsBinary);
		}



		virtual public global::System.Guid? I2AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.I2AllorsUnique);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsUnique, value);
			}
		}

		virtual public bool ExistI2AllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsUnique);
			}
		}

		virtual public void RemoveI2AllorsUnique()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsUnique);
		}


		virtual public I1 I2I1Many2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I2I1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2I1Many2One ,value);
			}
		}

		virtual public bool ExistI2I1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2I1Many2One);
			}
		}

		virtual public void RemoveI2I1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2I1Many2One);
		}



		virtual public global::System.DateTime? I2AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.I2AllorsDateTime);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsDateTime, value);
			}
		}

		virtual public bool ExistI2AllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsDateTime);
			}
		}

		virtual public void RemoveI2AllorsDateTime()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsDateTime);
		}


		virtual public global::Allors.Extent<I12> I2I12One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2I12One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2I12One2Many, value);
			}
		}

		virtual public void AddI2I12One2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I2I12One2Many, value);
		}

		virtual public void RemoveI2I12One2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2I12One2Many,value);
		}

		virtual public bool ExistI2I12One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2I12One2Many);
			}
		}

		virtual public void RemoveI2I12One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2I12One2Many);
		}


		virtual public I12 I2I12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I2I12One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2I12One2One ,value);
			}
		}

		virtual public bool ExistI2I12One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2I12One2One);
			}
		}

		virtual public void RemoveI2I12One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2I12One2One);
		}


		virtual public global::Allors.Extent<C2> I2C2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2C2Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2C2Many2Many, value);
			}
		}

		virtual public void AddI2C2Many2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.I2C2Many2Many, value);
		}

		virtual public void RemoveI2C2Many2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2C2Many2Many,value);
		}

		virtual public bool ExistI2C2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2C2Many2Many);
			}
		}

		virtual public void RemoveI2C2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2C2Many2Many);
		}


		virtual public global::Allors.Extent<I1> I2I1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2I1Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2I1Many2Many, value);
			}
		}

		virtual public void AddI2I1Many2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I2I1Many2Many, value);
		}

		virtual public void RemoveI2I1Many2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2I1Many2Many,value);
		}

		virtual public bool ExistI2I1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2I1Many2Many);
			}
		}

		virtual public void RemoveI2I1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2I1Many2Many);
		}


		virtual public C2 I2C2Many2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I2C2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2C2Many2One ,value);
			}
		}

		virtual public bool ExistI2C2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2C2Many2One);
			}
		}

		virtual public void RemoveI2C2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2C2Many2One);
		}



		virtual public global::System.String I2AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.I2AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsString, value);
			}
		}

		virtual public bool ExistI2AllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsString);
			}
		}

		virtual public void RemoveI2AllorsString()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsString);
		}


		virtual public global::Allors.Extent<C2> I2C2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2C2One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2C2One2Many, value);
			}
		}

		virtual public void AddI2C2One2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.I2C2One2Many, value);
		}

		virtual public void RemoveI2C2One2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2C2One2Many,value);
		}

		virtual public bool ExistI2C2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2C2One2Many);
			}
		}

		virtual public void RemoveI2C2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2C2One2Many);
		}


		virtual public I1 I2I1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I2I1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2I1One2One ,value);
			}
		}

		virtual public bool ExistI2I1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2I1One2One);
			}
		}

		virtual public void RemoveI2I1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2I1One2One);
		}


		virtual public global::Allors.Extent<I1> I2I1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2I1One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2I1One2Many, value);
			}
		}

		virtual public void AddI2I1One2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I2I1One2Many, value);
		}

		virtual public void RemoveI2I1One2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2I1One2Many,value);
		}

		virtual public bool ExistI2I1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2I1One2Many);
			}
		}

		virtual public void RemoveI2I1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2I1One2Many);
		}


		virtual public global::Allors.Extent<I12> I2I12Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2I12Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2I12Many2Many, value);
			}
		}

		virtual public void AddI2I12Many2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I2I12Many2Many, value);
		}

		virtual public void RemoveI2I12Many2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2I12Many2Many,value);
		}

		virtual public bool ExistI2I12Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2I12Many2Many);
			}
		}

		virtual public void RemoveI2I12Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2I12Many2Many);
		}


		virtual public I2 I2I2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I2I2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2I2One2One ,value);
			}
		}

		virtual public bool ExistI2I2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2I2One2One);
			}
		}

		virtual public void RemoveI2I2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2I2One2One);
		}



		virtual public global::System.Int64? I2AllorsLong 
		{
			get
			{
				return (global::System.Int64?) Strategy.GetUnitRole(Meta.I2AllorsLong);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsLong, value);
			}
		}

		virtual public bool ExistI2AllorsLong{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsLong);
			}
		}

		virtual public void RemoveI2AllorsLong()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsLong);
		}



		virtual public global::System.Int32? I2AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.I2AllorsInteger);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsInteger, value);
			}
		}

		virtual public bool ExistI2AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsInteger);
			}
		}

		virtual public void RemoveI2AllorsInteger()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsInteger);
		}


		virtual public global::Allors.Extent<I2> I2I2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2I2One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2I2One2Many, value);
			}
		}

		virtual public void AddI2I2One2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I2I2One2Many, value);
		}

		virtual public void RemoveI2I2One2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2I2One2Many,value);
		}

		virtual public bool ExistI2I2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2I2One2Many);
			}
		}

		virtual public void RemoveI2I2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2I2One2Many);
		}


		virtual public global::Allors.Extent<C1> I2C1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I2C1Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I2C1Many2Many, value);
			}
		}

		virtual public void AddI2C1Many2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I2C1Many2Many, value);
		}

		virtual public void RemoveI2C1Many2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I2C1Many2Many,value);
		}

		virtual public bool ExistI2C1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I2C1Many2Many);
			}
		}

		virtual public void RemoveI2C1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I2C1Many2Many);
		}


		virtual public C2 I2C2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I2C2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I2C2One2One ,value);
			}
		}

		virtual public bool ExistI2C2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I2C2One2One);
			}
		}

		virtual public void RemoveI2C2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I2C2One2One);
		}



		virtual public global::System.Double? I2AllorsDouble 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(Meta.I2AllorsDouble);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I2AllorsDouble, value);
			}
		}

		virtual public bool ExistI2AllorsDouble{
			get
			{
				return Strategy.ExistUnitRole(Meta.I2AllorsDouble);
			}
		}

		virtual public void RemoveI2AllorsDouble()
		{
			Strategy.RemoveUnitRole(Meta.I2AllorsDouble);
		}



		virtual public global::System.Byte[] I12AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(Meta.I12AllorsBinary);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsBinary, value);
			}
		}

		virtual public bool ExistI12AllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsBinary);
			}
		}

		virtual public void RemoveI12AllorsBinary()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsBinary);
		}


		virtual public C2 I12C2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I12C2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C2One2One ,value);
			}
		}

		virtual public bool ExistI12C2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C2One2One);
			}
		}

		virtual public void RemoveI12C2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C2One2One);
		}



		virtual public global::System.Double? I12AllorsDouble 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(Meta.I12AllorsDouble);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsDouble, value);
			}
		}

		virtual public bool ExistI12AllorsDouble{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsDouble);
			}
		}

		virtual public void RemoveI12AllorsDouble()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsDouble);
		}


		virtual public I1 I12I1Many2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I12I1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I1Many2One ,value);
			}
		}

		virtual public bool ExistI12I1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I1Many2One);
			}
		}

		virtual public void RemoveI12I1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I1Many2One);
		}



		virtual public global::System.String I12AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.I12AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsString, value);
			}
		}

		virtual public bool ExistI12AllorsString{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsString);
			}
		}

		virtual public void RemoveI12AllorsString()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsString);
		}


		virtual public global::Allors.Extent<I12> I12I12Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I12Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I12Many2Many, value);
			}
		}

		virtual public void AddI12I12Many2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I12I12Many2Many, value);
		}

		virtual public void RemoveI12I12Many2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I12Many2Many,value);
		}

		virtual public bool ExistI12I12Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I12Many2Many);
			}
		}

		virtual public void RemoveI12I12Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I12Many2Many);
		}



		virtual public global::System.Decimal? I12AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(Meta.I12AllorsDecimal);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsDecimal, value);
			}
		}

		virtual public bool ExistI12AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsDecimal);
			}
		}

		virtual public void RemoveI12AllorsDecimal()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsDecimal);
		}


		virtual public global::Allors.Extent<I2> I12I2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I2Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I2Many2Many, value);
			}
		}

		virtual public void AddI12I2Many2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I12I2Many2Many, value);
		}

		virtual public void RemoveI12I2Many2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I2Many2Many,value);
		}

		virtual public bool ExistI12I2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I2Many2Many);
			}
		}

		virtual public void RemoveI12I2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I2Many2Many);
		}


		virtual public global::Allors.Extent<C2> I12C2Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12C2Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12C2Many2Many, value);
			}
		}

		virtual public void AddI12C2Many2Many (C2 value)
		{
			Strategy.AddCompositeRole(Meta.I12C2Many2Many, value);
		}

		virtual public void RemoveI12C2Many2Many (C2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12C2Many2Many,value);
		}

		virtual public bool ExistI12C2Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12C2Many2Many);
			}
		}

		virtual public void RemoveI12C2Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12C2Many2Many);
		}


		virtual public global::Allors.Extent<I1> I12I1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I1Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I1Many2Many, value);
			}
		}

		virtual public void AddI12I1Many2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I12I1Many2Many, value);
		}

		virtual public void RemoveI12I1Many2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I1Many2Many,value);
		}

		virtual public bool ExistI12I1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I1Many2Many);
			}
		}

		virtual public void RemoveI12I1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I1Many2Many);
		}


		virtual public global::Allors.Extent<I12> I12I12One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I12One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I12One2Many, value);
			}
		}

		virtual public void AddI12I12One2Many (I12 value)
		{
			Strategy.AddCompositeRole(Meta.I12I12One2Many, value);
		}

		virtual public void RemoveI12I12One2Many (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I12One2Many,value);
		}

		virtual public bool ExistI12I12One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I12One2Many);
			}
		}

		virtual public void RemoveI12I12One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I12One2Many);
		}



		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.Name);
			}
			set
			{
				Strategy.SetUnitRole(Meta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(Meta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(Meta.Name);
		}


		virtual public global::Allors.Extent<C1> I12C1Many2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12C1Many2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12C1Many2Many, value);
			}
		}

		virtual public void AddI12C1Many2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I12C1Many2Many, value);
		}

		virtual public void RemoveI12C1Many2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12C1Many2Many,value);
		}

		virtual public bool ExistI12C1Many2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12C1Many2Many);
			}
		}

		virtual public void RemoveI12C1Many2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12C1Many2Many);
		}


		virtual public I2 I12I2Many2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I12I2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I2Many2One ,value);
			}
		}

		virtual public bool ExistI12I2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I2Many2One);
			}
		}

		virtual public void RemoveI12I2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I2Many2One);
		}



		virtual public global::System.Guid? I12AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(Meta.I12AllorsUnique);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsUnique, value);
			}
		}

		virtual public bool ExistI12AllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsUnique);
			}
		}

		virtual public void RemoveI12AllorsUnique()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsUnique);
		}



		virtual public global::System.Int32? I12AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(Meta.I12AllorsInteger);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsInteger, value);
			}
		}

		virtual public bool ExistI12AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsInteger);
			}
		}

		virtual public void RemoveI12AllorsInteger()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsInteger);
		}


		virtual public global::Allors.Extent<I1> I12I1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I1One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I1One2Many, value);
			}
		}

		virtual public void AddI12I1One2Many (I1 value)
		{
			Strategy.AddCompositeRole(Meta.I12I1One2Many, value);
		}

		virtual public void RemoveI12I1One2Many (I1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I1One2Many,value);
		}

		virtual public bool ExistI12I1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I1One2Many);
			}
		}

		virtual public void RemoveI12I1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I1One2Many);
		}


		virtual public C1 I12C1One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I12C1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C1One2One ,value);
			}
		}

		virtual public bool ExistI12C1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C1One2One);
			}
		}

		virtual public void RemoveI12C1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C1One2One);
		}



		virtual public global::System.Int64? I12AllorsLong 
		{
			get
			{
				return (global::System.Int64?) Strategy.GetUnitRole(Meta.I12AllorsLong);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsLong, value);
			}
		}

		virtual public bool ExistI12AllorsLong{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsLong);
			}
		}

		virtual public void RemoveI12AllorsLong()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsLong);
		}


		virtual public I12 I12I12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I12I12One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I12One2One ,value);
			}
		}

		virtual public bool ExistI12I12One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I12One2One);
			}
		}

		virtual public void RemoveI12I12One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I12One2One);
		}


		virtual public I2 I12I2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeRole(Meta.I12I2One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I2One2One ,value);
			}
		}

		virtual public bool ExistI12I2One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I2One2One);
			}
		}

		virtual public void RemoveI12I2One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I2One2One);
		}


		virtual public global::Allors.Extent<I12> Dependencies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.Dependency);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.Dependency, value);
			}
		}

		virtual public void AddDependency (I12 value)
		{
			Strategy.AddCompositeRole(Meta.Dependency, value);
		}

		virtual public void RemoveDependency (I12 value)
		{
			Strategy.RemoveCompositeRole(Meta.Dependency,value);
		}

		virtual public bool ExistDependencies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.Dependency);
			}
		}

		virtual public void RemoveDependencies()
		{
			Strategy.RemoveCompositeRoles(Meta.Dependency);
		}


		virtual public global::Allors.Extent<I2> I12I2One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12I2One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12I2One2Many, value);
			}
		}

		virtual public void AddI12I2One2Many (I2 value)
		{
			Strategy.AddCompositeRole(Meta.I12I2One2Many, value);
		}

		virtual public void RemoveI12I2One2Many (I2 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12I2One2Many,value);
		}

		virtual public bool ExistI12I2One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12I2One2Many);
			}
		}

		virtual public void RemoveI12I2One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12I2One2Many);
		}


		virtual public C2 I12C2Many2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeRole(Meta.I12C2Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C2Many2One ,value);
			}
		}

		virtual public bool ExistI12C2Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C2Many2One);
			}
		}

		virtual public void RemoveI12C2Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C2Many2One);
		}


		virtual public I12 I12I12Many2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeRole(Meta.I12I12Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I12Many2One ,value);
			}
		}

		virtual public bool ExistI12I12Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I12Many2One);
			}
		}

		virtual public void RemoveI12I12Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I12Many2One);
		}



		virtual public global::System.Boolean? I12AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(Meta.I12AllorsBoolean);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsBoolean, value);
			}
		}

		virtual public bool ExistI12AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsBoolean);
			}
		}

		virtual public void RemoveI12AllorsBoolean()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsBoolean);
		}


		virtual public I1 I12I1One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeRole(Meta.I12I1One2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12I1One2One ,value);
			}
		}

		virtual public bool ExistI12I1One2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12I1One2One);
			}
		}

		virtual public void RemoveI12I1One2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12I1One2One);
		}



		virtual public global::System.DateTime? I12AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(Meta.I12AllorsDateTime);
			}
			set
			{
				Strategy.SetUnitRole(Meta.I12AllorsDateTime, value);
			}
		}

		virtual public bool ExistI12AllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(Meta.I12AllorsDateTime);
			}
		}

		virtual public void RemoveI12AllorsDateTime()
		{
			Strategy.RemoveUnitRole(Meta.I12AllorsDateTime);
		}


		virtual public global::Allors.Extent<C1> I12C1One2Manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.I12C1One2Many);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.I12C1One2Many, value);
			}
		}

		virtual public void AddI12C1One2Many (C1 value)
		{
			Strategy.AddCompositeRole(Meta.I12C1One2Many, value);
		}

		virtual public void RemoveI12C1One2Many (C1 value)
		{
			Strategy.RemoveCompositeRole(Meta.I12C1One2Many,value);
		}

		virtual public bool ExistI12C1One2Manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.I12C1One2Many);
			}
		}

		virtual public void RemoveI12C1One2Manies()
		{
			Strategy.RemoveCompositeRoles(Meta.I12C1One2Many);
		}


		virtual public C1 I12C1Many2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeRole(Meta.I12C1Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.I12C1Many2One ,value);
			}
		}

		virtual public bool ExistI12C1Many2One
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.I12C1Many2One);
			}
		}

		virtual public void RemoveI12C1Many2One()
		{
			Strategy.RemoveCompositeRole(Meta.I12C1Many2One);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}


		virtual public SearchData SearchData
		{ 
			get
			{
				return (SearchData) Strategy.GetCompositeRole(Meta.SearchData);
			}
			set
			{
				Strategy.SetCompositeRole(Meta.SearchData ,value);
			}
		}

		virtual public bool ExistSearchData
		{
			get
			{
				return Strategy.ExistCompositeRole(Meta.SearchData);
			}
		}

		virtual public void RemoveSearchData()
		{
			Strategy.RemoveCompositeRole(Meta.SearchData);
		}



		virtual public global::Allors.Extent<I2> I2sWhereC2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereC2Many2Many);
			}
		}

		virtual public bool ExistI2sWhereC2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereC2Many2Many);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereC2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereC2Many2One);
			}
		}

		virtual public bool ExistI2sWhereC2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereC2Many2One);
			}
		}


		virtual public I2 I2WhereC2One2Many
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereC2One2Many);
			}
		} 

		virtual public bool ExistI2WhereC2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereC2One2Many);
			}
		}


		virtual public I2 I2WhereC2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereC2One2One);
			}
		} 

		virtual public bool ExistI2WhereC2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereC2One2One);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereC2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereC2Many2One);
			}
		}

		virtual public bool ExistC1sWhereC2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereC2Many2One);
			}
		}


		virtual public C1 C1WhereC2One2Many
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereC2One2Many);
			}
		} 

		virtual public bool ExistC1WhereC2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereC2One2Many);
			}
		}


		virtual public C1 C1WhereC2One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereC2One2One);
			}
		} 

		virtual public bool ExistC1WhereC2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereC2One2One);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereC2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereC2Many2Many);
			}
		}

		virtual public bool ExistC1sWhereC2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereC2Many2Many);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereC2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereC2Many2One);
			}
		}

		virtual public bool ExistC2sWhereC2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereC2Many2One);
			}
		}


		virtual public C2 C2WhereC2One2Many
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereC2One2Many);
			}
		} 

		virtual public bool ExistC2WhereC2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereC2One2Many);
			}
		}


		virtual public C2 C2WhereC2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereC2One2One);
			}
		} 

		virtual public bool ExistC2WhereC2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereC2One2One);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereC2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereC2Many2Many);
			}
		}

		virtual public bool ExistC2sWhereC2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereC2Many2Many);
			}
		}


		virtual public I12 I12WhereC2One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereC2One2One);
			}
		} 

		virtual public bool ExistI12WhereC2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereC2One2One);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereC2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereC2Many2Many);
			}
		}

		virtual public bool ExistI12sWhereC2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereC2Many2Many);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereC2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereC2Many2One);
			}
		}

		virtual public bool ExistI12sWhereC2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereC2Many2One);
			}
		}


		virtual public I1 I1WhereC2One2Many
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereC2One2Many);
			}
		} 

		virtual public bool ExistI1WhereC2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereC2One2Many);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereC2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereC2Many2Many);
			}
		}

		virtual public bool ExistI1sWhereC2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereC2Many2Many);
			}
		}


		virtual public I1 I1WhereC2One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereC2One2One);
			}
		} 

		virtual public bool ExistI1WhereC2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereC2One2One);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereC2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereC2Many2One);
			}
		}

		virtual public bool ExistI1sWhereC2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereC2Many2One);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI2Many2One);
			}
		}

		virtual public bool ExistI2sWhereI2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI2Many2One);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI2Many2any
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI2Many2any);
			}
		}

		virtual public bool ExistI2sWhereI2Many2any
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI2Many2any);
			}
		}


		virtual public I2 I2WhereI2One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI2One2One);
			}
		} 

		virtual public bool ExistI2WhereI2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI2One2One);
			}
		}


		virtual public I2 I2WhereI2One2Many
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI2One2Many);
			}
		} 

		virtual public bool ExistI2WhereI2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI2One2Many);
			}
		}


		virtual public C1 C1WhereI2One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereI2One2One);
			}
		} 

		virtual public bool ExistC1WhereI2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereI2One2One);
			}
		}


		virtual public C1 C1WhereI2One2Many
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereI2One2Many);
			}
		} 

		virtual public bool ExistC1WhereI2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereI2One2Many);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereI2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereI2Many2Many);
			}
		}

		virtual public bool ExistC1sWhereI2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereI2Many2Many);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereI2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereI2Many2One);
			}
		}

		virtual public bool ExistC1sWhereI2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereI2Many2One);
			}
		}


		virtual public C2 C2WhereI2One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereI2One2One);
			}
		} 

		virtual public bool ExistC2WhereI2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereI2One2One);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereI2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereI2Many2Many);
			}
		}

		virtual public bool ExistC2sWhereI2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereI2Many2Many);
			}
		}


		virtual public C2 C2WhereI2One2Many
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereI2One2Many);
			}
		} 

		virtual public bool ExistC2WhereI2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereI2One2Many);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereI2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereI2Many2One);
			}
		}

		virtual public bool ExistC2sWhereI2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereI2Many2One);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI2Many2Many);
			}
		}

		virtual public bool ExistI12sWhereI2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI2Many2Many);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI2Many2One);
			}
		}

		virtual public bool ExistI12sWhereI2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI2Many2One);
			}
		}


		virtual public I12 I12WhereI2One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI2One2One);
			}
		} 

		virtual public bool ExistI12WhereI2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI2One2One);
			}
		}


		virtual public I12 I12WhereI2One2Many
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI2One2Many);
			}
		} 

		virtual public bool ExistI12WhereI2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI2One2Many);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI2Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI2Many2Many);
			}
		}

		virtual public bool ExistI1sWhereI2Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI2Many2Many);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI2Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI2Many2One);
			}
		}

		virtual public bool ExistI1sWhereI2Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI2Many2One);
			}
		}


		virtual public I1 I1WhereI2One2Many
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI2One2Many);
			}
		} 

		virtual public bool ExistI1WhereI2One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI2One2Many);
			}
		}


		virtual public I1 I1WhereI2One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI2One2One);
			}
		} 

		virtual public bool ExistI1WhereI2One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI2One2One);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI12Many2One);
			}
		}

		virtual public bool ExistI2sWhereI12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI12Many2One);
			}
		}


		virtual public I2 I2WhereI12One2Many
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI12One2Many);
			}
		} 

		virtual public bool ExistI2WhereI12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI12One2Many);
			}
		}


		virtual public I2 I2WhereI12One2One
		{ 
			get
			{
				return (I2) Strategy.GetCompositeAssociation(Meta.I2WhereI12One2One);
			}
		} 

		virtual public bool ExistI2WhereI12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I2WhereI12One2One);
			}
		}


		virtual public global::Allors.Extent<I2> I2sWhereI12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I2sWhereI12Many2Many);
			}
		}

		virtual public bool ExistI2sWhereI12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I2sWhereI12Many2Many);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereI12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereI12Many2Many);
			}
		}

		virtual public bool ExistC1sWhereI12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereI12Many2Many);
			}
		}


		virtual public C1 C1WhereI12One2Many
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereI12One2Many);
			}
		} 

		virtual public bool ExistC1WhereI12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereI12One2Many);
			}
		}


		virtual public C1 C1WhereI12One2One
		{ 
			get
			{
				return (C1) Strategy.GetCompositeAssociation(Meta.C1WhereI12One2One);
			}
		} 

		virtual public bool ExistC1WhereI12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C1WhereI12One2One);
			}
		}


		virtual public global::Allors.Extent<C1> C1sWhereI12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C1sWhereI12Many2One);
			}
		}

		virtual public bool ExistC1sWhereI12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C1sWhereI12Many2One);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereI12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereI12Many2One);
			}
		}

		virtual public bool ExistC2sWhereI12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereI12Many2One);
			}
		}


		virtual public C2 C2WhereI12One2One
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereI12One2One);
			}
		} 

		virtual public bool ExistC2WhereI12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereI12One2One);
			}
		}


		virtual public global::Allors.Extent<C2> C2sWhereI12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.C2sWhereI12Many2Many);
			}
		}

		virtual public bool ExistC2sWhereI12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.C2sWhereI12Many2Many);
			}
		}


		virtual public C2 C2WhereI12One2Many
		{ 
			get
			{
				return (C2) Strategy.GetCompositeAssociation(Meta.C2WhereI12One2Many);
			}
		} 

		virtual public bool ExistC2WhereI12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.C2WhereI12One2Many);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI12Many2Many);
			}
		}

		virtual public bool ExistI12sWhereI12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI12Many2Many);
			}
		}


		virtual public I12 I12WhereI12One2Many
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI12One2Many);
			}
		} 

		virtual public bool ExistI12WhereI12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI12One2Many);
			}
		}


		virtual public I12 I12WhereI12One2One
		{ 
			get
			{
				return (I12) Strategy.GetCompositeAssociation(Meta.I12WhereI12One2One);
			}
		} 

		virtual public bool ExistI12WhereI12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I12WhereI12One2One);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereDependency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereDependency);
			}
		}

		virtual public bool ExistI12sWhereDependency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereDependency);
			}
		}


		virtual public global::Allors.Extent<I12> I12sWhereI12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I12sWhereI12Many2One);
			}
		}

		virtual public bool ExistI12sWhereI12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I12sWhereI12Many2One);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI12Many2Many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI12Many2Many);
			}
		}

		virtual public bool ExistI1sWhereI12Many2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI12Many2Many);
			}
		}


		virtual public global::Allors.Extent<I1> I1sWhereI12Many2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(Meta.I1sWhereI12Many2One);
			}
		}

		virtual public bool ExistI1sWhereI12Many2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(Meta.I1sWhereI12Many2One);
			}
		}


		virtual public I1 I1WhereI12One2One
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI12One2One);
			}
		} 

		virtual public bool ExistI1WhereI12One2One
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI12One2One);
			}
		}


		virtual public I1 I1WhereI12One2Many
		{ 
			get
			{
				return (I1) Strategy.GetCompositeAssociation(Meta.I1WhereI12One2Many);
			}
		} 

		virtual public bool ExistI1WhereI12One2Many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(Meta.I1WhereI12One2Many);
			}
		}

	}

	public class C2Meta
	{
		public static readonly C2Meta Instance = new C2Meta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.C2;

		public global::Allors.Meta.RoleType C2AllorsDecimal 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2AllorsDecimal;
			}
		} 
		public global::Allors.Meta.RoleType C2C1One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2C1One2One;
			}
		} 
		public global::Allors.Meta.RoleType C2C2Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2C2Many2One;
			}
		} 
		public global::Allors.Meta.RoleType C2AllorsUnique 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2AllorsUnique;
			}
		} 
		public global::Allors.Meta.RoleType C2I12Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2I12Many2One;
			}
		} 
		public global::Allors.Meta.RoleType C2AllorsDateTime 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2AllorsDateTime;
			}
		} 
		public global::Allors.Meta.RoleType C2I12One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2I12One2One;
			}
		} 
		public global::Allors.Meta.RoleType C2I1Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2I1Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType C2AllorsDouble 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2AllorsDouble;
			}
		} 
		public global::Allors.Meta.RoleType C2I1One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2I1One2Many;
			}
		} 
		public global::Allors.Meta.RoleType C2I2One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2I2One2One;
			}
		} 
		public global::Allors.Meta.RoleType C2AllorsLong 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2AllorsLong;
			}
		} 
		public global::Allors.Meta.RoleType C2AllorsInteger 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2AllorsInteger;
			}
		} 
		public global::Allors.Meta.RoleType C2I2Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2I2Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType C2I12Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2I12Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType C2C2One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2C2One2Many;
			}
		} 
		public global::Allors.Meta.RoleType C2AllorsBoolean 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2AllorsBoolean;
			}
		} 
		public global::Allors.Meta.RoleType C2I1Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2I1Many2One;
			}
		} 
		public global::Allors.Meta.RoleType C2I1One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2I1One2One;
			}
		} 
		public global::Allors.Meta.RoleType C2C1Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2C1Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType C2I12One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2I12One2Many;
			}
		} 
		public global::Allors.Meta.RoleType C2I2One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2I2One2Many;
			}
		} 
		public global::Allors.Meta.RoleType C2C2One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2C2One2One;
			}
		} 
		public global::Allors.Meta.RoleType C2AllorsString 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2AllorsString;
			}
		} 
		public global::Allors.Meta.RoleType C2C1Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2C1Many2One;
			}
		} 
		public global::Allors.Meta.RoleType C2C2Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2C2Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType C2I2Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2I2Many2One;
			}
		} 
		public global::Allors.Meta.RoleType C2C1One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2C1One2Many;
			}
		} 
		public global::Allors.Meta.RoleType C2AllorsBinary 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.C2AllorsBinary;
			}
		} 
		public global::Allors.Meta.RoleType I2I2Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2I2Many2One;
			}
		} 
		public global::Allors.Meta.RoleType I2C1Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2C1Many2One;
			}
		} 
		public global::Allors.Meta.RoleType I2I12Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2I12Many2One;
			}
		} 
		public global::Allors.Meta.RoleType I2AllorsBoolean 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2AllorsBoolean;
			}
		} 
		public global::Allors.Meta.RoleType I2C1One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2C1One2Many;
			}
		} 
		public global::Allors.Meta.RoleType I2C1One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2C1One2One;
			}
		} 
		public global::Allors.Meta.RoleType I2AllorsDecimal 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2AllorsDecimal;
			}
		} 
		public global::Allors.Meta.RoleType I2Many2any 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2I2Many2any;
			}
		} 
		public global::Allors.Meta.RoleType I2AllorsBinary 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2AllorsBinary;
			}
		} 
		public global::Allors.Meta.RoleType I2AllorsUnique 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2AllorsUnique;
			}
		} 
		public global::Allors.Meta.RoleType I2I1Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2I1Many2One;
			}
		} 
		public global::Allors.Meta.RoleType I2AllorsDateTime 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2AllorsDateTime;
			}
		} 
		public global::Allors.Meta.RoleType I2I12One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2I12One2Many;
			}
		} 
		public global::Allors.Meta.RoleType I2I12One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2I12One2One;
			}
		} 
		public global::Allors.Meta.RoleType I2C2Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2C2Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType I2I1Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2I1Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType I2C2Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2C2Many2One;
			}
		} 
		public global::Allors.Meta.RoleType I2AllorsString 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2AllorsString;
			}
		} 
		public global::Allors.Meta.RoleType I2C2One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2C2One2Many;
			}
		} 
		public global::Allors.Meta.RoleType I2I1One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2I1One2One;
			}
		} 
		public global::Allors.Meta.RoleType I2I1One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2I1One2Many;
			}
		} 
		public global::Allors.Meta.RoleType I2I12Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2I12Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType I2I2One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2I2One2One;
			}
		} 
		public global::Allors.Meta.RoleType I2AllorsLong 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2AllorsLong;
			}
		} 
		public global::Allors.Meta.RoleType I2AllorsInteger 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2AllorsInteger;
			}
		} 
		public global::Allors.Meta.RoleType I2I2One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2I2One2Many;
			}
		} 
		public global::Allors.Meta.RoleType I2C1Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2C1Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType I2C2One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2C2One2One;
			}
		} 
		public global::Allors.Meta.RoleType I2AllorsDouble 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I2AllorsDouble;
			}
		} 
		public global::Allors.Meta.RoleType I12AllorsBinary 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12AllorsBinary;
			}
		} 
		public global::Allors.Meta.RoleType I12C2One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12C2One2One;
			}
		} 
		public global::Allors.Meta.RoleType I12AllorsDouble 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12AllorsDouble;
			}
		} 
		public global::Allors.Meta.RoleType I12I1Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I1Many2One;
			}
		} 
		public global::Allors.Meta.RoleType I12AllorsString 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12AllorsString;
			}
		} 
		public global::Allors.Meta.RoleType I12I12Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I12Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType I12AllorsDecimal 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12AllorsDecimal;
			}
		} 
		public global::Allors.Meta.RoleType I12I2Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I2Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType I12C2Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12C2Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType I12I1Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I1Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType I12I12One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I12One2Many;
			}
		} 
		public global::Allors.Meta.RoleType Name 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12Name;
			}
		} 
		public global::Allors.Meta.RoleType I12C1Many2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12C1Many2Many;
			}
		} 
		public global::Allors.Meta.RoleType I12I2Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I2Many2One;
			}
		} 
		public global::Allors.Meta.RoleType I12AllorsUnique 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12AllorsUnique;
			}
		} 
		public global::Allors.Meta.RoleType I12AllorsInteger 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12AllorsInteger;
			}
		} 
		public global::Allors.Meta.RoleType I12I1One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I1One2Many;
			}
		} 
		public global::Allors.Meta.RoleType I12C1One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12C1One2One;
			}
		} 
		public global::Allors.Meta.RoleType I12AllorsLong 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12AllorsLong;
			}
		} 
		public global::Allors.Meta.RoleType I12I12One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I12One2One;
			}
		} 
		public global::Allors.Meta.RoleType I12I2One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I2One2One;
			}
		} 
		public global::Allors.Meta.RoleType Dependency 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12Dependency;
			}
		} 
		public global::Allors.Meta.RoleType I12I2One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I2One2Many;
			}
		} 
		public global::Allors.Meta.RoleType I12C2Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12C2Many2One;
			}
		} 
		public global::Allors.Meta.RoleType I12I12Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I12Many2One;
			}
		} 
		public global::Allors.Meta.RoleType I12AllorsBoolean 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12AllorsBoolean;
			}
		} 
		public global::Allors.Meta.RoleType I12I1One2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12I1One2One;
			}
		} 
		public global::Allors.Meta.RoleType I12AllorsDateTime 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12AllorsDateTime;
			}
		} 
		public global::Allors.Meta.RoleType I12C1One2Many 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12C1One2Many;
			}
		} 
		public global::Allors.Meta.RoleType I12C1Many2One 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.I12C1Many2One;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 
		public global::Allors.Meta.RoleType SearchData 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.SearchableSearchData;
			}
		} 

		public global::Allors.Meta.AssociationType I2sWhereC2Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2C2Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I2sWhereC2Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2C2Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType I2WhereC2One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2C2One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I2WhereC2One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2C2One2One;
			}
		} 
		public global::Allors.Meta.AssociationType C1sWhereC2Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1C2Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType C1WhereC2One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1C2One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C1WhereC2One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1C2One2One;
			}
		} 
		public global::Allors.Meta.AssociationType C1sWhereC2Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1C2Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C2sWhereC2Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2C2Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType C2WhereC2One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2C2One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C2WhereC2One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2C2One2One;
			}
		} 
		public global::Allors.Meta.AssociationType C2sWhereC2Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2C2Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I12WhereC2One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12C2One2One;
			}
		} 
		public global::Allors.Meta.AssociationType I12sWhereC2Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12C2Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I12sWhereC2Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12C2Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType I1WhereC2One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1C2One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I1sWhereC2Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1C2Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I1WhereC2One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1C2One2One;
			}
		} 
		public global::Allors.Meta.AssociationType I1sWhereC2Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1C2Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType I2sWhereI2Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2I2Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType I2sWhereI2Many2any 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2I2Many2any;
			}
		} 
		public global::Allors.Meta.AssociationType I2WhereI2One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2I2One2One;
			}
		} 
		public global::Allors.Meta.AssociationType I2WhereI2One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2I2One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C1WhereI2One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1I2One2One;
			}
		} 
		public global::Allors.Meta.AssociationType C1WhereI2One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1I2One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C1sWhereI2Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1I2Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C1sWhereI2Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1I2Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType C2WhereI2One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2I2One2One;
			}
		} 
		public global::Allors.Meta.AssociationType C2sWhereI2Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2I2Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C2WhereI2One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2I2One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C2sWhereI2Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2I2Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType I12sWhereI2Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12I2Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I12sWhereI2Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12I2Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType I12WhereI2One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12I2One2One;
			}
		} 
		public global::Allors.Meta.AssociationType I12WhereI2One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12I2One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I1sWhereI2Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1I2Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I1sWhereI2Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1I2Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType I1WhereI2One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1I2One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I1WhereI2One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1I2One2One;
			}
		} 
		public global::Allors.Meta.AssociationType I2sWhereI12Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2I12Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType I2WhereI12One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2I12One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I2WhereI12One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2I12One2One;
			}
		} 
		public global::Allors.Meta.AssociationType I2sWhereI12Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I2I12Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C1sWhereI12Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1I12Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C1WhereI12One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1I12One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C1WhereI12One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1I12One2One;
			}
		} 
		public global::Allors.Meta.AssociationType C1sWhereI12Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C1I12Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType C2sWhereI12Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2I12Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType C2WhereI12One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2I12One2One;
			}
		} 
		public global::Allors.Meta.AssociationType C2sWhereI12Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2I12Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType C2WhereI12One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.C2I12One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I12sWhereI12Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12I12Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I12WhereI12One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12I12One2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I12WhereI12One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12I12One2One;
			}
		} 
		public global::Allors.Meta.AssociationType I12sWhereDependency 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12Dependency;
			}
		} 
		public global::Allors.Meta.AssociationType I12sWhereI12Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I12I12Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType I1sWhereI12Many2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1I12Many2Many;
			}
		} 
		public global::Allors.Meta.AssociationType I1sWhereI12Many2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1I12Many2One;
			}
		} 
		public global::Allors.Meta.AssociationType I1WhereI12One2One 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1I12One2One;
			}
		} 
		public global::Allors.Meta.AssociationType I1WhereI12One2Many 
		{
			get
			{
				return global::Allors.Meta.AssociationTypes.I1I12One2Many;
			}
		} 

	}


	public partial class C2Builder : Allors.ObjectBuilder<C2> , I2Builder, global::System.IDisposable
	{		
		public C2Builder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.Decimal? C2AllorsDecimal {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsDecimal(global::System.Decimal? value)
		        {
				    if(this.C2AllorsDecimal!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsDecimal = value;
		            return this;
		        }	

				public C1 C2C1One2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2C1One2One(C1 value)
		        {
		            if(this.C2C1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2C1One2One = value;
		            return this;
		        }		

				
				public C2 C2C2Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2C2Many2One(C2 value)
		        {
		            if(this.C2C2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2C2Many2One = value;
		            return this;
		        }		

				
				public global::System.Guid? C2AllorsUnique {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsUnique(global::System.Guid? value)
		        {
				    if(this.C2AllorsUnique!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsUnique = value;
		            return this;
		        }	

				public I12 C2I12Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2I12Many2One(I12 value)
		        {
		            if(this.C2I12Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2I12Many2One = value;
		            return this;
		        }		

				
				public global::System.DateTime? C2AllorsDateTime {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsDateTime(global::System.DateTime? value)
		        {
				    if(this.C2AllorsDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsDateTime = value;
		            return this;
		        }	

				public I12 C2I12One2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2I12One2One(I12 value)
		        {
		            if(this.C2I12One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2I12One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> C2I1Many2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithC2I1Many2Many(I1 value)
		        {
					if(this.C2I1Many2Many == null)
					{
						this.C2I1Many2Many = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.C2I1Many2Many.Add(value);
		            return this;
		        }		

				
				public global::System.Double? C2AllorsDouble {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsDouble(global::System.Double? value)
		        {
				    if(this.C2AllorsDouble!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsDouble = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I1> C2I1One2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithC2I1One2Many(I1 value)
		        {
					if(this.C2I1One2Many == null)
					{
						this.C2I1One2Many = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.C2I1One2Many.Add(value);
		            return this;
		        }		

				
				public I2 C2I2One2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2I2One2One(I2 value)
		        {
		            if(this.C2I2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2I2One2One = value;
		            return this;
		        }		

				
				public global::System.Int64? C2AllorsLong {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsLong(global::System.Int64? value)
		        {
				    if(this.C2AllorsLong!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsLong = value;
		            return this;
		        }	

				public global::System.Int32? C2AllorsInteger {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsInteger(global::System.Int32? value)
		        {
				    if(this.C2AllorsInteger!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsInteger = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I2> C2I2Many2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithC2I2Many2Many(I2 value)
		        {
					if(this.C2I2Many2Many == null)
					{
						this.C2I2Many2Many = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.C2I2Many2Many.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> C2I12Many2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithC2I12Many2Many(I12 value)
		        {
					if(this.C2I12Many2Many == null)
					{
						this.C2I12Many2Many = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.C2I12Many2Many.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C2> C2C2One2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithC2C2One2Many(C2 value)
		        {
					if(this.C2C2One2Many == null)
					{
						this.C2C2One2Many = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.C2C2One2Many.Add(value);
		            return this;
		        }		

				
				public global::System.Boolean? C2AllorsBoolean {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsBoolean(global::System.Boolean? value)
		        {
				    if(this.C2AllorsBoolean!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsBoolean = value;
		            return this;
		        }	

				public I1 C2I1Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2I1Many2One(I1 value)
		        {
		            if(this.C2I1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2I1Many2One = value;
		            return this;
		        }		

				
				public I1 C2I1One2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2I1One2One(I1 value)
		        {
		            if(this.C2I1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2I1One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C1> C2C1Many2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithC2C1Many2Many(C1 value)
		        {
					if(this.C2C1Many2Many == null)
					{
						this.C2C1Many2Many = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.C2C1Many2Many.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> C2I12One2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithC2I12One2Many(I12 value)
		        {
					if(this.C2I12One2Many == null)
					{
						this.C2I12One2Many = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.C2I12One2Many.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I2> C2I2One2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithC2I2One2Many(I2 value)
		        {
					if(this.C2I2One2Many == null)
					{
						this.C2I2One2Many = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.C2I2One2Many.Add(value);
		            return this;
		        }		

				
				public C2 C2C2One2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2C2One2One(C2 value)
		        {
		            if(this.C2C2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2C2One2One = value;
		            return this;
		        }		

				
				public global::System.String C2AllorsString {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsString(global::System.String value)
		        {
				    if(this.C2AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsString = value;
		            return this;
		        }	

				public C1 C2C1Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2C1Many2One(C1 value)
		        {
		            if(this.C2C1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2C1Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C2> C2C2Many2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithC2C2Many2Many(C2 value)
		        {
					if(this.C2C2Many2Many == null)
					{
						this.C2C2Many2Many = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.C2C2Many2Many.Add(value);
		            return this;
		        }		

				
				public I2 C2I2Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithC2I2Many2One(I2 value)
		        {
		            if(this.C2I2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.C2I2Many2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C1> C2C1One2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithC2C1One2Many(C1 value)
		        {
					if(this.C2C1One2Many == null)
					{
						this.C2C1One2Many = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.C2C1One2Many.Add(value);
		            return this;
		        }		

				
				public global::System.Byte[] C2AllorsBinary {get; set;}

				/// <exclude/>
				public C2Builder WithC2AllorsBinary(global::System.Byte[] value)
		        {
				    if(this.C2AllorsBinary!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.C2AllorsBinary = value;
		            return this;
		        }	

				public I2 I2I2Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2I2Many2One(I2 value)
		        {
		            if(this.I2I2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2I2Many2One = value;
		            return this;
		        }		

				
				public C1 I2C1Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2C1Many2One(C1 value)
		        {
		            if(this.I2C1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2C1Many2One = value;
		            return this;
		        }		

				
				public I12 I2I12Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2I12Many2One(I12 value)
		        {
		            if(this.I2I12Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2I12Many2One = value;
		            return this;
		        }		

				
				public global::System.Boolean? I2AllorsBoolean {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsBoolean(global::System.Boolean? value)
		        {
				    if(this.I2AllorsBoolean!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsBoolean = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C1> I2C1One2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithI2C1One2Many(C1 value)
		        {
					if(this.I2C1One2Many == null)
					{
						this.I2C1One2Many = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I2C1One2Many.Add(value);
		            return this;
		        }		

				
				public C1 I2C1One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2C1One2One(C1 value)
		        {
		            if(this.I2C1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2C1One2One = value;
		            return this;
		        }		

				
				public global::System.Decimal? I2AllorsDecimal {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsDecimal(global::System.Decimal? value)
		        {
				    if(this.I2AllorsDecimal!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsDecimal = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I2> I2Many2any {get; set;}	

				/// <exclude/>
				public C2Builder WithI2Many2any(I2 value)
		        {
					if(this.I2Many2any == null)
					{
						this.I2Many2any = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I2Many2any.Add(value);
		            return this;
		        }		

				
				public global::System.Byte[] I2AllorsBinary {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsBinary(global::System.Byte[] value)
		        {
				    if(this.I2AllorsBinary!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsBinary = value;
		            return this;
		        }	

				public global::System.Guid? I2AllorsUnique {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsUnique(global::System.Guid? value)
		        {
				    if(this.I2AllorsUnique!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsUnique = value;
		            return this;
		        }	

				public I1 I2I1Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2I1Many2One(I1 value)
		        {
		            if(this.I2I1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2I1Many2One = value;
		            return this;
		        }		

				
				public global::System.DateTime? I2AllorsDateTime {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsDateTime(global::System.DateTime? value)
		        {
				    if(this.I2AllorsDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsDateTime = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I12> I2I12One2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithI2I12One2Many(I12 value)
		        {
					if(this.I2I12One2Many == null)
					{
						this.I2I12One2Many = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I2I12One2Many.Add(value);
		            return this;
		        }		

				
				public I12 I2I12One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2I12One2One(I12 value)
		        {
		            if(this.I2I12One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2I12One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C2> I2C2Many2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithI2C2Many2Many(C2 value)
		        {
					if(this.I2C2Many2Many == null)
					{
						this.I2C2Many2Many = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.I2C2Many2Many.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> I2I1Many2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithI2I1Many2Many(I1 value)
		        {
					if(this.I2I1Many2Many == null)
					{
						this.I2I1Many2Many = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I2I1Many2Many.Add(value);
		            return this;
		        }		

				
				public C2 I2C2Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2C2Many2One(C2 value)
		        {
		            if(this.I2C2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2C2Many2One = value;
		            return this;
		        }		

				
				public global::System.String I2AllorsString {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsString(global::System.String value)
		        {
				    if(this.I2AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsString = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C2> I2C2One2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithI2C2One2Many(C2 value)
		        {
					if(this.I2C2One2Many == null)
					{
						this.I2C2One2Many = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.I2C2One2Many.Add(value);
		            return this;
		        }		

				
				public I1 I2I1One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2I1One2One(I1 value)
		        {
		            if(this.I2I1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2I1One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> I2I1One2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithI2I1One2Many(I1 value)
		        {
					if(this.I2I1One2Many == null)
					{
						this.I2I1One2Many = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I2I1One2Many.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> I2I12Many2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithI2I12Many2Many(I12 value)
		        {
					if(this.I2I12Many2Many == null)
					{
						this.I2I12Many2Many = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I2I12Many2Many.Add(value);
		            return this;
		        }		

				
				public I2 I2I2One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2I2One2One(I2 value)
		        {
		            if(this.I2I2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2I2One2One = value;
		            return this;
		        }		

				
				public global::System.Int64? I2AllorsLong {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsLong(global::System.Int64? value)
		        {
				    if(this.I2AllorsLong!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsLong = value;
		            return this;
		        }	

				public global::System.Int32? I2AllorsInteger {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsInteger(global::System.Int32? value)
		        {
				    if(this.I2AllorsInteger!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsInteger = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I2> I2I2One2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithI2I2One2Many(I2 value)
		        {
					if(this.I2I2One2Many == null)
					{
						this.I2I2One2Many = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I2I2One2Many.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C1> I2C1Many2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithI2C1Many2Many(C1 value)
		        {
					if(this.I2C1Many2Many == null)
					{
						this.I2C1Many2Many = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I2C1Many2Many.Add(value);
		            return this;
		        }		

				
				public C2 I2C2One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI2C2One2One(C2 value)
		        {
		            if(this.I2C2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I2C2One2One = value;
		            return this;
		        }		

				
				public global::System.Double? I2AllorsDouble {get; set;}

				/// <exclude/>
				public C2Builder WithI2AllorsDouble(global::System.Double? value)
		        {
				    if(this.I2AllorsDouble!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I2AllorsDouble = value;
		            return this;
		        }	

				public global::System.Byte[] I12AllorsBinary {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsBinary(global::System.Byte[] value)
		        {
				    if(this.I12AllorsBinary!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsBinary = value;
		            return this;
		        }	

				public C2 I12C2One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12C2One2One(C2 value)
		        {
		            if(this.I12C2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C2One2One = value;
		            return this;
		        }		

				
				public global::System.Double? I12AllorsDouble {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsDouble(global::System.Double? value)
		        {
				    if(this.I12AllorsDouble!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsDouble = value;
		            return this;
		        }	

				public I1 I12I1Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12I1Many2One(I1 value)
		        {
		            if(this.I12I1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I1Many2One = value;
		            return this;
		        }		

				
				public global::System.String I12AllorsString {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsString(global::System.String value)
		        {
				    if(this.I12AllorsString!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsString = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I12> I12I12Many2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithI12I12Many2Many(I12 value)
		        {
					if(this.I12I12Many2Many == null)
					{
						this.I12I12Many2Many = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I12I12Many2Many.Add(value);
		            return this;
		        }		

				
				public global::System.Decimal? I12AllorsDecimal {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsDecimal(global::System.Decimal? value)
		        {
				    if(this.I12AllorsDecimal!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsDecimal = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I2> I12I2Many2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithI12I2Many2Many(I2 value)
		        {
					if(this.I12I2Many2Many == null)
					{
						this.I12I2Many2Many = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I12I2Many2Many.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<C2> I12C2Many2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithI12C2Many2Many(C2 value)
		        {
					if(this.I12C2Many2Many == null)
					{
						this.I12C2Many2Many = new global::System.Collections.Generic.List<C2>(); 
					}
		            this.I12C2Many2Many.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I1> I12I1Many2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithI12I1Many2Many(I1 value)
		        {
					if(this.I12I1Many2Many == null)
					{
						this.I12I1Many2Many = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I12I1Many2Many.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> I12I12One2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithI12I12One2Many(I12 value)
		        {
					if(this.I12I12One2Many == null)
					{
						this.I12I12One2Many = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.I12I12One2Many.Add(value);
		            return this;
		        }		

				
				public global::System.String Name {get; set;}

				/// <exclude/>
				public C2Builder WithName(global::System.String value)
		        {
				    if(this.Name!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.Name = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C1> I12C1Many2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithI12C1Many2Many(C1 value)
		        {
					if(this.I12C1Many2Many == null)
					{
						this.I12C1Many2Many = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I12C1Many2Many.Add(value);
		            return this;
		        }		

				
				public I2 I12I2Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12I2Many2One(I2 value)
		        {
		            if(this.I12I2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I2Many2One = value;
		            return this;
		        }		

				
				public global::System.Guid? I12AllorsUnique {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsUnique(global::System.Guid? value)
		        {
				    if(this.I12AllorsUnique!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsUnique = value;
		            return this;
		        }	

				public global::System.Int32? I12AllorsInteger {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsInteger(global::System.Int32? value)
		        {
				    if(this.I12AllorsInteger!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsInteger = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<I1> I12I1One2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithI12I1One2Many(I1 value)
		        {
					if(this.I12I1One2Many == null)
					{
						this.I12I1One2Many = new global::System.Collections.Generic.List<I1>(); 
					}
		            this.I12I1One2Many.Add(value);
		            return this;
		        }		

				
				public C1 I12C1One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12C1One2One(C1 value)
		        {
		            if(this.I12C1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C1One2One = value;
		            return this;
		        }		

				
				public global::System.Int64? I12AllorsLong {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsLong(global::System.Int64? value)
		        {
				    if(this.I12AllorsLong!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsLong = value;
		            return this;
		        }	

				public I12 I12I12One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12I12One2One(I12 value)
		        {
		            if(this.I12I12One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I12One2One = value;
		            return this;
		        }		

				
				public I2 I12I2One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12I2One2One(I2 value)
		        {
		            if(this.I12I2One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I2One2One = value;
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I12> Dependency {get; set;}	

				/// <exclude/>
				public C2Builder WithDependency(I12 value)
		        {
					if(this.Dependency == null)
					{
						this.Dependency = new global::System.Collections.Generic.List<I12>(); 
					}
		            this.Dependency.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<I2> I12I2One2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithI12I2One2Many(I2 value)
		        {
					if(this.I12I2One2Many == null)
					{
						this.I12I2One2Many = new global::System.Collections.Generic.List<I2>(); 
					}
		            this.I12I2One2Many.Add(value);
		            return this;
		        }		

				
				public C2 I12C2Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12C2Many2One(C2 value)
		        {
		            if(this.I12C2Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C2Many2One = value;
		            return this;
		        }		

				
				public I12 I12I12Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12I12Many2One(I12 value)
		        {
		            if(this.I12I12Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I12Many2One = value;
		            return this;
		        }		

				
				public global::System.Boolean? I12AllorsBoolean {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsBoolean(global::System.Boolean? value)
		        {
				    if(this.I12AllorsBoolean!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsBoolean = value;
		            return this;
		        }	

				public I1 I12I1One2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12I1One2One(I1 value)
		        {
		            if(this.I12I1One2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12I1One2One = value;
		            return this;
		        }		

				
				public global::System.DateTime? I12AllorsDateTime {get; set;}

				/// <exclude/>
				public C2Builder WithI12AllorsDateTime(global::System.DateTime? value)
		        {
				    if(this.I12AllorsDateTime!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.I12AllorsDateTime = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<C1> I12C1One2Many {get; set;}	

				/// <exclude/>
				public C2Builder WithI12C1One2Many(C1 value)
		        {
					if(this.I12C1One2Many == null)
					{
						this.I12C1One2Many = new global::System.Collections.Generic.List<C1>(); 
					}
		            this.I12C1One2Many.Add(value);
		            return this;
		        }		

				
				public C1 I12C1Many2One {get; set;}

				/// <exclude/>
				public C2Builder WithI12C1Many2One(C1 value)
		        {
		            if(this.I12C1Many2One!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.I12C1Many2One = value;
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public C2Builder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermission {get; set;}	

				/// <exclude/>
				public C2Builder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermission == null)
					{
						this.DeniedPermission = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermission.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityToken {get; set;}	

				/// <exclude/>
				public C2Builder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityToken == null)
					{
						this.SecurityToken = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityToken.Add(value);
		            return this;
		        }		

				
				public SearchData SearchData {get; set;}

				/// <exclude/>
				public C2Builder WithSearchData(SearchData value)
		        {
		            if(this.SearchData!=null){throw new global::System.ArgumentException("One multicplicity");}
					this.SearchData = value;
		            return this;
		        }		

				

	}

	public partial class C2s : global::Allors.ObjectsBase<C2>
	{
		public static readonly C2Meta Meta = C2Meta.Instance;

		public C2s(Allors.ISession session) : base(session)
		{
		}

		public override Allors.Meta.Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}