// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public partial class Role : RoleAllors , global::Domain.UserInterfaceable, global::Domain.UniquelyIdentifiable
	{
		public Role(Allors.IStrategy allors) : base(allors) {}

		public static Role Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Role) allorsSession.Instantiate(allorsObjectId);		
		}
	}

	[System.Diagnostics.DebuggerNonUserCode]
	public abstract class RoleAllors : Allors.ObjectBase
	{
		protected RoleAllors(Allors.IStrategy allors) : base(allors){}


		virtual public Allors.Extent<global::Domain.Permission> Permissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(RoleMeta.Permission);
			}
			set
			{
				Strategy.SetCompositeRoles(RoleMeta.Permission, value);
			}
		}

		virtual public void AddPermission (global::Domain.Permission value)
		{
			Strategy.AddCompositeRole(RoleMeta.Permission, value);
		}

		virtual public void RemovePermission (global::Domain.Permission value)
		{
			Strategy.RemoveCompositeRole(RoleMeta.Permission,value);
		}

		virtual public bool ExistPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(RoleMeta.Permission);
			}
		}

		virtual public void RemovePermissions()
		{
			Strategy.RemoveCompositeRoles(RoleMeta.Permission);
		}



		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(RoleMeta.Name);
			}
			set
			{
				Strategy.SetUnitRole(RoleMeta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(RoleMeta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(RoleMeta.Name);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(RoleMeta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(RoleMeta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(RoleMeta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(RoleMeta.DisplayName);
		}


		virtual public Allors.Extent<global::Domain.Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(RoleMeta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(RoleMeta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (global::Domain.Permission value)
		{
			Strategy.AddCompositeRole(RoleMeta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (global::Domain.Permission value)
		{
			Strategy.RemoveCompositeRole(RoleMeta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(RoleMeta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(RoleMeta.DeniedPermission);
		}


		virtual public Allors.Extent<global::Domain.SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(RoleMeta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(RoleMeta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.AddCompositeRole(RoleMeta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.RemoveCompositeRole(RoleMeta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(RoleMeta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(RoleMeta.SecurityToken);
		}



		virtual public global::System.Guid? UniqueId 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(RoleMeta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(RoleMeta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(RoleMeta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(RoleMeta.UniqueId);
		}



		virtual public global::Domain.UserGroup UserGroupWhereRole
		{ 
			get
			{
				return (global::Domain.UserGroup) Strategy.GetCompositeAssociation(RoleMeta.UserGroupWhereRole);
			}
		} 

		virtual public bool ExistUserGroupWhereRole
		{
			get
			{
				return Strategy.ExistCompositeAssociation(RoleMeta.UserGroupWhereRole);
			}
		}


		virtual public Allors.Extent<global::Domain.AccessControl> AccessControlsWhereRole
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(RoleMeta.AccessControlsWhereRole);
			}
		}

		virtual public bool ExistAccessControlsWhereRole
		{
			get
			{
				return Strategy.ExistCompositeAssociations(RoleMeta.AccessControlsWhereRole);
			}
		}

	}

	public static class RoleMeta
	{
		public static readonly global::Allors.Meta.Class ObjectType = (Allors.Meta.Class)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("af6fe5f4-e5bc-4099-bcd1-97528af6505d") );

		public static readonly global::Allors.Meta.RoleType Permission = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("51e56ae1-72dc-443f-a2a3-f5aa3650f8d2"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Name = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("934bcbbe-5286-445c-a1bd-e2fcc786c448"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DisplayName = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("6412301d-95ec-44c2-8c71-cc03de5327b9"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DeniedPermission = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("5c70ca14-4601-4c65-9b0d-cb189f90be27"))).RoleType;
		public static readonly global::Allors.Meta.RoleType SecurityToken = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("b816fccd-08e0-46e0-a49c-7213c3604416"))).RoleType;
		public static readonly global::Allors.Meta.RoleType UniqueId = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("e1842d87-8157-40e7-b06e-4375f311f2c3"))).RoleType;

		public static readonly global::Allors.Meta.AssociationType UserGroupWhereRole = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("2f8cf270-a153-4e0d-b844-991d577222d4"))).AssociationType;
		public static readonly global::Allors.Meta.AssociationType AccessControlsWhereRole = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("69a9dae8-678d-4c1c-a464-2e5aa5caf39e"))).AssociationType;

	}
}