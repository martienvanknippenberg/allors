// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public partial class MediaType : MediaTypeAllors , global::Domain.UserInterfaceable
	{
		public MediaType(Allors.IStrategy allors) : base(allors) {}

		public static MediaType Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (MediaType) allorsSession.Instantiate(allorsObjectId);		
		}
	}

	[System.Diagnostics.DebuggerNonUserCode]
	public abstract class MediaTypeAllors : Allors.ObjectBase
	{
		protected MediaTypeAllors(Allors.IStrategy allors) : base(allors){}



		virtual public global::System.String DefaultFileExtension 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(MediaTypeMeta.DefaultFileExtension);
			}
			set
			{
				Strategy.SetUnitRole(MediaTypeMeta.DefaultFileExtension, value);
			}
		}

		virtual public bool ExistDefaultFileExtension{
			get
			{
				return Strategy.ExistUnitRole(MediaTypeMeta.DefaultFileExtension);
			}
		}

		virtual public void RemoveDefaultFileExtension()
		{
			Strategy.RemoveUnitRole(MediaTypeMeta.DefaultFileExtension);
		}



		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(MediaTypeMeta.Name);
			}
			set
			{
				Strategy.SetUnitRole(MediaTypeMeta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(MediaTypeMeta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(MediaTypeMeta.Name);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(MediaTypeMeta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(MediaTypeMeta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(MediaTypeMeta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(MediaTypeMeta.DisplayName);
		}


		virtual public Allors.Extent<global::Domain.Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(MediaTypeMeta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(MediaTypeMeta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (global::Domain.Permission value)
		{
			Strategy.AddCompositeRole(MediaTypeMeta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (global::Domain.Permission value)
		{
			Strategy.RemoveCompositeRole(MediaTypeMeta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(MediaTypeMeta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(MediaTypeMeta.DeniedPermission);
		}


		virtual public Allors.Extent<global::Domain.SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(MediaTypeMeta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(MediaTypeMeta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.AddCompositeRole(MediaTypeMeta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.RemoveCompositeRole(MediaTypeMeta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(MediaTypeMeta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(MediaTypeMeta.SecurityToken);
		}



		virtual public Allors.Extent<global::Domain.Media> MediasWhereMediaType
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(MediaTypeMeta.MediasWhereMediaType);
			}
		}

		virtual public bool ExistMediasWhereMediaType
		{
			get
			{
				return Strategy.ExistCompositeAssociations(MediaTypeMeta.MediasWhereMediaType);
			}
		}

	}

	public static class MediaTypeMeta
	{
		public static readonly global::Allors.Meta.Class ObjectType = (Allors.Meta.Class)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("aa7d61f8-6618-47a0-9cf2-e75dd81dbd5b") );

		public static readonly global::Allors.Meta.RoleType DefaultFileExtension = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("19e52bd9-26cb-4e74-9c28-9f01e684f3da"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Name = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("5fcee025-29fd-42d8-ad5a-75cb88d8aef0"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DisplayName = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("6412301d-95ec-44c2-8c71-cc03de5327b9"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DeniedPermission = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("5c70ca14-4601-4c65-9b0d-cb189f90be27"))).RoleType;
		public static readonly global::Allors.Meta.RoleType SecurityToken = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("b816fccd-08e0-46e0-a49c-7213c3604416"))).RoleType;

		public static readonly global::Allors.Meta.AssociationType MediasWhereMediaType = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("49481792-06f0-49a1-b32f-28d265815a24"))).AssociationType;

	}
}