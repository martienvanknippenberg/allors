// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public partial class ObjectState : ObjectStateAllors , global::Domain.UniquelyIdentifiable
	{
		public ObjectState(Allors.IStrategy allors) : base(allors) {}

		public static ObjectState Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (ObjectState) allorsSession.Instantiate(allorsObjectId);		
		}
	}

	[System.Diagnostics.DebuggerNonUserCode]
	public abstract class ObjectStateAllors : Allors.ObjectBase
	{
		protected ObjectStateAllors(Allors.IStrategy allors) : base(allors){}


		virtual public Allors.Extent<global::Domain.Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(ObjectStateMeta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(ObjectStateMeta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (global::Domain.Permission value)
		{
			Strategy.AddCompositeRole(ObjectStateMeta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (global::Domain.Permission value)
		{
			Strategy.RemoveCompositeRole(ObjectStateMeta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(ObjectStateMeta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(ObjectStateMeta.DeniedPermission);
		}



		virtual public global::System.Guid? UniqueId 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(ObjectStateMeta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(ObjectStateMeta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(ObjectStateMeta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(ObjectStateMeta.UniqueId);
		}



		virtual public Allors.Extent<global::Domain.Transition> TransitionsWhereFromState
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(ObjectStateMeta.TransitionsWhereFromState);
			}
		}

		virtual public bool ExistTransitionsWhereFromState
		{
			get
			{
				return Strategy.ExistCompositeAssociations(ObjectStateMeta.TransitionsWhereFromState);
			}
		}


		virtual public Allors.Extent<global::Domain.Transition> TransitionsWhereToState
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(ObjectStateMeta.TransitionsWhereToState);
			}
		}

		virtual public bool ExistTransitionsWhereToState
		{
			get
			{
				return Strategy.ExistCompositeAssociations(ObjectStateMeta.TransitionsWhereToState);
			}
		}

	}

	public static class ObjectStateMeta
	{
		public static readonly global::Allors.Meta.Class ObjectType = (Allors.Meta.Class)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("f991813f-3146-4431-96d0-554aa2186887") );

		public static readonly global::Allors.Meta.RoleType DeniedPermission = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("59338f0b-40e7-49e8-ba1a-3ecebf96aebe"))).RoleType;
		public static readonly global::Allors.Meta.RoleType UniqueId = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("e1842d87-8157-40e7-b06e-4375f311f2c3"))).RoleType;

		public static readonly global::Allors.Meta.AssociationType TransitionsWhereFromState = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("c6ee1a42-05fa-462b-b04f-811f01c6b646"))).AssociationType;
		public static readonly global::Allors.Meta.AssociationType TransitionsWhereToState = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("dd19e7f8-83b7-4ff1-b475-02c4296b47e4"))).AssociationType;

	}
}