// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public partial class Singleton : SingletonAllors , global::Domain.UserInterfaceable
	{
		public Singleton(Allors.IStrategy allors) : base(allors) {}

		public static Singleton Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Singleton) allorsSession.Instantiate(allorsObjectId);		
		}
	}

	[System.Diagnostics.DebuggerNonUserCode]
	public abstract class SingletonAllors : Allors.ObjectBase
	{
		protected SingletonAllors(Allors.IStrategy allors) : base(allors){}


		virtual public global::Domain.SecurityToken AdministratorSecurityToken
		{ 
			get
			{
				return (global::Domain.SecurityToken) Strategy.GetCompositeRole(SingletonMeta.AdministratorSecurityToken);
			}
			set
			{
				Strategy.SetCompositeRole(SingletonMeta.AdministratorSecurityToken ,value);
			}
		}

		virtual public bool ExistAdministratorSecurityToken
		{
			get
			{
				return Strategy.ExistCompositeRole(SingletonMeta.AdministratorSecurityToken);
			}
		}

		virtual public void RemoveAdministratorSecurityToken()
		{
			Strategy.RemoveCompositeRole(SingletonMeta.AdministratorSecurityToken);
		}


		virtual public global::Domain.User Guest
		{ 
			get
			{
				return (global::Domain.User) Strategy.GetCompositeRole(SingletonMeta.Guest);
			}
			set
			{
				Strategy.SetCompositeRole(SingletonMeta.Guest ,value);
			}
		}

		virtual public bool ExistGuest
		{
			get
			{
				return Strategy.ExistCompositeRole(SingletonMeta.Guest);
			}
		}

		virtual public void RemoveGuest()
		{
			Strategy.RemoveCompositeRole(SingletonMeta.Guest);
		}


		virtual public global::Domain.SecurityToken DefaultSecurityToken
		{ 
			get
			{
				return (global::Domain.SecurityToken) Strategy.GetCompositeRole(SingletonMeta.DefaultSecurityToken);
			}
			set
			{
				Strategy.SetCompositeRole(SingletonMeta.DefaultSecurityToken ,value);
			}
		}

		virtual public bool ExistDefaultSecurityToken
		{
			get
			{
				return Strategy.ExistCompositeRole(SingletonMeta.DefaultSecurityToken);
			}
		}

		virtual public void RemoveDefaultSecurityToken()
		{
			Strategy.RemoveCompositeRole(SingletonMeta.DefaultSecurityToken);
		}


		virtual public global::Domain.PrintQueue DefaultPrintQueue
		{ 
			get
			{
				return (global::Domain.PrintQueue) Strategy.GetCompositeRole(SingletonMeta.DefaultPrintQueue);
			}
			set
			{
				Strategy.SetCompositeRole(SingletonMeta.DefaultPrintQueue ,value);
			}
		}

		virtual public bool ExistDefaultPrintQueue
		{
			get
			{
				return Strategy.ExistCompositeRole(SingletonMeta.DefaultPrintQueue);
			}
		}

		virtual public void RemoveDefaultPrintQueue()
		{
			Strategy.RemoveCompositeRole(SingletonMeta.DefaultPrintQueue);
		}


		virtual public global::Domain.Locale DefaultLocale
		{ 
			get
			{
				return (global::Domain.Locale) Strategy.GetCompositeRole(SingletonMeta.DefaultLocale);
			}
			set
			{
				Strategy.SetCompositeRole(SingletonMeta.DefaultLocale ,value);
			}
		}

		virtual public bool ExistDefaultLocale
		{
			get
			{
				return Strategy.ExistCompositeRole(SingletonMeta.DefaultLocale);
			}
		}

		virtual public void RemoveDefaultLocale()
		{
			Strategy.RemoveCompositeRole(SingletonMeta.DefaultLocale);
		}


		virtual public Allors.Extent<global::Domain.Locale> Locales
		{ 
			get
			{
				return Strategy.GetCompositeRoles(SingletonMeta.Locale);
			}
			set
			{
				Strategy.SetCompositeRoles(SingletonMeta.Locale, value);
			}
		}

		virtual public void AddLocale (global::Domain.Locale value)
		{
			Strategy.AddCompositeRole(SingletonMeta.Locale, value);
		}

		virtual public void RemoveLocale (global::Domain.Locale value)
		{
			Strategy.RemoveCompositeRole(SingletonMeta.Locale,value);
		}

		virtual public bool ExistLocales
		{
			get
			{
				return Strategy.ExistCompositeRoles(SingletonMeta.Locale);
			}
		}

		virtual public void RemoveLocales()
		{
			Strategy.RemoveCompositeRoles(SingletonMeta.Locale);
		}


		virtual public global::Domain.StringTemplate PersonTemplate
		{ 
			get
			{
				return (global::Domain.StringTemplate) Strategy.GetCompositeRole(SingletonMeta.PersonTemplate);
			}
			set
			{
				Strategy.SetCompositeRole(SingletonMeta.PersonTemplate ,value);
			}
		}

		virtual public bool ExistPersonTemplate
		{
			get
			{
				return Strategy.ExistCompositeRole(SingletonMeta.PersonTemplate);
			}
		}

		virtual public void RemovePersonTemplate()
		{
			Strategy.RemoveCompositeRole(SingletonMeta.PersonTemplate);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(SingletonMeta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(SingletonMeta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(SingletonMeta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(SingletonMeta.DisplayName);
		}


		virtual public Allors.Extent<global::Domain.Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(SingletonMeta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(SingletonMeta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (global::Domain.Permission value)
		{
			Strategy.AddCompositeRole(SingletonMeta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (global::Domain.Permission value)
		{
			Strategy.RemoveCompositeRole(SingletonMeta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(SingletonMeta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(SingletonMeta.DeniedPermission);
		}


		virtual public Allors.Extent<global::Domain.SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(SingletonMeta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(SingletonMeta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.AddCompositeRole(SingletonMeta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.RemoveCompositeRole(SingletonMeta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(SingletonMeta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(SingletonMeta.SecurityToken);
		}

	}

	public static class SingletonMeta
	{
		public static readonly global::Allors.Meta.Class ObjectType = (Allors.Meta.Class)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("313b97a5-328c-4600-9dd2-b5bc146fb13b") );

		public static readonly global::Allors.Meta.RoleType AdministratorSecurityToken = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("d9ea02e5-9aa1-4cbe-9318-06324529a923"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Guest = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("f16652b0-b712-43d7-8d4e-34a22487514d"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DefaultSecurityToken = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("f579494b-e550-4be6-9d93-84618ac78704"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DefaultPrintQueue = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("64aed238-7009-4157-8395-7eb58ebf7889"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DefaultLocale = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("9c1634ab-be99-4504-8690-ed4b39fec5bc"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Locale = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("9e5a3413-ed33-474f-adf2-149ad5a80719"))).RoleType;
		public static readonly global::Allors.Meta.RoleType PersonTemplate = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("9ce2ef9b-2376-474d-9aa2-d23fbe1ed236"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DisplayName = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("6412301d-95ec-44c2-8c71-cc03de5327b9"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DeniedPermission = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("5c70ca14-4601-4c65-9b0d-cb189f90be27"))).RoleType;
		public static readonly global::Allors.Meta.RoleType SecurityToken = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("b816fccd-08e0-46e0-a49c-7213c3604416"))).RoleType;

	}
}