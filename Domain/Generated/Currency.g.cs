// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public partial class Currency : CurrencyAllors , global::Domain.UserInterfaceable
	{
		public Currency(Allors.IStrategy allors) : base(allors) {}

		public static Currency Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Currency) allorsSession.Instantiate(allorsObjectId);		
		}
	}

	[System.Diagnostics.DebuggerNonUserCode]
	public abstract class CurrencyAllors : Allors.ObjectBase
	{
		protected CurrencyAllors(Allors.IStrategy allors) : base(allors){}



		virtual public global::System.String IsoCode 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(CurrencyMeta.IsoCode);
			}
			set
			{
				Strategy.SetUnitRole(CurrencyMeta.IsoCode, value);
			}
		}

		virtual public bool ExistIsoCode{
			get
			{
				return Strategy.ExistUnitRole(CurrencyMeta.IsoCode);
			}
		}

		virtual public void RemoveIsoCode()
		{
			Strategy.RemoveUnitRole(CurrencyMeta.IsoCode);
		}



		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(CurrencyMeta.Name);
			}
			set
			{
				Strategy.SetUnitRole(CurrencyMeta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(CurrencyMeta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(CurrencyMeta.Name);
		}



		virtual public global::System.String Symbol 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(CurrencyMeta.Symbol);
			}
			set
			{
				Strategy.SetUnitRole(CurrencyMeta.Symbol, value);
			}
		}

		virtual public bool ExistSymbol{
			get
			{
				return Strategy.ExistUnitRole(CurrencyMeta.Symbol);
			}
		}

		virtual public void RemoveSymbol()
		{
			Strategy.RemoveUnitRole(CurrencyMeta.Symbol);
		}


		virtual public Allors.Extent<global::Domain.LocalisedText> LocalisedNames
		{ 
			get
			{
				return Strategy.GetCompositeRoles(CurrencyMeta.LocalisedName);
			}
			set
			{
				Strategy.SetCompositeRoles(CurrencyMeta.LocalisedName, value);
			}
		}

		virtual public void AddLocalisedName (global::Domain.LocalisedText value)
		{
			Strategy.AddCompositeRole(CurrencyMeta.LocalisedName, value);
		}

		virtual public void RemoveLocalisedName (global::Domain.LocalisedText value)
		{
			Strategy.RemoveCompositeRole(CurrencyMeta.LocalisedName,value);
		}

		virtual public bool ExistLocalisedNames
		{
			get
			{
				return Strategy.ExistCompositeRoles(CurrencyMeta.LocalisedName);
			}
		}

		virtual public void RemoveLocalisedNames()
		{
			Strategy.RemoveCompositeRoles(CurrencyMeta.LocalisedName);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(CurrencyMeta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(CurrencyMeta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(CurrencyMeta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(CurrencyMeta.DisplayName);
		}


		virtual public Allors.Extent<global::Domain.Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(CurrencyMeta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(CurrencyMeta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (global::Domain.Permission value)
		{
			Strategy.AddCompositeRole(CurrencyMeta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (global::Domain.Permission value)
		{
			Strategy.RemoveCompositeRole(CurrencyMeta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(CurrencyMeta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(CurrencyMeta.DeniedPermission);
		}


		virtual public Allors.Extent<global::Domain.SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(CurrencyMeta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(CurrencyMeta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.AddCompositeRole(CurrencyMeta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.RemoveCompositeRole(CurrencyMeta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(CurrencyMeta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(CurrencyMeta.SecurityToken);
		}



		virtual public Allors.Extent<global::Domain.Country> CountriesWhereCurrency
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(CurrencyMeta.CountriesWhereCurrency);
			}
		}

		virtual public bool ExistCountriesWhereCurrency
		{
			get
			{
				return Strategy.ExistCompositeAssociations(CurrencyMeta.CountriesWhereCurrency);
			}
		}

	}

	public static class CurrencyMeta
	{
		public static readonly global::Allors.Meta.Class ObjectType = (Allors.Meta.Class)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("fd397adf-40b4-4ef8-b449-dd5a24273df3") );

		public static readonly global::Allors.Meta.RoleType IsoCode = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("294a4bdc-f03a-47a2-a649-419e6b9021a3"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Name = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("74c8308b-1b76-4218-9532-f01c9d1e146b"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Symbol = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("82797074-8d6c-4d61-a885-34ae7133a503"))).RoleType;
		public static readonly global::Allors.Meta.RoleType LocalisedName = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("e9fc0472-cf7a-4e02-b061-cb42b6f5c273"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DisplayName = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("6412301d-95ec-44c2-8c71-cc03de5327b9"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DeniedPermission = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("5c70ca14-4601-4c65-9b0d-cb189f90be27"))).RoleType;
		public static readonly global::Allors.Meta.RoleType SecurityToken = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("b816fccd-08e0-46e0-a49c-7213c3604416"))).RoleType;

		public static readonly global::Allors.Meta.AssociationType CountriesWhereCurrency = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("62009cef-7424-4ec0-8953-e92b3cd6639d"))).AssociationType;

	}
}