// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public partial class From : FromAllors , global::Domain.UserInterfaceable
	{
		public From(Allors.IStrategy allors) : base(allors) {}

		public static From Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (From) allorsSession.Instantiate(allorsObjectId);		
		}
	}

	[System.Diagnostics.DebuggerNonUserCode]
	public abstract class FromAllors : Allors.ObjectBase
	{
		protected FromAllors(Allors.IStrategy allors) : base(allors){}


		virtual public Allors.Extent<global::Domain.To> Tos
		{ 
			get
			{
				return Strategy.GetCompositeRoles(FromMeta.To);
			}
			set
			{
				Strategy.SetCompositeRoles(FromMeta.To, value);
			}
		}

		virtual public void AddTo (global::Domain.To value)
		{
			Strategy.AddCompositeRole(FromMeta.To, value);
		}

		virtual public void RemoveTo (global::Domain.To value)
		{
			Strategy.RemoveCompositeRole(FromMeta.To,value);
		}

		virtual public bool ExistTos
		{
			get
			{
				return Strategy.ExistCompositeRoles(FromMeta.To);
			}
		}

		virtual public void RemoveTos()
		{
			Strategy.RemoveCompositeRoles(FromMeta.To);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(FromMeta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(FromMeta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(FromMeta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(FromMeta.DisplayName);
		}


		virtual public Allors.Extent<global::Domain.Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(FromMeta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(FromMeta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (global::Domain.Permission value)
		{
			Strategy.AddCompositeRole(FromMeta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (global::Domain.Permission value)
		{
			Strategy.RemoveCompositeRole(FromMeta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(FromMeta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(FromMeta.DeniedPermission);
		}


		virtual public Allors.Extent<global::Domain.SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(FromMeta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(FromMeta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.AddCompositeRole(FromMeta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.RemoveCompositeRole(FromMeta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(FromMeta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(FromMeta.SecurityToken);
		}

	}

	public static class FromMeta
	{
		public static readonly global::Allors.Meta.Class ObjectType = (Allors.Meta.Class)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("6217b428-4ad0-4f7f-ad4b-e334cf0b3ab1") );

		public static readonly global::Allors.Meta.RoleType To = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("d9a9896d-e175-410a-9916-9261d83aa229"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DisplayName = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("6412301d-95ec-44c2-8c71-cc03de5327b9"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DeniedPermission = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("5c70ca14-4601-4c65-9b0d-cb189f90be27"))).RoleType;
		public static readonly global::Allors.Meta.RoleType SecurityToken = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("b816fccd-08e0-46e0-a49c-7213c3604416"))).RoleType;

	}
}