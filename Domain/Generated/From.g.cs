// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Allors.Domain
{
    using Allors.Meta;

    [System.Diagnostics.DebuggerNonUserCode]
	public partial class From : Allors.ObjectBase , UserInterfaceable
	{
		public static readonly FromMeta Meta = FromMeta.Instance;

		public From(Allors.IStrategy allors) : base(allors) {}

		public static From Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (From) allorsSession.Instantiate(allorsObjectId);		
		}



		virtual public global::Allors.Extent<To> Tos
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.To);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.To, value);
			}
		}

		virtual public void AddTo (To value)
		{
			Strategy.AddCompositeRole(Meta.To, value);
		}

		virtual public void RemoveTo (To value)
		{
			Strategy.RemoveCompositeRole(Meta.To,value);
		}

		virtual public bool ExistTos
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.To);
			}
		}

		virtual public void RemoveTos()
		{
			Strategy.RemoveCompositeRoles(Meta.To);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(Meta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(Meta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(Meta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(Meta.DisplayName);
		}


		virtual public global::Allors.Extent<Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (Permission value)
		{
			Strategy.AddCompositeRole(Meta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (Permission value)
		{
			Strategy.RemoveCompositeRole(Meta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(Meta.DeniedPermission);
		}


		virtual public global::Allors.Extent<SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(Meta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(Meta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (SecurityToken value)
		{
			Strategy.AddCompositeRole(Meta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (SecurityToken value)
		{
			Strategy.RemoveCompositeRole(Meta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(Meta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(Meta.SecurityToken);
		}

	}

	public class FromMeta
	{
		public static readonly FromMeta Instance = new FromMeta();

		public global::Allors.Meta.Class ObjectType = global::Allors.Meta.Classes.From;

		public global::Allors.Meta.RoleType To 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.FromTo;
			}
		} 
		public global::Allors.Meta.RoleType DisplayName 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.UserInterfaceableDisplayName;
			}
		} 
		public global::Allors.Meta.RoleType DeniedPermission 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectDeniedPermission;
			}
		} 
		public global::Allors.Meta.RoleType SecurityToken 
		{
			get
			{
				return global::Allors.Meta.RoleTypes.AccessControlledObjectSecurityToken;
			}
		} 

	}


	public partial class FromBuilder : Allors.ObjectBuilder<From> , UserInterfaceableBuilder, global::System.IDisposable
	{		
		public FromBuilder(Allors.ISession session) : base(session)
	    {
	    }

				public global::System.Collections.Generic.List<To> To {get; set;}	

				/// <exclude/>
				public FromBuilder WithTo(To value)
		        {
					if(this.To == null)
					{
						this.To = new global::System.Collections.Generic.List<To>(); 
					}
		            this.To.Add(value);
		            return this;
		        }		

				
				public global::System.String DisplayName {get; set;}

				/// <exclude/>
				public FromBuilder WithDisplayName(global::System.String value)
		        {
				    if(this.DisplayName!=null){throw new global::System.ArgumentException("One multicplicity");}
		            this.DisplayName = value;
		            return this;
		        }	

				public global::System.Collections.Generic.List<Permission> DeniedPermission {get; set;}	

				/// <exclude/>
				public FromBuilder WithDeniedPermission(Permission value)
		        {
					if(this.DeniedPermission == null)
					{
						this.DeniedPermission = new global::System.Collections.Generic.List<Permission>(); 
					}
		            this.DeniedPermission.Add(value);
		            return this;
		        }		

				
				public global::System.Collections.Generic.List<SecurityToken> SecurityToken {get; set;}	

				/// <exclude/>
				public FromBuilder WithSecurityToken(SecurityToken value)
		        {
					if(this.SecurityToken == null)
					{
						this.SecurityToken = new global::System.Collections.Generic.List<SecurityToken>(); 
					}
		            this.SecurityToken.Add(value);
		            return this;
		        }		

				

	}

	public partial class Froms : global::Allors.ObjectsBase<From>
	{
		public static readonly FromMeta Meta = FromMeta.Instance;

		public Froms(Allors.ISession session) : base(session)
		{
		}

		public override Composite ObjectType
		{
			get
			{
				return Meta.ObjectType;
			}
		}
	}

}