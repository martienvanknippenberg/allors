// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public partial class Organisation : OrganisationAllors , global::Domain.Searchable, global::Domain.UniquelyIdentifiable, global::Domain.UserInterfaceable, global::Domain.SearchResult
	{
		public Organisation(Allors.IStrategy allors) : base(allors) {}

		public static Organisation Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Organisation) allorsSession.Instantiate(allorsObjectId);		
		}
	}

	[System.Diagnostics.DebuggerNonUserCode]
	public abstract class OrganisationAllors : Allors.ObjectBase
	{
		protected OrganisationAllors(Allors.IStrategy allors) : base(allors){}


		virtual public Allors.Extent<global::Domain.Person> Shareholders
		{ 
			get
			{
				return Strategy.GetCompositeRoles(OrganisationMeta.Shareholder);
			}
			set
			{
				Strategy.SetCompositeRoles(OrganisationMeta.Shareholder, value);
			}
		}

		virtual public void AddShareholder (global::Domain.Person value)
		{
			Strategy.AddCompositeRole(OrganisationMeta.Shareholder, value);
		}

		virtual public void RemoveShareholder (global::Domain.Person value)
		{
			Strategy.RemoveCompositeRole(OrganisationMeta.Shareholder,value);
		}

		virtual public bool ExistShareholders
		{
			get
			{
				return Strategy.ExistCompositeRoles(OrganisationMeta.Shareholder);
			}
		}

		virtual public void RemoveShareholders()
		{
			Strategy.RemoveCompositeRoles(OrganisationMeta.Shareholder);
		}



		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(OrganisationMeta.Name);
			}
			set
			{
				Strategy.SetUnitRole(OrganisationMeta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(OrganisationMeta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(OrganisationMeta.Name);
		}



		virtual public global::System.String Description 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(OrganisationMeta.Description);
			}
			set
			{
				Strategy.SetUnitRole(OrganisationMeta.Description, value);
			}
		}

		virtual public bool ExistDescription{
			get
			{
				return Strategy.ExistUnitRole(OrganisationMeta.Description);
			}
		}

		virtual public void RemoveDescription()
		{
			Strategy.RemoveUnitRole(OrganisationMeta.Description);
		}


		virtual public Allors.Extent<global::Domain.Person> Employees
		{ 
			get
			{
				return Strategy.GetCompositeRoles(OrganisationMeta.Employee);
			}
			set
			{
				Strategy.SetCompositeRoles(OrganisationMeta.Employee, value);
			}
		}

		virtual public void AddEmployee (global::Domain.Person value)
		{
			Strategy.AddCompositeRole(OrganisationMeta.Employee, value);
		}

		virtual public void RemoveEmployee (global::Domain.Person value)
		{
			Strategy.RemoveCompositeRole(OrganisationMeta.Employee,value);
		}

		virtual public bool ExistEmployees
		{
			get
			{
				return Strategy.ExistCompositeRoles(OrganisationMeta.Employee);
			}
		}

		virtual public void RemoveEmployees()
		{
			Strategy.RemoveCompositeRoles(OrganisationMeta.Employee);
		}



		virtual public global::System.Boolean? Incorporated 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(OrganisationMeta.Incorporated);
			}
			set
			{
				Strategy.SetUnitRole(OrganisationMeta.Incorporated, value);
			}
		}

		virtual public bool ExistIncorporated{
			get
			{
				return Strategy.ExistUnitRole(OrganisationMeta.Incorporated);
			}
		}

		virtual public void RemoveIncorporated()
		{
			Strategy.RemoveUnitRole(OrganisationMeta.Incorporated);
		}



		virtual public global::System.Boolean? IsSupplier 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(OrganisationMeta.IsSupplier);
			}
			set
			{
				Strategy.SetUnitRole(OrganisationMeta.IsSupplier, value);
			}
		}

		virtual public bool ExistIsSupplier{
			get
			{
				return Strategy.ExistUnitRole(OrganisationMeta.IsSupplier);
			}
		}

		virtual public void RemoveIsSupplier()
		{
			Strategy.RemoveUnitRole(OrganisationMeta.IsSupplier);
		}



		virtual public global::System.DateTime? IncorporationDate 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(OrganisationMeta.IncorporationDate);
			}
			set
			{
				Strategy.SetUnitRole(OrganisationMeta.IncorporationDate, value);
			}
		}

		virtual public bool ExistIncorporationDate{
			get
			{
				return Strategy.ExistUnitRole(OrganisationMeta.IncorporationDate);
			}
		}

		virtual public void RemoveIncorporationDate()
		{
			Strategy.RemoveUnitRole(OrganisationMeta.IncorporationDate);
		}


		virtual public Allors.Extent<global::Domain.Address> Addresses
		{ 
			get
			{
				return Strategy.GetCompositeRoles(OrganisationMeta.Address);
			}
			set
			{
				Strategy.SetCompositeRoles(OrganisationMeta.Address, value);
			}
		}

		virtual public void AddAddress (global::Domain.Address value)
		{
			Strategy.AddCompositeRole(OrganisationMeta.Address, value);
		}

		virtual public void RemoveAddress (global::Domain.Address value)
		{
			Strategy.RemoveCompositeRole(OrganisationMeta.Address,value);
		}

		virtual public bool ExistAddresses
		{
			get
			{
				return Strategy.ExistCompositeRoles(OrganisationMeta.Address);
			}
		}

		virtual public void RemoveAddresses()
		{
			Strategy.RemoveCompositeRoles(OrganisationMeta.Address);
		}


		virtual public global::Domain.Person Owner
		{ 
			get
			{
				return (global::Domain.Person) Strategy.GetCompositeRole(OrganisationMeta.Owner);
			}
			set
			{
				Strategy.SetCompositeRole(OrganisationMeta.Owner ,value);
			}
		}

		virtual public bool ExistOwner
		{
			get
			{
				return Strategy.ExistCompositeRole(OrganisationMeta.Owner);
			}
		}

		virtual public void RemoveOwner()
		{
			Strategy.RemoveCompositeRole(OrganisationMeta.Owner);
		}


		virtual public global::Domain.Media Logo
		{ 
			get
			{
				return (global::Domain.Media) Strategy.GetCompositeRole(OrganisationMeta.Logo);
			}
			set
			{
				Strategy.SetCompositeRole(OrganisationMeta.Logo ,value);
			}
		}

		virtual public bool ExistLogo
		{
			get
			{
				return Strategy.ExistCompositeRole(OrganisationMeta.Logo);
			}
		}

		virtual public void RemoveLogo()
		{
			Strategy.RemoveCompositeRole(OrganisationMeta.Logo);
		}



		virtual public global::System.String Size 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(OrganisationMeta.Size);
			}
			set
			{
				Strategy.SetUnitRole(OrganisationMeta.Size, value);
			}
		}

		virtual public bool ExistSize{
			get
			{
				return Strategy.ExistUnitRole(OrganisationMeta.Size);
			}
		}

		virtual public void RemoveSize()
		{
			Strategy.RemoveUnitRole(OrganisationMeta.Size);
		}


		virtual public global::Domain.SearchData SearchData
		{ 
			get
			{
				return (global::Domain.SearchData) Strategy.GetCompositeRole(OrganisationMeta.SearchData);
			}
			set
			{
				Strategy.SetCompositeRole(OrganisationMeta.SearchData ,value);
			}
		}

		virtual public bool ExistSearchData
		{
			get
			{
				return Strategy.ExistCompositeRole(OrganisationMeta.SearchData);
			}
		}

		virtual public void RemoveSearchData()
		{
			Strategy.RemoveCompositeRole(OrganisationMeta.SearchData);
		}



		virtual public global::System.Guid? UniqueId 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(OrganisationMeta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(OrganisationMeta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(OrganisationMeta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(OrganisationMeta.UniqueId);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(OrganisationMeta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(OrganisationMeta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(OrganisationMeta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(OrganisationMeta.DisplayName);
		}


		virtual public Allors.Extent<global::Domain.Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(OrganisationMeta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(OrganisationMeta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (global::Domain.Permission value)
		{
			Strategy.AddCompositeRole(OrganisationMeta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (global::Domain.Permission value)
		{
			Strategy.RemoveCompositeRole(OrganisationMeta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(OrganisationMeta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(OrganisationMeta.DeniedPermission);
		}


		virtual public Allors.Extent<global::Domain.SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(OrganisationMeta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(OrganisationMeta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.AddCompositeRole(OrganisationMeta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.RemoveCompositeRole(OrganisationMeta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(OrganisationMeta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(OrganisationMeta.SecurityToken);
		}



		virtual public Allors.Extent<global::Domain.BadUI> BadUIsWhereCompanyOne
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(OrganisationMeta.BadUIsWhereCompanyOne);
			}
		}

		virtual public bool ExistBadUIsWhereCompanyOne
		{
			get
			{
				return Strategy.ExistCompositeAssociations(OrganisationMeta.BadUIsWhereCompanyOne);
			}
		}


		virtual public Allors.Extent<global::Domain.BadUI> BadUIsWhereCompanyMany
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(OrganisationMeta.BadUIsWhereCompanyMany);
			}
		}

		virtual public bool ExistBadUIsWhereCompanyMany
		{
			get
			{
				return Strategy.ExistCompositeAssociations(OrganisationMeta.BadUIsWhereCompanyMany);
			}
		}

	}

	public static class OrganisationMeta
	{
		public static readonly global::Allors.Meta.Class ObjectType = (Allors.Meta.Class)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("3a5dcec7-308f-48c7-afee-35d38415aa0b") );

		public static readonly global::Allors.Meta.RoleType Shareholder = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("15f33fa4-c878-45a0-b40c-c5214bce350b"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Name = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("2cc74901-cda5-4185-bcd8-d51c745a8437"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Description = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("2cfea5d4-e893-4264-a966-a68716839acd"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Employee = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("49b96f79-c33d-4847-8c64-d50a6adb4985"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Incorporated = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("5fa25b53-e2a7-44c8-b6ff-f9575abb911d"))).RoleType;
		public static readonly global::Allors.Meta.RoleType IsSupplier = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("68c61cea-4e6e-4ed5-819b-7ec794a10870"))).RoleType;
		public static readonly global::Allors.Meta.RoleType IncorporationDate = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("7046c2b4-d458-4343-8446-d23d9c837c84"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Address = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("73f23588-1444-416d-b43c-b3384ca87bfc"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Owner = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("845ff004-516f-4ad5-9870-3d0e966a9f7d"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Logo = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("b201d2a0-2335-47a1-aa8d-8416e89a9fec"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Size = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("bac702b8-7874-45c3-a410-102e1caea4a7"))).RoleType;
		public static readonly global::Allors.Meta.RoleType SearchData = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("5f38c771-10db-456e-ac31-6833f7087b50"))).RoleType;
		public static readonly global::Allors.Meta.RoleType UniqueId = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("e1842d87-8157-40e7-b06e-4375f311f2c3"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DisplayName = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("6412301d-95ec-44c2-8c71-cc03de5327b9"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DeniedPermission = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("5c70ca14-4601-4c65-9b0d-cb189f90be27"))).RoleType;
		public static readonly global::Allors.Meta.RoleType SecurityToken = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("b816fccd-08e0-46e0-a49c-7213c3604416"))).RoleType;

		public static readonly global::Allors.Meta.AssociationType BadUIsWhereCompanyOne = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("9ebbb9d1-2ca7-4a7f-9f18-f25c05fd28c1"))).AssociationType;
		public static readonly global::Allors.Meta.AssociationType BadUIsWhereCompanyMany = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("a8621048-48b5-43c4-b10b-17225958d177"))).AssociationType;

	}
}