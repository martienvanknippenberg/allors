// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public partial class Permission : PermissionAllors , global::Domain.UserInterfaceable
	{
		public Permission(Allors.IStrategy allors) : base(allors) {}

		public static Permission Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Permission) allorsSession.Instantiate(allorsObjectId);		
		}
	}

	[System.Diagnostics.DebuggerNonUserCode]
	public abstract class PermissionAllors : Allors.ObjectBase
	{
		protected PermissionAllors(Allors.IStrategy allors) : base(allors){}



		virtual public global::System.Guid? OperandTypePointer 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(PermissionMeta.OperandTypePointer);
			}
			set
			{
				Strategy.SetUnitRole(PermissionMeta.OperandTypePointer, value);
			}
		}

		virtual public bool ExistOperandTypePointer{
			get
			{
				return Strategy.ExistUnitRole(PermissionMeta.OperandTypePointer);
			}
		}

		virtual public void RemoveOperandTypePointer()
		{
			Strategy.RemoveUnitRole(PermissionMeta.OperandTypePointer);
		}



		virtual public global::System.Guid? ConcreteClassPointer 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(PermissionMeta.ConcreteClassPointer);
			}
			set
			{
				Strategy.SetUnitRole(PermissionMeta.ConcreteClassPointer, value);
			}
		}

		virtual public bool ExistConcreteClassPointer{
			get
			{
				return Strategy.ExistUnitRole(PermissionMeta.ConcreteClassPointer);
			}
		}

		virtual public void RemoveConcreteClassPointer()
		{
			Strategy.RemoveUnitRole(PermissionMeta.ConcreteClassPointer);
		}



		virtual public global::System.Int32? OperationEnum 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(PermissionMeta.OperationEnum);
			}
			set
			{
				Strategy.SetUnitRole(PermissionMeta.OperationEnum, value);
			}
		}

		virtual public bool ExistOperationEnum{
			get
			{
				return Strategy.ExistUnitRole(PermissionMeta.OperationEnum);
			}
		}

		virtual public void RemoveOperationEnum()
		{
			Strategy.RemoveUnitRole(PermissionMeta.OperationEnum);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(PermissionMeta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(PermissionMeta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(PermissionMeta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(PermissionMeta.DisplayName);
		}


		virtual public Allors.Extent<global::Domain.Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(PermissionMeta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(PermissionMeta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (global::Domain.Permission value)
		{
			Strategy.AddCompositeRole(PermissionMeta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (global::Domain.Permission value)
		{
			Strategy.RemoveCompositeRole(PermissionMeta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(PermissionMeta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(PermissionMeta.DeniedPermission);
		}


		virtual public Allors.Extent<global::Domain.SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(PermissionMeta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(PermissionMeta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.AddCompositeRole(PermissionMeta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.RemoveCompositeRole(PermissionMeta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(PermissionMeta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(PermissionMeta.SecurityToken);
		}



		virtual public Allors.Extent<global::Domain.Role> RolesWherePermission
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(PermissionMeta.RolesWherePermission);
			}
		}

		virtual public bool ExistRolesWherePermission
		{
			get
			{
				return Strategy.ExistCompositeAssociations(PermissionMeta.RolesWherePermission);
			}
		}


		virtual public Allors.Extent<global::Domain.AccessControlledObject> AccessControlledObjectsWhereDeniedPermission
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(PermissionMeta.AccessControlledObjectsWhereDeniedPermission);
			}
		}

		virtual public bool ExistAccessControlledObjectsWhereDeniedPermission
		{
			get
			{
				return Strategy.ExistCompositeAssociations(PermissionMeta.AccessControlledObjectsWhereDeniedPermission);
			}
		}


		virtual public Allors.Extent<global::Domain.ObjectState> ObjectStatesWhereDeniedPermission
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(PermissionMeta.ObjectStatesWhereDeniedPermission);
			}
		}

		virtual public bool ExistObjectStatesWhereDeniedPermission
		{
			get
			{
				return Strategy.ExistCompositeAssociations(PermissionMeta.ObjectStatesWhereDeniedPermission);
			}
		}

	}

	public static class PermissionMeta
	{
		public static readonly global::Allors.Meta.Class ObjectType = (Allors.Meta.Class)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("7fded183-3337-4196-afb0-3266377944bc") );

		public static readonly global::Allors.Meta.RoleType OperandTypePointer = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("097bb620-f068-440e-8d02-ef9d8be1d0f0"))).RoleType;
		public static readonly global::Allors.Meta.RoleType ConcreteClassPointer = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("29b80857-e51b-4dec-b859-887ed74b1626"))).RoleType;
		public static readonly global::Allors.Meta.RoleType OperationEnum = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("9d73d437-4918-4f20-b9a7-3ce23a04bd7b"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DisplayName = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("6412301d-95ec-44c2-8c71-cc03de5327b9"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DeniedPermission = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("5c70ca14-4601-4c65-9b0d-cb189f90be27"))).RoleType;
		public static readonly global::Allors.Meta.RoleType SecurityToken = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("b816fccd-08e0-46e0-a49c-7213c3604416"))).RoleType;

		public static readonly global::Allors.Meta.AssociationType RolesWherePermission = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("51e56ae1-72dc-443f-a2a3-f5aa3650f8d2"))).AssociationType;
		public static readonly global::Allors.Meta.AssociationType AccessControlledObjectsWhereDeniedPermission = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("5c70ca14-4601-4c65-9b0d-cb189f90be27"))).AssociationType;
		public static readonly global::Allors.Meta.AssociationType ObjectStatesWhereDeniedPermission = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("59338f0b-40e7-49e8-ba1a-3ecebf96aebe"))).AssociationType;

	}
}