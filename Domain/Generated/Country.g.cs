// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public partial class Country : CountryAllors , global::Domain.UserInterfaceable, global::Domain.Searchable
	{
		public Country(Allors.IStrategy allors) : base(allors) {}

		public static Country Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Country) allorsSession.Instantiate(allorsObjectId);		
		}
	}

	[System.Diagnostics.DebuggerNonUserCode]
	public abstract class CountryAllors : Allors.ObjectBase
	{
		protected CountryAllors(Allors.IStrategy allors) : base(allors){}


		virtual public global::Domain.Currency Currency
		{ 
			get
			{
				return (global::Domain.Currency) Strategy.GetCompositeRole(CountryMeta.Currency);
			}
			set
			{
				Strategy.SetCompositeRole(CountryMeta.Currency ,value);
			}
		}

		virtual public bool ExistCurrency
		{
			get
			{
				return Strategy.ExistCompositeRole(CountryMeta.Currency);
			}
		}

		virtual public void RemoveCurrency()
		{
			Strategy.RemoveCompositeRole(CountryMeta.Currency);
		}



		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(CountryMeta.Name);
			}
			set
			{
				Strategy.SetUnitRole(CountryMeta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(CountryMeta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(CountryMeta.Name);
		}


		virtual public Allors.Extent<global::Domain.LocalisedText> LocalisedNames
		{ 
			get
			{
				return Strategy.GetCompositeRoles(CountryMeta.LocalisedName);
			}
			set
			{
				Strategy.SetCompositeRoles(CountryMeta.LocalisedName, value);
			}
		}

		virtual public void AddLocalisedName (global::Domain.LocalisedText value)
		{
			Strategy.AddCompositeRole(CountryMeta.LocalisedName, value);
		}

		virtual public void RemoveLocalisedName (global::Domain.LocalisedText value)
		{
			Strategy.RemoveCompositeRole(CountryMeta.LocalisedName,value);
		}

		virtual public bool ExistLocalisedNames
		{
			get
			{
				return Strategy.ExistCompositeRoles(CountryMeta.LocalisedName);
			}
		}

		virtual public void RemoveLocalisedNames()
		{
			Strategy.RemoveCompositeRoles(CountryMeta.LocalisedName);
		}



		virtual public global::System.String IsoCode 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(CountryMeta.IsoCode);
			}
			set
			{
				Strategy.SetUnitRole(CountryMeta.IsoCode, value);
			}
		}

		virtual public bool ExistIsoCode{
			get
			{
				return Strategy.ExistUnitRole(CountryMeta.IsoCode);
			}
		}

		virtual public void RemoveIsoCode()
		{
			Strategy.RemoveUnitRole(CountryMeta.IsoCode);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(CountryMeta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(CountryMeta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(CountryMeta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(CountryMeta.DisplayName);
		}


		virtual public Allors.Extent<global::Domain.Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(CountryMeta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(CountryMeta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (global::Domain.Permission value)
		{
			Strategy.AddCompositeRole(CountryMeta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (global::Domain.Permission value)
		{
			Strategy.RemoveCompositeRole(CountryMeta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(CountryMeta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(CountryMeta.DeniedPermission);
		}


		virtual public Allors.Extent<global::Domain.SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(CountryMeta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(CountryMeta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.AddCompositeRole(CountryMeta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.RemoveCompositeRole(CountryMeta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(CountryMeta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(CountryMeta.SecurityToken);
		}


		virtual public global::Domain.SearchData SearchData
		{ 
			get
			{
				return (global::Domain.SearchData) Strategy.GetCompositeRole(CountryMeta.SearchData);
			}
			set
			{
				Strategy.SetCompositeRole(CountryMeta.SearchData ,value);
			}
		}

		virtual public bool ExistSearchData
		{
			get
			{
				return Strategy.ExistCompositeRole(CountryMeta.SearchData);
			}
		}

		virtual public void RemoveSearchData()
		{
			Strategy.RemoveCompositeRole(CountryMeta.SearchData);
		}



		virtual public Allors.Extent<global::Domain.Locale> LocalesWhereCountry
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(CountryMeta.LocalesWhereCountry);
			}
		}

		virtual public bool ExistLocalesWhereCountry
		{
			get
			{
				return Strategy.ExistCompositeAssociations(CountryMeta.LocalesWhereCountry);
			}
		}


		virtual public Allors.Extent<global::Domain.Place> PlacesWhereCountry
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(CountryMeta.PlacesWhereCountry);
			}
		}

		virtual public bool ExistPlacesWhereCountry
		{
			get
			{
				return Strategy.ExistCompositeAssociations(CountryMeta.PlacesWhereCountry);
			}
		}

	}

	public static class CountryMeta
	{
		public static readonly global::Allors.Meta.Class ObjectType = (Allors.Meta.Class)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("c22bf60e-6428-4d10-8194-94f7be396f28") );

		public static readonly global::Allors.Meta.RoleType Currency = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("62009cef-7424-4ec0-8953-e92b3cd6639d"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Name = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("6b9c977f-b394-440e-9781-5d56733b60da"))).RoleType;
		public static readonly global::Allors.Meta.RoleType LocalisedName = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("8236a702-a76d-4bb5-9afd-acacb1508261"))).RoleType;
		public static readonly global::Allors.Meta.RoleType IsoCode = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("f93acc4e-f89e-4610-ada9-e58f21c165bc"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DisplayName = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("6412301d-95ec-44c2-8c71-cc03de5327b9"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DeniedPermission = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("5c70ca14-4601-4c65-9b0d-cb189f90be27"))).RoleType;
		public static readonly global::Allors.Meta.RoleType SecurityToken = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("b816fccd-08e0-46e0-a49c-7213c3604416"))).RoleType;
		public static readonly global::Allors.Meta.RoleType SearchData = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("5f38c771-10db-456e-ac31-6833f7087b50"))).RoleType;

		public static readonly global::Allors.Meta.AssociationType LocalesWhereCountry = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("ea778b77-2929-4ab4-ad99-bf2f970401a9"))).AssociationType;
		public static readonly global::Allors.Meta.AssociationType PlacesWhereCountry = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("1bf1cc1e-75bf-4a3f-87bd-a2fae2697855"))).AssociationType;

	}
}