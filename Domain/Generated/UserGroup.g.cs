// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public partial class UserGroup : UserGroupAllors , global::Domain.UniquelyIdentifiable, global::Domain.UserInterfaceable, global::Domain.Searchable
	{
		public UserGroup(Allors.IStrategy allors) : base(allors) {}

		public static UserGroup Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (UserGroup) allorsSession.Instantiate(allorsObjectId);		
		}
	}

	[System.Diagnostics.DebuggerNonUserCode]
	public abstract class UserGroupAllors : Allors.ObjectBase
	{
		protected UserGroupAllors(Allors.IStrategy allors) : base(allors){}


		virtual public global::Domain.Role Role
		{ 
			get
			{
				return (global::Domain.Role) Strategy.GetCompositeRole(UserGroupMeta.Role);
			}
			set
			{
				Strategy.SetCompositeRole(UserGroupMeta.Role ,value);
			}
		}

		virtual public bool ExistRole
		{
			get
			{
				return Strategy.ExistCompositeRole(UserGroupMeta.Role);
			}
		}

		virtual public void RemoveRole()
		{
			Strategy.RemoveCompositeRole(UserGroupMeta.Role);
		}


		virtual public Allors.Extent<global::Domain.User> Members
		{ 
			get
			{
				return Strategy.GetCompositeRoles(UserGroupMeta.Member);
			}
			set
			{
				Strategy.SetCompositeRoles(UserGroupMeta.Member, value);
			}
		}

		virtual public void AddMember (global::Domain.User value)
		{
			Strategy.AddCompositeRole(UserGroupMeta.Member, value);
		}

		virtual public void RemoveMember (global::Domain.User value)
		{
			Strategy.RemoveCompositeRole(UserGroupMeta.Member,value);
		}

		virtual public bool ExistMembers
		{
			get
			{
				return Strategy.ExistCompositeRoles(UserGroupMeta.Member);
			}
		}

		virtual public void RemoveMembers()
		{
			Strategy.RemoveCompositeRoles(UserGroupMeta.Member);
		}


		virtual public global::Domain.UserGroup Parent
		{ 
			get
			{
				return (global::Domain.UserGroup) Strategy.GetCompositeRole(UserGroupMeta.Parent);
			}
			set
			{
				Strategy.SetCompositeRole(UserGroupMeta.Parent ,value);
			}
		}

		virtual public bool ExistParent
		{
			get
			{
				return Strategy.ExistCompositeRole(UserGroupMeta.Parent);
			}
		}

		virtual public void RemoveParent()
		{
			Strategy.RemoveCompositeRole(UserGroupMeta.Parent);
		}



		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(UserGroupMeta.Name);
			}
			set
			{
				Strategy.SetUnitRole(UserGroupMeta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(UserGroupMeta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(UserGroupMeta.Name);
		}



		virtual public global::System.Guid? UniqueId 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(UserGroupMeta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(UserGroupMeta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(UserGroupMeta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(UserGroupMeta.UniqueId);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(UserGroupMeta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(UserGroupMeta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(UserGroupMeta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(UserGroupMeta.DisplayName);
		}


		virtual public Allors.Extent<global::Domain.Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(UserGroupMeta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(UserGroupMeta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (global::Domain.Permission value)
		{
			Strategy.AddCompositeRole(UserGroupMeta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (global::Domain.Permission value)
		{
			Strategy.RemoveCompositeRole(UserGroupMeta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(UserGroupMeta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(UserGroupMeta.DeniedPermission);
		}


		virtual public Allors.Extent<global::Domain.SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(UserGroupMeta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(UserGroupMeta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.AddCompositeRole(UserGroupMeta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.RemoveCompositeRole(UserGroupMeta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(UserGroupMeta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(UserGroupMeta.SecurityToken);
		}


		virtual public global::Domain.SearchData SearchData
		{ 
			get
			{
				return (global::Domain.SearchData) Strategy.GetCompositeRole(UserGroupMeta.SearchData);
			}
			set
			{
				Strategy.SetCompositeRole(UserGroupMeta.SearchData ,value);
			}
		}

		virtual public bool ExistSearchData
		{
			get
			{
				return Strategy.ExistCompositeRole(UserGroupMeta.SearchData);
			}
		}

		virtual public void RemoveSearchData()
		{
			Strategy.RemoveCompositeRole(UserGroupMeta.SearchData);
		}



		virtual public Allors.Extent<global::Domain.UserGroup> UserGroupsWhereParent
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(UserGroupMeta.UserGroupsWhereParent);
			}
		}

		virtual public bool ExistUserGroupsWhereParent
		{
			get
			{
				return Strategy.ExistCompositeAssociations(UserGroupMeta.UserGroupsWhereParent);
			}
		}


		virtual public Allors.Extent<global::Domain.AccessControl> AccessControlsWhereSubjectGroup
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(UserGroupMeta.AccessControlsWhereSubjectGroup);
			}
		}

		virtual public bool ExistAccessControlsWhereSubjectGroup
		{
			get
			{
				return Strategy.ExistCompositeAssociations(UserGroupMeta.AccessControlsWhereSubjectGroup);
			}
		}

	}

	public static class UserGroupMeta
	{
		public static readonly global::Allors.Meta.Class ObjectType = (Allors.Meta.Class)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("60065f5d-a3c2-4418-880d-1026ab607319") );

		public static readonly global::Allors.Meta.RoleType Role = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("2f8cf270-a153-4e0d-b844-991d577222d4"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Member = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("585bb5cf-9ba4-4865-9027-3667185abc4f"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Parent = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("be9dc116-a7ea-4a4b-aaca-eb0f91fc3741"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Name = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("e94e7f05-78bd-4291-923f-38f82d00e3f4"))).RoleType;
		public static readonly global::Allors.Meta.RoleType UniqueId = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("e1842d87-8157-40e7-b06e-4375f311f2c3"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DisplayName = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("6412301d-95ec-44c2-8c71-cc03de5327b9"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DeniedPermission = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("5c70ca14-4601-4c65-9b0d-cb189f90be27"))).RoleType;
		public static readonly global::Allors.Meta.RoleType SecurityToken = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("b816fccd-08e0-46e0-a49c-7213c3604416"))).RoleType;
		public static readonly global::Allors.Meta.RoleType SearchData = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("5f38c771-10db-456e-ac31-6833f7087b50"))).RoleType;

		public static readonly global::Allors.Meta.AssociationType UserGroupsWhereParent = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("be9dc116-a7ea-4a4b-aaca-eb0f91fc3741"))).AssociationType;
		public static readonly global::Allors.Meta.AssociationType AccessControlsWhereSubjectGroup = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("0dbbff5c-3dca-4257-b2da-442d263dcd86"))).AssociationType;

	}
}