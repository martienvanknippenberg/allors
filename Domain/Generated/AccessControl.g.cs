// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public partial class AccessControl : AccessControlAllors , global::Domain.UserInterfaceable
	{
		public AccessControl(Allors.IStrategy allors) : base(allors) {}

		public static AccessControl Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (AccessControl) allorsSession.Instantiate(allorsObjectId);		
		}
	}

	[System.Diagnostics.DebuggerNonUserCode]
	public abstract class AccessControlAllors : Allors.ObjectBase
	{
		protected AccessControlAllors(Allors.IStrategy allors) : base(allors){}


		virtual public Allors.Extent<global::Domain.UserGroup> SubjectGroups
		{ 
			get
			{
				return Strategy.GetCompositeRoles(AccessControlMeta.SubjectGroup);
			}
			set
			{
				Strategy.SetCompositeRoles(AccessControlMeta.SubjectGroup, value);
			}
		}

		virtual public void AddSubjectGroup (global::Domain.UserGroup value)
		{
			Strategy.AddCompositeRole(AccessControlMeta.SubjectGroup, value);
		}

		virtual public void RemoveSubjectGroup (global::Domain.UserGroup value)
		{
			Strategy.RemoveCompositeRole(AccessControlMeta.SubjectGroup,value);
		}

		virtual public bool ExistSubjectGroups
		{
			get
			{
				return Strategy.ExistCompositeRoles(AccessControlMeta.SubjectGroup);
			}
		}

		virtual public void RemoveSubjectGroups()
		{
			Strategy.RemoveCompositeRoles(AccessControlMeta.SubjectGroup);
		}


		virtual public Allors.Extent<global::Domain.User> Subjects
		{ 
			get
			{
				return Strategy.GetCompositeRoles(AccessControlMeta.Subject);
			}
			set
			{
				Strategy.SetCompositeRoles(AccessControlMeta.Subject, value);
			}
		}

		virtual public void AddSubject (global::Domain.User value)
		{
			Strategy.AddCompositeRole(AccessControlMeta.Subject, value);
		}

		virtual public void RemoveSubject (global::Domain.User value)
		{
			Strategy.RemoveCompositeRole(AccessControlMeta.Subject,value);
		}

		virtual public bool ExistSubjects
		{
			get
			{
				return Strategy.ExistCompositeRoles(AccessControlMeta.Subject);
			}
		}

		virtual public void RemoveSubjects()
		{
			Strategy.RemoveCompositeRoles(AccessControlMeta.Subject);
		}


		virtual public Allors.Extent<global::Domain.SecurityToken> Objects
		{ 
			get
			{
				return Strategy.GetCompositeRoles(AccessControlMeta.Object);
			}
			set
			{
				Strategy.SetCompositeRoles(AccessControlMeta.Object, value);
			}
		}

		virtual public void AddObject (global::Domain.SecurityToken value)
		{
			Strategy.AddCompositeRole(AccessControlMeta.Object, value);
		}

		virtual public void RemoveObject (global::Domain.SecurityToken value)
		{
			Strategy.RemoveCompositeRole(AccessControlMeta.Object,value);
		}

		virtual public bool ExistObjects
		{
			get
			{
				return Strategy.ExistCompositeRoles(AccessControlMeta.Object);
			}
		}

		virtual public void RemoveObjects()
		{
			Strategy.RemoveCompositeRoles(AccessControlMeta.Object);
		}


		virtual public global::Domain.Role Role
		{ 
			get
			{
				return (global::Domain.Role) Strategy.GetCompositeRole(AccessControlMeta.Role);
			}
			set
			{
				Strategy.SetCompositeRole(AccessControlMeta.Role ,value);
			}
		}

		virtual public bool ExistRole
		{
			get
			{
				return Strategy.ExistCompositeRole(AccessControlMeta.Role);
			}
		}

		virtual public void RemoveRole()
		{
			Strategy.RemoveCompositeRole(AccessControlMeta.Role);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(AccessControlMeta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(AccessControlMeta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(AccessControlMeta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(AccessControlMeta.DisplayName);
		}


		virtual public Allors.Extent<global::Domain.Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(AccessControlMeta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(AccessControlMeta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (global::Domain.Permission value)
		{
			Strategy.AddCompositeRole(AccessControlMeta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (global::Domain.Permission value)
		{
			Strategy.RemoveCompositeRole(AccessControlMeta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(AccessControlMeta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(AccessControlMeta.DeniedPermission);
		}


		virtual public Allors.Extent<global::Domain.SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(AccessControlMeta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(AccessControlMeta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.AddCompositeRole(AccessControlMeta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.RemoveCompositeRole(AccessControlMeta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(AccessControlMeta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(AccessControlMeta.SecurityToken);
		}

	}

	public static class AccessControlMeta
	{
		public static readonly global::Allors.Meta.Class ObjectType = (Allors.Meta.Class)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("c4d93d5e-34c3-4731-9d37-47a8e801d9a8") );

		public static readonly global::Allors.Meta.RoleType SubjectGroup = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("0dbbff5c-3dca-4257-b2da-442d263dcd86"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Subject = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("37dd1e27-ba75-404c-9410-c6399d28317c"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Object = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("6503574b-8bab-4da8-a19d-23a9bcffe01e"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Role = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("69a9dae8-678d-4c1c-a464-2e5aa5caf39e"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DisplayName = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("6412301d-95ec-44c2-8c71-cc03de5327b9"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DeniedPermission = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("5c70ca14-4601-4c65-9b0d-cb189f90be27"))).RoleType;
		public static readonly global::Allors.Meta.RoleType SecurityToken = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("b816fccd-08e0-46e0-a49c-7213c3604416"))).RoleType;

	}
}