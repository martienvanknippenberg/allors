// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public partial class Three : ThreeAllors , global::Domain.Shared, global::Domain.UserInterfaceable
	{
		public Three(Allors.IStrategy allors) : base(allors) {}

		public static Three Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Three) allorsSession.Instantiate(allorsObjectId);		
		}
	}

	[System.Diagnostics.DebuggerNonUserCode]
	public abstract class ThreeAllors : Allors.ObjectBase
	{
		protected ThreeAllors(Allors.IStrategy allors) : base(allors){}


		virtual public global::Domain.Four Four
		{ 
			get
			{
				return (global::Domain.Four) Strategy.GetCompositeRole(ThreeMeta.Four);
			}
			set
			{
				Strategy.SetCompositeRole(ThreeMeta.Four ,value);
			}
		}

		virtual public bool ExistFour
		{
			get
			{
				return Strategy.ExistCompositeRole(ThreeMeta.Four);
			}
		}

		virtual public void RemoveFour()
		{
			Strategy.RemoveCompositeRole(ThreeMeta.Four);
		}



		virtual public global::System.String AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(ThreeMeta.AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(ThreeMeta.AllorsString, value);
			}
		}

		virtual public bool ExistAllorsString{
			get
			{
				return Strategy.ExistUnitRole(ThreeMeta.AllorsString);
			}
		}

		virtual public void RemoveAllorsString()
		{
			Strategy.RemoveUnitRole(ThreeMeta.AllorsString);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(ThreeMeta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(ThreeMeta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(ThreeMeta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(ThreeMeta.DisplayName);
		}


		virtual public Allors.Extent<global::Domain.Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(ThreeMeta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(ThreeMeta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (global::Domain.Permission value)
		{
			Strategy.AddCompositeRole(ThreeMeta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (global::Domain.Permission value)
		{
			Strategy.RemoveCompositeRole(ThreeMeta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(ThreeMeta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(ThreeMeta.DeniedPermission);
		}


		virtual public Allors.Extent<global::Domain.SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(ThreeMeta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(ThreeMeta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.AddCompositeRole(ThreeMeta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.RemoveCompositeRole(ThreeMeta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(ThreeMeta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(ThreeMeta.SecurityToken);
		}



		virtual public Allors.Extent<global::Domain.Two> TwosWhereShared
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(ThreeMeta.TwosWhereShared);
			}
		}

		virtual public bool ExistTwosWhereShared
		{
			get
			{
				return Strategy.ExistCompositeAssociations(ThreeMeta.TwosWhereShared);
			}
		}

	}

	public static class ThreeMeta
	{
		public static readonly global::Allors.Meta.Class ObjectType = (Allors.Meta.Class)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("bdaed62e-6369-46c0-a379-a1eef81b1c3d") );

		public static readonly global::Allors.Meta.RoleType Four = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("1697f09c-0d3d-4e5e-9f3f-9d3ae0718fd3"))).RoleType;
		public static readonly global::Allors.Meta.RoleType AllorsString = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("4ace9948-4a22-465c-aa40-61c8fd65784d"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DisplayName = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("6412301d-95ec-44c2-8c71-cc03de5327b9"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DeniedPermission = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("5c70ca14-4601-4c65-9b0d-cb189f90be27"))).RoleType;
		public static readonly global::Allors.Meta.RoleType SecurityToken = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("b816fccd-08e0-46e0-a49c-7213c3604416"))).RoleType;

		public static readonly global::Allors.Meta.AssociationType TwosWhereShared = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("8930c13c-ad5a-4b0e-b3bf-d7cdf6f5b867"))).AssociationType;

	}
}