// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public partial class Two : TwoAllors , global::Domain.UserInterfaceable, global::Domain.Shared
	{
		public Two(Allors.IStrategy allors) : base(allors) {}

		public static Two Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Two) allorsSession.Instantiate(allorsObjectId);		
		}
	}

	[System.Diagnostics.DebuggerNonUserCode]
	public abstract class TwoAllors : Allors.ObjectBase
	{
		protected TwoAllors(Allors.IStrategy allors) : base(allors){}


		virtual public global::Domain.Shared Shared
		{ 
			get
			{
				return (global::Domain.Shared) Strategy.GetCompositeRole(TwoMeta.Shared);
			}
			set
			{
				Strategy.SetCompositeRole(TwoMeta.Shared ,value);
			}
		}

		virtual public bool ExistShared
		{
			get
			{
				return Strategy.ExistCompositeRole(TwoMeta.Shared);
			}
		}

		virtual public void RemoveShared()
		{
			Strategy.RemoveCompositeRole(TwoMeta.Shared);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(TwoMeta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(TwoMeta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(TwoMeta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(TwoMeta.DisplayName);
		}


		virtual public Allors.Extent<global::Domain.Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(TwoMeta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(TwoMeta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (global::Domain.Permission value)
		{
			Strategy.AddCompositeRole(TwoMeta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (global::Domain.Permission value)
		{
			Strategy.RemoveCompositeRole(TwoMeta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(TwoMeta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(TwoMeta.DeniedPermission);
		}


		virtual public Allors.Extent<global::Domain.SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(TwoMeta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(TwoMeta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.AddCompositeRole(TwoMeta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.RemoveCompositeRole(TwoMeta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(TwoMeta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(TwoMeta.SecurityToken);
		}



		virtual public Allors.Extent<global::Domain.One> OnesWhereTwo
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(TwoMeta.OnesWhereTwo);
			}
		}

		virtual public bool ExistOnesWhereTwo
		{
			get
			{
				return Strategy.ExistCompositeAssociations(TwoMeta.OnesWhereTwo);
			}
		}


		virtual public Allors.Extent<global::Domain.Two> TwosWhereShared
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(TwoMeta.TwosWhereShared);
			}
		}

		virtual public bool ExistTwosWhereShared
		{
			get
			{
				return Strategy.ExistCompositeAssociations(TwoMeta.TwosWhereShared);
			}
		}

	}

	public static class TwoMeta
	{
		public static readonly global::Allors.Meta.Class ObjectType = (Allors.Meta.Class)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("9ec7e136-815c-4726-9991-e95a3ec9e092") );

		public static readonly global::Allors.Meta.RoleType Shared = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("8930c13c-ad5a-4b0e-b3bf-d7cdf6f5b867"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DisplayName = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("6412301d-95ec-44c2-8c71-cc03de5327b9"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DeniedPermission = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("5c70ca14-4601-4c65-9b0d-cb189f90be27"))).RoleType;
		public static readonly global::Allors.Meta.RoleType SecurityToken = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("b816fccd-08e0-46e0-a49c-7213c3604416"))).RoleType;

		public static readonly global::Allors.Meta.AssociationType OnesWhereTwo = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("448878af-c992-4256-baa7-239335a26bc6"))).AssociationType;
		public static readonly global::Allors.Meta.AssociationType TwosWhereShared = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("8930c13c-ad5a-4b0e-b3bf-d7cdf6f5b867"))).AssociationType;

	}
}