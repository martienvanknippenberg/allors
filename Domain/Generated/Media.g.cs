// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public partial class Media : MediaAllors , global::Domain.UniquelyIdentifiable, global::Domain.UserInterfaceable
	{
		public Media(Allors.IStrategy allors) : base(allors) {}

		public static Media Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Media) allorsSession.Instantiate(allorsObjectId);		
		}
	}

	[System.Diagnostics.DebuggerNonUserCode]
	public abstract class MediaAllors : Allors.ObjectBase
	{
		protected MediaAllors(Allors.IStrategy allors) : base(allors){}


		virtual public global::Domain.MediaType MediaType
		{ 
			get
			{
				return (global::Domain.MediaType) Strategy.GetCompositeRole(MediaMeta.MediaType);
			}
			set
			{
				Strategy.SetCompositeRole(MediaMeta.MediaType ,value);
			}
		}

		virtual public bool ExistMediaType
		{
			get
			{
				return Strategy.ExistCompositeRole(MediaMeta.MediaType);
			}
		}

		virtual public void RemoveMediaType()
		{
			Strategy.RemoveCompositeRole(MediaMeta.MediaType);
		}


		virtual public global::Domain.MediaContent MediaContent
		{ 
			get
			{
				return (global::Domain.MediaContent) Strategy.GetCompositeRole(MediaMeta.MediaContent);
			}
			set
			{
				Strategy.SetCompositeRole(MediaMeta.MediaContent ,value);
			}
		}

		virtual public bool ExistMediaContent
		{
			get
			{
				return Strategy.ExistCompositeRole(MediaMeta.MediaContent);
			}
		}

		virtual public void RemoveMediaContent()
		{
			Strategy.RemoveCompositeRole(MediaMeta.MediaContent);
		}



		virtual public global::System.Guid? UniqueId 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(MediaMeta.UniqueId);
			}
			set
			{
				Strategy.SetUnitRole(MediaMeta.UniqueId, value);
			}
		}

		virtual public bool ExistUniqueId{
			get
			{
				return Strategy.ExistUnitRole(MediaMeta.UniqueId);
			}
		}

		virtual public void RemoveUniqueId()
		{
			Strategy.RemoveUnitRole(MediaMeta.UniqueId);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(MediaMeta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(MediaMeta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(MediaMeta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(MediaMeta.DisplayName);
		}


		virtual public Allors.Extent<global::Domain.Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(MediaMeta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(MediaMeta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (global::Domain.Permission value)
		{
			Strategy.AddCompositeRole(MediaMeta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (global::Domain.Permission value)
		{
			Strategy.RemoveCompositeRole(MediaMeta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(MediaMeta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(MediaMeta.DeniedPermission);
		}


		virtual public Allors.Extent<global::Domain.SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(MediaMeta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(MediaMeta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.AddCompositeRole(MediaMeta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.RemoveCompositeRole(MediaMeta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(MediaMeta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(MediaMeta.SecurityToken);
		}



		virtual public Allors.Extent<global::Domain.Image> ImagesWhereOriginal
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(MediaMeta.ImagesWhereOriginal);
			}
		}

		virtual public bool ExistImagesWhereOriginal
		{
			get
			{
				return Strategy.ExistCompositeAssociations(MediaMeta.ImagesWhereOriginal);
			}
		}


		virtual public global::Domain.Image ImageWhereResponsive
		{ 
			get
			{
				return (global::Domain.Image) Strategy.GetCompositeAssociation(MediaMeta.ImageWhereResponsive);
			}
		} 

		virtual public bool ExistImageWhereResponsive
		{
			get
			{
				return Strategy.ExistCompositeAssociation(MediaMeta.ImageWhereResponsive);
			}
		}


		virtual public Allors.Extent<global::Domain.Organisation> OrganisationsWhereLogo
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(MediaMeta.OrganisationsWhereLogo);
			}
		}

		virtual public bool ExistOrganisationsWhereLogo
		{
			get
			{
				return Strategy.ExistCompositeAssociations(MediaMeta.OrganisationsWhereLogo);
			}
		}


		virtual public Allors.Extent<global::Domain.Person> PersonsWherePhoto
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(MediaMeta.PersonsWherePhoto);
			}
		}

		virtual public bool ExistPersonsWherePhoto
		{
			get
			{
				return Strategy.ExistCompositeAssociations(MediaMeta.PersonsWherePhoto);
			}
		}

	}

	public static class MediaMeta
	{
		public static readonly global::Allors.Meta.Class ObjectType = (Allors.Meta.Class)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("da5b86a3-4f33-4c0d-965d-f4fbc1179374") );

		public static readonly global::Allors.Meta.RoleType MediaType = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("49481792-06f0-49a1-b32f-28d265815a24"))).RoleType;
		public static readonly global::Allors.Meta.RoleType MediaContent = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("67082a51-1502-490b-b8db-537799e550bd"))).RoleType;
		public static readonly global::Allors.Meta.RoleType UniqueId = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("e1842d87-8157-40e7-b06e-4375f311f2c3"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DisplayName = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("6412301d-95ec-44c2-8c71-cc03de5327b9"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DeniedPermission = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("5c70ca14-4601-4c65-9b0d-cb189f90be27"))).RoleType;
		public static readonly global::Allors.Meta.RoleType SecurityToken = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("b816fccd-08e0-46e0-a49c-7213c3604416"))).RoleType;

		public static readonly global::Allors.Meta.AssociationType ImagesWhereOriginal = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("366410a7-7d51-4d7c-82fd-3444bdc0b3f7"))).AssociationType;
		public static readonly global::Allors.Meta.AssociationType ImageWhereResponsive = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("59689164-7a45-45d4-98fa-f8cf50c62899"))).AssociationType;
		public static readonly global::Allors.Meta.AssociationType OrganisationsWhereLogo = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("b201d2a0-2335-47a1-aa8d-8416e89a9fec"))).AssociationType;
		public static readonly global::Allors.Meta.AssociationType PersonsWherePhoto = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("b3ddd2df-8a5a-4747-bd4f-1f1eb37386b3"))).AssociationType;

	}
}