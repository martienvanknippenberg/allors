// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public partial class Unit : UnitAllors , global::Domain.AccessControlledObject, global::Domain.UserInterfaceable
	{
		public Unit(Allors.IStrategy allors) : base(allors) {}

		public static Unit Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Unit) allorsSession.Instantiate(allorsObjectId);		
		}
	}

	[System.Diagnostics.DebuggerNonUserCode]
	public abstract class UnitAllors : Allors.ObjectBase
	{
		protected UnitAllors(Allors.IStrategy allors) : base(allors){}



		virtual public global::System.Int64? AllorsLong 
		{
			get
			{
				return (global::System.Int64?) Strategy.GetUnitRole(UnitMeta.AllorsLong);
			}
			set
			{
				Strategy.SetUnitRole(UnitMeta.AllorsLong, value);
			}
		}

		virtual public bool ExistAllorsLong{
			get
			{
				return Strategy.ExistUnitRole(UnitMeta.AllorsLong);
			}
		}

		virtual public void RemoveAllorsLong()
		{
			Strategy.RemoveUnitRole(UnitMeta.AllorsLong);
		}



		virtual public global::System.Byte[] AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(UnitMeta.AllorsBinary);
			}
			set
			{
				Strategy.SetUnitRole(UnitMeta.AllorsBinary, value);
			}
		}

		virtual public bool ExistAllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(UnitMeta.AllorsBinary);
			}
		}

		virtual public void RemoveAllorsBinary()
		{
			Strategy.RemoveUnitRole(UnitMeta.AllorsBinary);
		}



		virtual public global::System.DateTime? AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(UnitMeta.AllorsDateTime);
			}
			set
			{
				Strategy.SetUnitRole(UnitMeta.AllorsDateTime, value);
			}
		}

		virtual public bool ExistAllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(UnitMeta.AllorsDateTime);
			}
		}

		virtual public void RemoveAllorsDateTime()
		{
			Strategy.RemoveUnitRole(UnitMeta.AllorsDateTime);
		}



		virtual public global::System.Boolean? AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(UnitMeta.AllorsBoolean);
			}
			set
			{
				Strategy.SetUnitRole(UnitMeta.AllorsBoolean, value);
			}
		}

		virtual public bool ExistAllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(UnitMeta.AllorsBoolean);
			}
		}

		virtual public void RemoveAllorsBoolean()
		{
			Strategy.RemoveUnitRole(UnitMeta.AllorsBoolean);
		}



		virtual public global::System.Double? AllorsDouble 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(UnitMeta.AllorsDouble);
			}
			set
			{
				Strategy.SetUnitRole(UnitMeta.AllorsDouble, value);
			}
		}

		virtual public bool ExistAllorsDouble{
			get
			{
				return Strategy.ExistUnitRole(UnitMeta.AllorsDouble);
			}
		}

		virtual public void RemoveAllorsDouble()
		{
			Strategy.RemoveUnitRole(UnitMeta.AllorsDouble);
		}



		virtual public global::System.Int32? AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(UnitMeta.AllorsInteger);
			}
			set
			{
				Strategy.SetUnitRole(UnitMeta.AllorsInteger, value);
			}
		}

		virtual public bool ExistAllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(UnitMeta.AllorsInteger);
			}
		}

		virtual public void RemoveAllorsInteger()
		{
			Strategy.RemoveUnitRole(UnitMeta.AllorsInteger);
		}



		virtual public global::System.String AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(UnitMeta.AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(UnitMeta.AllorsString, value);
			}
		}

		virtual public bool ExistAllorsString{
			get
			{
				return Strategy.ExistUnitRole(UnitMeta.AllorsString);
			}
		}

		virtual public void RemoveAllorsString()
		{
			Strategy.RemoveUnitRole(UnitMeta.AllorsString);
		}



		virtual public global::System.Guid? AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(UnitMeta.AllorsUnique);
			}
			set
			{
				Strategy.SetUnitRole(UnitMeta.AllorsUnique, value);
			}
		}

		virtual public bool ExistAllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(UnitMeta.AllorsUnique);
			}
		}

		virtual public void RemoveAllorsUnique()
		{
			Strategy.RemoveUnitRole(UnitMeta.AllorsUnique);
		}



		virtual public global::System.Decimal? AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(UnitMeta.AllorsDecimal);
			}
			set
			{
				Strategy.SetUnitRole(UnitMeta.AllorsDecimal, value);
			}
		}

		virtual public bool ExistAllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(UnitMeta.AllorsDecimal);
			}
		}

		virtual public void RemoveAllorsDecimal()
		{
			Strategy.RemoveUnitRole(UnitMeta.AllorsDecimal);
		}


		virtual public Allors.Extent<global::Domain.Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(UnitMeta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(UnitMeta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (global::Domain.Permission value)
		{
			Strategy.AddCompositeRole(UnitMeta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (global::Domain.Permission value)
		{
			Strategy.RemoveCompositeRole(UnitMeta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(UnitMeta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(UnitMeta.DeniedPermission);
		}


		virtual public Allors.Extent<global::Domain.SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(UnitMeta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(UnitMeta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.AddCompositeRole(UnitMeta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.RemoveCompositeRole(UnitMeta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(UnitMeta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(UnitMeta.SecurityToken);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(UnitMeta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(UnitMeta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(UnitMeta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(UnitMeta.DisplayName);
		}

	}

	public static class UnitMeta
	{
		public static readonly global::Allors.Meta.Class ObjectType = (Allors.Meta.Class)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("4e501cd6-807c-4f10-b60b-acd1d80042cd") );

		public static readonly global::Allors.Meta.RoleType AllorsLong = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("09bfade2-1739-4a7b-80ec-982fe43428ce"))).RoleType;
		public static readonly global::Allors.Meta.RoleType AllorsBinary = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("24771d5b-f920-4820-aff7-ea6391b4a45c"))).RoleType;
		public static readonly global::Allors.Meta.RoleType AllorsDateTime = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("4d6a80f5-0fa7-4867-91f8-37aa92b6707b"))).RoleType;
		public static readonly global::Allors.Meta.RoleType AllorsBoolean = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("5a788ebe-65e9-4d5e-853a-91bb4addabb5"))).RoleType;
		public static readonly global::Allors.Meta.RoleType AllorsDouble = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("74a35820-ef8c-4373-9447-6215ee8279c0"))).RoleType;
		public static readonly global::Allors.Meta.RoleType AllorsInteger = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("b817ba76-876e-44ea-8e5a-51d552d4045e"))).RoleType;
		public static readonly global::Allors.Meta.RoleType AllorsString = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("c724c733-972a-411c-aecb-e865c2628a90"))).RoleType;
		public static readonly global::Allors.Meta.RoleType AllorsUnique = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("ed58ae4c-24e0-4dd1-8b1c-0909df1e0fcd"))).RoleType;
		public static readonly global::Allors.Meta.RoleType AllorsDecimal = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("f746da51-ea2d-4e22-9ecb-46d4dbc1b084"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DeniedPermission = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("5c70ca14-4601-4c65-9b0d-cb189f90be27"))).RoleType;
		public static readonly global::Allors.Meta.RoleType SecurityToken = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("b816fccd-08e0-46e0-a49c-7213c3604416"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DisplayName = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("6412301d-95ec-44c2-8c71-cc03de5327b9"))).RoleType;

	}
}