// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public partial class BadUI : BadUIAllors , global::Domain.UserInterfaceable
	{
		public BadUI(Allors.IStrategy allors) : base(allors) {}

		public static BadUI Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (BadUI) allorsSession.Instantiate(allorsObjectId);		
		}
	}

	[System.Diagnostics.DebuggerNonUserCode]
	public abstract class BadUIAllors : Allors.ObjectBase
	{
		protected BadUIAllors(Allors.IStrategy allors) : base(allors){}


		virtual public Allors.Extent<global::Domain.Person> PersonsMany
		{ 
			get
			{
				return Strategy.GetCompositeRoles(BadUIMeta.PersonMany);
			}
			set
			{
				Strategy.SetCompositeRoles(BadUIMeta.PersonMany, value);
			}
		}

		virtual public void AddPersonMany (global::Domain.Person value)
		{
			Strategy.AddCompositeRole(BadUIMeta.PersonMany, value);
		}

		virtual public void RemovePersonMany (global::Domain.Person value)
		{
			Strategy.RemoveCompositeRole(BadUIMeta.PersonMany,value);
		}

		virtual public bool ExistPersonsMany
		{
			get
			{
				return Strategy.ExistCompositeRoles(BadUIMeta.PersonMany);
			}
		}

		virtual public void RemovePersonsMany()
		{
			Strategy.RemoveCompositeRoles(BadUIMeta.PersonMany);
		}


		virtual public global::Domain.Organisation CompanyOne
		{ 
			get
			{
				return (global::Domain.Organisation) Strategy.GetCompositeRole(BadUIMeta.CompanyOne);
			}
			set
			{
				Strategy.SetCompositeRole(BadUIMeta.CompanyOne ,value);
			}
		}

		virtual public bool ExistCompanyOne
		{
			get
			{
				return Strategy.ExistCompositeRole(BadUIMeta.CompanyOne);
			}
		}

		virtual public void RemoveCompanyOne()
		{
			Strategy.RemoveCompositeRole(BadUIMeta.CompanyOne);
		}


		virtual public global::Domain.Person PersonOne
		{ 
			get
			{
				return (global::Domain.Person) Strategy.GetCompositeRole(BadUIMeta.PersonOne);
			}
			set
			{
				Strategy.SetCompositeRole(BadUIMeta.PersonOne ,value);
			}
		}

		virtual public bool ExistPersonOne
		{
			get
			{
				return Strategy.ExistCompositeRole(BadUIMeta.PersonOne);
			}
		}

		virtual public void RemovePersonOne()
		{
			Strategy.RemoveCompositeRole(BadUIMeta.PersonOne);
		}


		virtual public global::Domain.Organisation CompanyMany
		{ 
			get
			{
				return (global::Domain.Organisation) Strategy.GetCompositeRole(BadUIMeta.CompanyMany);
			}
			set
			{
				Strategy.SetCompositeRole(BadUIMeta.CompanyMany ,value);
			}
		}

		virtual public bool ExistCompanyMany
		{
			get
			{
				return Strategy.ExistCompositeRole(BadUIMeta.CompanyMany);
			}
		}

		virtual public void RemoveCompanyMany()
		{
			Strategy.RemoveCompositeRole(BadUIMeta.CompanyMany);
		}



		virtual public global::System.String AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(BadUIMeta.AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(BadUIMeta.AllorsString, value);
			}
		}

		virtual public bool ExistAllorsString{
			get
			{
				return Strategy.ExistUnitRole(BadUIMeta.AllorsString);
			}
		}

		virtual public void RemoveAllorsString()
		{
			Strategy.RemoveUnitRole(BadUIMeta.AllorsString);
		}



		virtual public global::System.String DisplayName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(BadUIMeta.DisplayName);
			}
			set
			{
				Strategy.SetUnitRole(BadUIMeta.DisplayName, value);
			}
		}

		virtual public bool ExistDisplayName{
			get
			{
				return Strategy.ExistUnitRole(BadUIMeta.DisplayName);
			}
		}

		virtual public void RemoveDisplayName()
		{
			Strategy.RemoveUnitRole(BadUIMeta.DisplayName);
		}


		virtual public Allors.Extent<global::Domain.Permission> DeniedPermissions
		{ 
			get
			{
				return Strategy.GetCompositeRoles(BadUIMeta.DeniedPermission);
			}
			set
			{
				Strategy.SetCompositeRoles(BadUIMeta.DeniedPermission, value);
			}
		}

		virtual public void AddDeniedPermission (global::Domain.Permission value)
		{
			Strategy.AddCompositeRole(BadUIMeta.DeniedPermission, value);
		}

		virtual public void RemoveDeniedPermission (global::Domain.Permission value)
		{
			Strategy.RemoveCompositeRole(BadUIMeta.DeniedPermission,value);
		}

		virtual public bool ExistDeniedPermissions
		{
			get
			{
				return Strategy.ExistCompositeRoles(BadUIMeta.DeniedPermission);
			}
		}

		virtual public void RemoveDeniedPermissions()
		{
			Strategy.RemoveCompositeRoles(BadUIMeta.DeniedPermission);
		}


		virtual public Allors.Extent<global::Domain.SecurityToken> SecurityTokens
		{ 
			get
			{
				return Strategy.GetCompositeRoles(BadUIMeta.SecurityToken);
			}
			set
			{
				Strategy.SetCompositeRoles(BadUIMeta.SecurityToken, value);
			}
		}

		virtual public void AddSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.AddCompositeRole(BadUIMeta.SecurityToken, value);
		}

		virtual public void RemoveSecurityToken (global::Domain.SecurityToken value)
		{
			Strategy.RemoveCompositeRole(BadUIMeta.SecurityToken,value);
		}

		virtual public bool ExistSecurityTokens
		{
			get
			{
				return Strategy.ExistCompositeRoles(BadUIMeta.SecurityToken);
			}
		}

		virtual public void RemoveSecurityTokens()
		{
			Strategy.RemoveCompositeRoles(BadUIMeta.SecurityToken);
		}

	}

	public static class BadUIMeta
	{
		public static readonly global::Allors.Meta.Class ObjectType = (Allors.Meta.Class)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("bb1b0a2e-66d1-4e09-860f-52dc7145029e") );

		public static readonly global::Allors.Meta.RoleType PersonMany = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("8a999086-ca90-40a1-90ae-475d231bb1eb"))).RoleType;
		public static readonly global::Allors.Meta.RoleType CompanyOne = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("9ebbb9d1-2ca7-4a7f-9f18-f25c05fd28c1"))).RoleType;
		public static readonly global::Allors.Meta.RoleType PersonOne = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("a4db0d75-3dff-45ac-9c1d-623bca046b4a"))).RoleType;
		public static readonly global::Allors.Meta.RoleType CompanyMany = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("a8621048-48b5-43c4-b10b-17225958d177"))).RoleType;
		public static readonly global::Allors.Meta.RoleType AllorsString = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("c93a102e-ecdb-4189-a0fc-eeea8b4b85d4"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DisplayName = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("6412301d-95ec-44c2-8c71-cc03de5327b9"))).RoleType;
		public static readonly global::Allors.Meta.RoleType DeniedPermission = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("5c70ca14-4601-4c65-9b0d-cb189f90be27"))).RoleType;
		public static readonly global::Allors.Meta.RoleType SecurityToken = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("b816fccd-08e0-46e0-a49c-7213c3604416"))).RoleType;

	}
}