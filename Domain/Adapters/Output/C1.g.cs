// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public  partial class C1 : C1Allors , global::Domain.I1, global::Domain.I12
	{
		public C1(Allors.IStrategy allors) : base(allors) {}

		public static new C1 Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (C1) allorsSession.Instantiate(allorsObjectId);		
		}
	}

	[System.Diagnostics.DebuggerNonUserCode]
	public abstract class C1Allors :  global::Domain.A1 
	{
		protected C1Allors(Allors.IStrategy allors) : base(allors){}



		virtual public global::System.Decimal? C1DecimalBetweenA 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(C1Meta.C1DecimalBetweenA);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1DecimalBetweenA, value);
			}
		}

		virtual public bool ExistC1DecimalBetweenA{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1DecimalBetweenA);
			}
		}

		virtual public void RemoveC1DecimalBetweenA()
		{
			Strategy.RemoveUnitRole(C1Meta.C1DecimalBetweenA);
		}



		virtual public global::System.Int64? C1LongLessThan 
		{
			get
			{
				return (global::System.Int64?) Strategy.GetUnitRole(C1Meta.C1LongLessThan);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1LongLessThan, value);
			}
		}

		virtual public bool ExistC1LongLessThan{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1LongLessThan);
			}
		}

		virtual public void RemoveC1LongLessThan()
		{
			Strategy.RemoveUnitRole(C1Meta.C1LongLessThan);
		}


		virtual public global::Domain.I2 C1I2one2one
		{ 
			get
			{
				return (global::Domain.I2) Strategy.GetCompositeRole(C1Meta.C1I2one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.C1I2one2one ,value);
			}
		}

		virtual public bool ExistC1I2one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.C1I2one2one);
			}
		}

		virtual public void RemoveC1I2one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.C1I2one2one);
		}



		virtual public global::System.Decimal? C1DecimalBetweenB 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(C1Meta.C1DecimalBetweenB);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1DecimalBetweenB, value);
			}
		}

		virtual public bool ExistC1DecimalBetweenB{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1DecimalBetweenB);
			}
		}

		virtual public void RemoveC1DecimalBetweenB()
		{
			Strategy.RemoveUnitRole(C1Meta.C1DecimalBetweenB);
		}



		virtual public global::System.String Argument 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(C1Meta.Argument);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.Argument, value);
			}
		}

		virtual public bool ExistArgument{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.Argument);
			}
		}

		virtual public void RemoveArgument()
		{
			Strategy.RemoveUnitRole(C1Meta.Argument);
		}


		virtual public Allors.Extent<global::Domain.S1> C1S1one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.C1S1one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.C1S1one2many, value);
			}
		}

		virtual public void AddC1S1one2many (global::Domain.S1 value)
		{
			Strategy.AddCompositeRole(C1Meta.C1S1one2many, value);
		}

		virtual public void RemoveC1S1one2many (global::Domain.S1 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.C1S1one2many,value);
		}

		virtual public bool ExistC1S1one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.C1S1one2many);
			}
		}

		virtual public void RemoveC1S1one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.C1S1one2many);
		}


		virtual public global::Domain.I12 C1I12one2one
		{ 
			get
			{
				return (global::Domain.I12) Strategy.GetCompositeRole(C1Meta.C1I12one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.C1I12one2one ,value);
			}
		}

		virtual public bool ExistC1I12one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.C1I12one2one);
			}
		}

		virtual public void RemoveC1I12one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.C1I12one2one);
		}



		virtual public global::System.String C1AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(C1Meta.C1AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1AllorsString, value);
			}
		}

		virtual public bool ExistC1AllorsString{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1AllorsString);
			}
		}

		virtual public void RemoveC1AllorsString()
		{
			Strategy.RemoveUnitRole(C1Meta.C1AllorsString);
		}


		virtual public global::Domain.C1 C1C1many2one
		{ 
			get
			{
				return (global::Domain.C1) Strategy.GetCompositeRole(C1Meta.C1C1many2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.C1C1many2one ,value);
			}
		}

		virtual public bool ExistC1C1many2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.C1C1many2one);
			}
		}

		virtual public void RemoveC1C1many2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.C1C1many2one);
		}


		virtual public global::Domain.S2 C1S2many2one
		{ 
			get
			{
				return (global::Domain.S2) Strategy.GetCompositeRole(C1Meta.C1S2many2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.C1S2many2one ,value);
			}
		}

		virtual public bool ExistC1S2many2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.C1S2many2one);
			}
		}

		virtual public void RemoveC1S2many2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.C1S2many2one);
		}



		virtual public global::System.Double? C1DoubleBetweenA 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(C1Meta.C1DoubleBetweenA);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1DoubleBetweenA, value);
			}
		}

		virtual public bool ExistC1DoubleBetweenA{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1DoubleBetweenA);
			}
		}

		virtual public void RemoveC1DoubleBetweenA()
		{
			Strategy.RemoveUnitRole(C1Meta.C1DoubleBetweenA);
		}


		virtual public global::Domain.C1 Many2One
		{ 
			get
			{
				return (global::Domain.C1) Strategy.GetCompositeRole(C1Meta.Many2One);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.Many2One ,value);
			}
		}

		virtual public bool ExistMany2One
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.Many2One);
			}
		}

		virtual public void RemoveMany2One()
		{
			Strategy.RemoveCompositeRole(C1Meta.Many2One);
		}


		virtual public Allors.Extent<global::Domain.C1> C1C1many2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.C1C1many2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.C1C1many2many, value);
			}
		}

		virtual public void AddC1C1many2many (global::Domain.C1 value)
		{
			Strategy.AddCompositeRole(C1Meta.C1C1many2many, value);
		}

		virtual public void RemoveC1C1many2many (global::Domain.C1 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.C1C1many2many,value);
		}

		virtual public bool ExistC1C1many2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.C1C1many2many);
			}
		}

		virtual public void RemoveC1C1many2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.C1C1many2many);
		}


		virtual public Allors.Extent<global::Domain.S1> C1S1many2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.C1S1many2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.C1S1many2many, value);
			}
		}

		virtual public void AddC1S1many2many (global::Domain.S1 value)
		{
			Strategy.AddCompositeRole(C1Meta.C1S1many2many, value);
		}

		virtual public void RemoveC1S1many2many (global::Domain.S1 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.C1S1many2many,value);
		}

		virtual public bool ExistC1S1many2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.C1S1many2many);
			}
		}

		virtual public void RemoveC1S1many2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.C1S1many2many);
		}



		virtual public global::System.Double? C1DoubleBetweenB 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(C1Meta.C1DoubleBetweenB);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1DoubleBetweenB, value);
			}
		}

		virtual public bool ExistC1DoubleBetweenB{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1DoubleBetweenB);
			}
		}

		virtual public void RemoveC1DoubleBetweenB()
		{
			Strategy.RemoveUnitRole(C1Meta.C1DoubleBetweenB);
		}


		virtual public global::Domain.I1 C1I1one2one
		{ 
			get
			{
				return (global::Domain.I1) Strategy.GetCompositeRole(C1Meta.C1I1one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.C1I1one2one ,value);
			}
		}

		virtual public bool ExistC1I1one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.C1I1one2one);
			}
		}

		virtual public void RemoveC1I1one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.C1I1one2one);
		}



		virtual public global::System.Int32? C1IntegerLessThan 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(C1Meta.C1IntegerLessThan);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1IntegerLessThan, value);
			}
		}

		virtual public bool ExistC1IntegerLessThan{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1IntegerLessThan);
			}
		}

		virtual public void RemoveC1IntegerLessThan()
		{
			Strategy.RemoveUnitRole(C1Meta.C1IntegerLessThan);
		}



		virtual public global::System.String C1StringLarge 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(C1Meta.C1StringLarge);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1StringLarge, value);
			}
		}

		virtual public bool ExistC1StringLarge{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1StringLarge);
			}
		}

		virtual public void RemoveC1StringLarge()
		{
			Strategy.RemoveUnitRole(C1Meta.C1StringLarge);
		}


		virtual public Allors.Extent<global::Domain.I2> C1I2one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.C1I2one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.C1I2one2many, value);
			}
		}

		virtual public void AddC1I2one2many (global::Domain.I2 value)
		{
			Strategy.AddCompositeRole(C1Meta.C1I2one2many, value);
		}

		virtual public void RemoveC1I2one2many (global::Domain.I2 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.C1I2one2many,value);
		}

		virtual public bool ExistC1I2one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.C1I2one2many);
			}
		}

		virtual public void RemoveC1I2one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.C1I2one2many);
		}


		virtual public global::Domain.C1 C1C1one2one
		{ 
			get
			{
				return (global::Domain.C1) Strategy.GetCompositeRole(C1Meta.C1C1one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.C1C1one2one ,value);
			}
		}

		virtual public bool ExistC1C1one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.C1C1one2one);
			}
		}

		virtual public void RemoveC1C1one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.C1C1one2one);
		}



		virtual public global::System.Double? C1DoubleGreaterThan 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(C1Meta.C1DoubleGreaterThan);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1DoubleGreaterThan, value);
			}
		}

		virtual public bool ExistC1DoubleGreaterThan{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1DoubleGreaterThan);
			}
		}

		virtual public void RemoveC1DoubleGreaterThan()
		{
			Strategy.RemoveUnitRole(C1Meta.C1DoubleGreaterThan);
		}


		virtual public global::Domain.I2 C1I2many2one
		{ 
			get
			{
				return (global::Domain.I2) Strategy.GetCompositeRole(C1Meta.C1I2many2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.C1I2many2one ,value);
			}
		}

		virtual public bool ExistC1I2many2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.C1I2many2one);
			}
		}

		virtual public void RemoveC1I2many2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.C1I2many2one);
		}


		virtual public global::Domain.I12 C1I12many2one
		{ 
			get
			{
				return (global::Domain.I12) Strategy.GetCompositeRole(C1Meta.C1I12many2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.C1I12many2one ,value);
			}
		}

		virtual public bool ExistC1I12many2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.C1I12many2one);
			}
		}

		virtual public void RemoveC1I12many2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.C1I12many2one);
		}



		virtual public global::System.DateTime? C1DateTimeLessThan 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(C1Meta.C1DateTimeLessThan);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1DateTimeLessThan, value);
			}
		}

		virtual public bool ExistC1DateTimeLessThan{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1DateTimeLessThan);
			}
		}

		virtual public void RemoveC1DateTimeLessThan()
		{
			Strategy.RemoveUnitRole(C1Meta.C1DateTimeLessThan);
		}



		virtual public global::System.DateTime? C1DateTimeBetweenA 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(C1Meta.C1DateTimeBetweenA);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1DateTimeBetweenA, value);
			}
		}

		virtual public bool ExistC1DateTimeBetweenA{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1DateTimeBetweenA);
			}
		}

		virtual public void RemoveC1DateTimeBetweenA()
		{
			Strategy.RemoveUnitRole(C1Meta.C1DateTimeBetweenA);
		}


		virtual public Allors.Extent<global::Domain.C2> C1C2many2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.C1C2many2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.C1C2many2many, value);
			}
		}

		virtual public void AddC1C2many2many (global::Domain.C2 value)
		{
			Strategy.AddCompositeRole(C1Meta.C1C2many2many, value);
		}

		virtual public void RemoveC1C2many2many (global::Domain.C2 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.C1C2many2many,value);
		}

		virtual public bool ExistC1C2many2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.C1C2many2many);
			}
		}

		virtual public void RemoveC1C2many2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.C1C2many2many);
		}


		virtual public global::Domain.S1 C1S1many2one
		{ 
			get
			{
				return (global::Domain.S1) Strategy.GetCompositeRole(C1Meta.C1S1many2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.C1S1many2one ,value);
			}
		}

		virtual public bool ExistC1S1many2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.C1S1many2one);
			}
		}

		virtual public void RemoveC1S1many2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.C1S1many2one);
		}


		virtual public Allors.Extent<global::Domain.I1> C1I1many2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.C1I1many2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.C1I1many2many, value);
			}
		}

		virtual public void AddC1I1many2many (global::Domain.I1 value)
		{
			Strategy.AddCompositeRole(C1Meta.C1I1many2many, value);
		}

		virtual public void RemoveC1I1many2many (global::Domain.I1 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.C1I1many2many,value);
		}

		virtual public bool ExistC1I1many2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.C1I1many2many);
			}
		}

		virtual public void RemoveC1I1many2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.C1I1many2many);
		}



		virtual public global::System.Double? C1DoubleLessThan 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(C1Meta.C1DoubleLessThan);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1DoubleLessThan, value);
			}
		}

		virtual public bool ExistC1DoubleLessThan{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1DoubleLessThan);
			}
		}

		virtual public void RemoveC1DoubleLessThan()
		{
			Strategy.RemoveUnitRole(C1Meta.C1DoubleLessThan);
		}


		virtual public global::Domain.I1 C1I1many2one
		{ 
			get
			{
				return (global::Domain.I1) Strategy.GetCompositeRole(C1Meta.C1I1many2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.C1I1many2one ,value);
			}
		}

		virtual public bool ExistC1I1many2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.C1I1many2one);
			}
		}

		virtual public void RemoveC1I1many2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.C1I1many2one);
		}



		virtual public global::System.Int64? C1LongGreaterThan 
		{
			get
			{
				return (global::System.Int64?) Strategy.GetUnitRole(C1Meta.C1LongGreaterThan);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1LongGreaterThan, value);
			}
		}

		virtual public bool ExistC1LongGreaterThan{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1LongGreaterThan);
			}
		}

		virtual public void RemoveC1LongGreaterThan()
		{
			Strategy.RemoveUnitRole(C1Meta.C1LongGreaterThan);
		}



		virtual public global::System.Decimal? C1DecimalGreaterThan 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(C1Meta.C1DecimalGreaterThan);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1DecimalGreaterThan, value);
			}
		}

		virtual public bool ExistC1DecimalGreaterThan{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1DecimalGreaterThan);
			}
		}

		virtual public void RemoveC1DecimalGreaterThan()
		{
			Strategy.RemoveUnitRole(C1Meta.C1DecimalGreaterThan);
		}



		virtual public global::System.Decimal? C1AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(C1Meta.C1AllorsDecimal);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1AllorsDecimal, value);
			}
		}

		virtual public bool ExistC1AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1AllorsDecimal);
			}
		}

		virtual public void RemoveC1AllorsDecimal()
		{
			Strategy.RemoveUnitRole(C1Meta.C1AllorsDecimal);
		}



		virtual public global::System.Int64? C1AllorsLong 
		{
			get
			{
				return (global::System.Int64?) Strategy.GetUnitRole(C1Meta.C1AllorsLong);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1AllorsLong, value);
			}
		}

		virtual public bool ExistC1AllorsLong{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1AllorsLong);
			}
		}

		virtual public void RemoveC1AllorsLong()
		{
			Strategy.RemoveUnitRole(C1Meta.C1AllorsLong);
		}


		virtual public global::Domain.S2 C1S2one2one
		{ 
			get
			{
				return (global::Domain.S2) Strategy.GetCompositeRole(C1Meta.C1S2one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.C1S2one2one ,value);
			}
		}

		virtual public bool ExistC1S2one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.C1S2one2one);
			}
		}

		virtual public void RemoveC1S2one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.C1S2one2one);
		}



		virtual public global::System.DateTime? C1DateTimeBetweenB 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(C1Meta.C1DateTimeBetweenB);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1DateTimeBetweenB, value);
			}
		}

		virtual public bool ExistC1DateTimeBetweenB{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1DateTimeBetweenB);
			}
		}

		virtual public void RemoveC1DateTimeBetweenB()
		{
			Strategy.RemoveUnitRole(C1Meta.C1DateTimeBetweenB);
		}



		virtual public global::System.Byte[] C1AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(C1Meta.C1AllorsBinary);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1AllorsBinary, value);
			}
		}

		virtual public bool ExistC1AllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1AllorsBinary);
			}
		}

		virtual public void RemoveC1AllorsBinary()
		{
			Strategy.RemoveUnitRole(C1Meta.C1AllorsBinary);
		}



		virtual public global::System.DateTime? C1DateTimeGreaterThan 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(C1Meta.C1DateTimeGreaterThan);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1DateTimeGreaterThan, value);
			}
		}

		virtual public bool ExistC1DateTimeGreaterThan{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1DateTimeGreaterThan);
			}
		}

		virtual public void RemoveC1DateTimeGreaterThan()
		{
			Strategy.RemoveUnitRole(C1Meta.C1DateTimeGreaterThan);
		}


		virtual public global::Domain.S1 C1S1one2one
		{ 
			get
			{
				return (global::Domain.S1) Strategy.GetCompositeRole(C1Meta.C1S1one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.C1S1one2one ,value);
			}
		}

		virtual public bool ExistC1S1one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.C1S1one2one);
			}
		}

		virtual public void RemoveC1S1one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.C1S1one2one);
		}


		virtual public Allors.Extent<global::Domain.C1> C1C1one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.C1C1one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.C1C1one2many, value);
			}
		}

		virtual public void AddC1C1one2many (global::Domain.C1 value)
		{
			Strategy.AddCompositeRole(C1Meta.C1C1one2many, value);
		}

		virtual public void RemoveC1C1one2many (global::Domain.C1 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.C1C1one2many,value);
		}

		virtual public bool ExistC1C1one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.C1C1one2many);
			}
		}

		virtual public void RemoveC1C1one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.C1C1one2many);
		}


		virtual public Allors.Extent<global::Domain.I1> C1I1one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.C1I1one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.C1I1one2many, value);
			}
		}

		virtual public void AddC1I1one2many (global::Domain.I1 value)
		{
			Strategy.AddCompositeRole(C1Meta.C1I1one2many, value);
		}

		virtual public void RemoveC1I1one2many (global::Domain.I1 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.C1I1one2many,value);
		}

		virtual public bool ExistC1I1one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.C1I1one2many);
			}
		}

		virtual public void RemoveC1I1one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.C1I1one2many);
		}


		virtual public global::Domain.C2 C1C2many2one
		{ 
			get
			{
				return (global::Domain.C2) Strategy.GetCompositeRole(C1Meta.C1C2many2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.C1C2many2one ,value);
			}
		}

		virtual public bool ExistC1C2many2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.C1C2many2one);
			}
		}

		virtual public void RemoveC1C2many2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.C1C2many2one);
		}


		virtual public Allors.Extent<global::Domain.I12> C1I12one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.C1I12one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.C1I12one2many, value);
			}
		}

		virtual public void AddC1I12one2many (global::Domain.I12 value)
		{
			Strategy.AddCompositeRole(C1Meta.C1I12one2many, value);
		}

		virtual public void RemoveC1I12one2many (global::Domain.I12 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.C1I12one2many,value);
		}

		virtual public bool ExistC1I12one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.C1I12one2many);
			}
		}

		virtual public void RemoveC1I12one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.C1I12one2many);
		}


		virtual public global::Domain.S2 C1S2many2many
		{ 
			get
			{
				return (global::Domain.S2) Strategy.GetCompositeRole(C1Meta.C1S2many2many);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.C1S2many2many ,value);
			}
		}

		virtual public bool ExistC1S2many2many
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.C1S2many2many);
			}
		}

		virtual public void RemoveC1S2many2many()
		{
			Strategy.RemoveCompositeRole(C1Meta.C1S2many2many);
		}


		virtual public global::Domain.C2 C1C2one2one
		{ 
			get
			{
				return (global::Domain.C2) Strategy.GetCompositeRole(C1Meta.C1C2one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.C1C2one2one ,value);
			}
		}

		virtual public bool ExistC1C2one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.C1C2one2one);
			}
		}

		virtual public void RemoveC1C2one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.C1C2one2one);
		}



		virtual public global::System.Boolean? C1AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(C1Meta.C1AllorsBoolean);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1AllorsBoolean, value);
			}
		}

		virtual public bool ExistC1AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1AllorsBoolean);
			}
		}

		virtual public void RemoveC1AllorsBoolean()
		{
			Strategy.RemoveUnitRole(C1Meta.C1AllorsBoolean);
		}


		virtual public Allors.Extent<global::Domain.I12> C1I12many2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.C1I12many2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.C1I12many2many, value);
			}
		}

		virtual public void AddC1I12many2many (global::Domain.I12 value)
		{
			Strategy.AddCompositeRole(C1Meta.C1I12many2many, value);
		}

		virtual public void RemoveC1I12many2many (global::Domain.I12 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.C1I12many2many,value);
		}

		virtual public bool ExistC1I12many2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.C1I12many2many);
			}
		}

		virtual public void RemoveC1I12many2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.C1I12many2many);
		}


		virtual public Allors.Extent<global::Domain.I2> C1I2many2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.C1I2many2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.C1I2many2many, value);
			}
		}

		virtual public void AddC1I2many2many (global::Domain.I2 value)
		{
			Strategy.AddCompositeRole(C1Meta.C1I2many2many, value);
		}

		virtual public void RemoveC1I2many2many (global::Domain.I2 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.C1I2many2many,value);
		}

		virtual public bool ExistC1I2many2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.C1I2many2many);
			}
		}

		virtual public void RemoveC1I2many2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.C1I2many2many);
		}



		virtual public global::System.Guid? C1AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(C1Meta.C1AllorsUnique);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1AllorsUnique, value);
			}
		}

		virtual public bool ExistC1AllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1AllorsUnique);
			}
		}

		virtual public void RemoveC1AllorsUnique()
		{
			Strategy.RemoveUnitRole(C1Meta.C1AllorsUnique);
		}


		virtual public global::Domain.C3 C1C3one2one
		{ 
			get
			{
				return (global::Domain.C3) Strategy.GetCompositeRole(C1Meta.C1C3one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.C1C3one2one ,value);
			}
		}

		virtual public bool ExistC1C3one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.C1C3one2one);
			}
		}

		virtual public void RemoveC1C3one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.C1C3one2one);
		}


		virtual public Allors.Extent<global::Domain.C3> C1C3many2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.C1C3many2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.C1C3many2many, value);
			}
		}

		virtual public void AddC1C3many2many (global::Domain.C3 value)
		{
			Strategy.AddCompositeRole(C1Meta.C1C3many2many, value);
		}

		virtual public void RemoveC1C3many2many (global::Domain.C3 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.C1C3many2many,value);
		}

		virtual public bool ExistC1C3many2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.C1C3many2many);
			}
		}

		virtual public void RemoveC1C3many2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.C1C3many2many);
		}



		virtual public global::System.String C1StringEquals 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(C1Meta.C1StringEquals);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1StringEquals, value);
			}
		}

		virtual public bool ExistC1StringEquals{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1StringEquals);
			}
		}

		virtual public void RemoveC1StringEquals()
		{
			Strategy.RemoveUnitRole(C1Meta.C1StringEquals);
		}



		virtual public global::System.Int64? C1LongBetweenA 
		{
			get
			{
				return (global::System.Int64?) Strategy.GetUnitRole(C1Meta.C1LongBetweenA);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1LongBetweenA, value);
			}
		}

		virtual public bool ExistC1LongBetweenA{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1LongBetweenA);
			}
		}

		virtual public void RemoveC1LongBetweenA()
		{
			Strategy.RemoveUnitRole(C1Meta.C1LongBetweenA);
		}



		virtual public global::System.Int32? C1IntegerGreaterThan 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(C1Meta.C1IntegerGreaterThan);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1IntegerGreaterThan, value);
			}
		}

		virtual public bool ExistC1IntegerGreaterThan{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1IntegerGreaterThan);
			}
		}

		virtual public void RemoveC1IntegerGreaterThan()
		{
			Strategy.RemoveUnitRole(C1Meta.C1IntegerGreaterThan);
		}


		virtual public global::Domain.C3 C3may2one
		{ 
			get
			{
				return (global::Domain.C3) Strategy.GetCompositeRole(C1Meta.C3may2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.C3may2one ,value);
			}
		}

		virtual public bool ExistC3may2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.C3may2one);
			}
		}

		virtual public void RemoveC3may2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.C3may2one);
		}



		virtual public global::System.Int32? C1IntegerBetweenB 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(C1Meta.C1IntegerBetweenB);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1IntegerBetweenB, value);
			}
		}

		virtual public bool ExistC1IntegerBetweenB{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1IntegerBetweenB);
			}
		}

		virtual public void RemoveC1IntegerBetweenB()
		{
			Strategy.RemoveUnitRole(C1Meta.C1IntegerBetweenB);
		}


		virtual public global::Domain.A1 A1
		{ 
			get
			{
				return (global::Domain.A1) Strategy.GetCompositeRole(C1Meta.A1);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.A1 ,value);
			}
		}

		virtual public bool ExistA1
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.A1);
			}
		}

		virtual public void RemoveA1()
		{
			Strategy.RemoveCompositeRole(C1Meta.A1);
		}



		virtual public global::System.DateTime? C1AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(C1Meta.C1AllorsDateTime);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1AllorsDateTime, value);
			}
		}

		virtual public bool ExistC1AllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1AllorsDateTime);
			}
		}

		virtual public void RemoveC1AllorsDateTime()
		{
			Strategy.RemoveUnitRole(C1Meta.C1AllorsDateTime);
		}



		virtual public global::System.Int32? C1IntegerBetweenA 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(C1Meta.C1IntegerBetweenA);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1IntegerBetweenA, value);
			}
		}

		virtual public bool ExistC1IntegerBetweenA{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1IntegerBetweenA);
			}
		}

		virtual public void RemoveC1IntegerBetweenA()
		{
			Strategy.RemoveUnitRole(C1Meta.C1IntegerBetweenA);
		}



		virtual public global::System.Double? C1AllorsDouble 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(C1Meta.C1AllorsDouble);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1AllorsDouble, value);
			}
		}

		virtual public bool ExistC1AllorsDouble{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1AllorsDouble);
			}
		}

		virtual public void RemoveC1AllorsDouble()
		{
			Strategy.RemoveUnitRole(C1Meta.C1AllorsDouble);
		}



		virtual public global::System.Int64? C1LongBetweenB 
		{
			get
			{
				return (global::System.Int64?) Strategy.GetUnitRole(C1Meta.C1LongBetweenB);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1LongBetweenB, value);
			}
		}

		virtual public bool ExistC1LongBetweenB{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1LongBetweenB);
			}
		}

		virtual public void RemoveC1LongBetweenB()
		{
			Strategy.RemoveUnitRole(C1Meta.C1LongBetweenB);
		}


		virtual public Allors.Extent<global::Domain.C2> C1C2one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.C1C2one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.C1C2one2many, value);
			}
		}

		virtual public void AddC1C2one2many (global::Domain.C2 value)
		{
			Strategy.AddCompositeRole(C1Meta.C1C2one2many, value);
		}

		virtual public void RemoveC1C2one2many (global::Domain.C2 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.C1C2one2many,value);
		}

		virtual public bool ExistC1C2one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.C1C2one2many);
			}
		}

		virtual public void RemoveC1C2one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.C1C2one2many);
		}


		virtual public Allors.Extent<global::Domain.S2> C1S2one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.C1S2one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.C1S2one2many, value);
			}
		}

		virtual public void AddC1S2one2many (global::Domain.S2 value)
		{
			Strategy.AddCompositeRole(C1Meta.C1S2one2many, value);
		}

		virtual public void RemoveC1S2one2many (global::Domain.S2 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.C1S2one2many,value);
		}

		virtual public bool ExistC1S2one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.C1S2one2many);
			}
		}

		virtual public void RemoveC1S2one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.C1S2one2many);
		}



		virtual public global::System.Int32? C1AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(C1Meta.C1AllorsInteger);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1AllorsInteger, value);
			}
		}

		virtual public bool ExistC1AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1AllorsInteger);
			}
		}

		virtual public void RemoveC1AllorsInteger()
		{
			Strategy.RemoveUnitRole(C1Meta.C1AllorsInteger);
		}



		virtual public global::System.Decimal? C1DecimalLessThan 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(C1Meta.C1DecimalLessThan);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.C1DecimalLessThan, value);
			}
		}

		virtual public bool ExistC1DecimalLessThan{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.C1DecimalLessThan);
			}
		}

		virtual public void RemoveC1DecimalLessThan()
		{
			Strategy.RemoveUnitRole(C1Meta.C1DecimalLessThan);
		}


		virtual public Allors.Extent<global::Domain.C3> C1C3one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.C1C3one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.C1C3one2many, value);
			}
		}

		virtual public void AddC1C3one2many (global::Domain.C3 value)
		{
			Strategy.AddCompositeRole(C1Meta.C1C3one2many, value);
		}

		virtual public void RemoveC1C3one2many (global::Domain.C3 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.C1C3one2many,value);
		}

		virtual public bool ExistC1C3one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.C1C3one2many);
			}
		}

		virtual public void RemoveC1C3one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.C1C3one2many);
		}


		virtual public Allors.Extent<global::Domain.I34> I1I34one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.I1I34one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.I1I34one2many, value);
			}
		}

		virtual public void AddI1I34one2many (global::Domain.I34 value)
		{
			Strategy.AddCompositeRole(C1Meta.I1I34one2many, value);
		}

		virtual public void RemoveI1I34one2many (global::Domain.I34 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.I1I34one2many,value);
		}

		virtual public bool ExistI1I34one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.I1I34one2many);
			}
		}

		virtual public void RemoveI1I34one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.I1I34one2many);
		}


		virtual public Allors.Extent<global::Domain.I2> I1I2one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.I1I2one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.I1I2one2many, value);
			}
		}

		virtual public void AddI1I2one2many (global::Domain.I2 value)
		{
			Strategy.AddCompositeRole(C1Meta.I1I2one2many, value);
		}

		virtual public void RemoveI1I2one2many (global::Domain.I2 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.I1I2one2many,value);
		}

		virtual public bool ExistI1I2one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.I1I2one2many);
			}
		}

		virtual public void RemoveI1I2one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.I1I2one2many);
		}


		virtual public global::Domain.I2 I1I2many2one
		{ 
			get
			{
				return (global::Domain.I2) Strategy.GetCompositeRole(C1Meta.I1I2many2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.I1I2many2one ,value);
			}
		}

		virtual public bool ExistI1I2many2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.I1I2many2one);
			}
		}

		virtual public void RemoveI1I2many2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.I1I2many2one);
		}


		virtual public global::Domain.C2 I1C2many2one
		{ 
			get
			{
				return (global::Domain.C2) Strategy.GetCompositeRole(C1Meta.I1C2many2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.I1C2many2one ,value);
			}
		}

		virtual public bool ExistI1C2many2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.I1C2many2one);
			}
		}

		virtual public void RemoveI1C2many2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.I1C2many2one);
		}


		virtual public global::Domain.C2 I1C2one2one
		{ 
			get
			{
				return (global::Domain.C2) Strategy.GetCompositeRole(C1Meta.I1C2one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.I1C2one2one ,value);
			}
		}

		virtual public bool ExistI1C2one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.I1C2one2one);
			}
		}

		virtual public void RemoveI1C2one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.I1C2one2one);
		}



		virtual public global::System.Decimal? I1DecimalBetweenA 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(C1Meta.I1DecimalBetweenA);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1DecimalBetweenA, value);
			}
		}

		virtual public bool ExistI1DecimalBetweenA{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1DecimalBetweenA);
			}
		}

		virtual public void RemoveI1DecimalBetweenA()
		{
			Strategy.RemoveUnitRole(C1Meta.I1DecimalBetweenA);
		}


		virtual public global::Domain.S1 I1S1one2one
		{ 
			get
			{
				return (global::Domain.S1) Strategy.GetCompositeRole(C1Meta.I1S1one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.I1S1one2one ,value);
			}
		}

		virtual public bool ExistI1S1one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.I1S1one2one);
			}
		}

		virtual public void RemoveI1S1one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.I1S1one2one);
		}


		virtual public global::Domain.I12 I1I12many2one
		{ 
			get
			{
				return (global::Domain.I12) Strategy.GetCompositeRole(C1Meta.I1I12many2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.I1I12many2one ,value);
			}
		}

		virtual public bool ExistI1I12many2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.I1I12many2one);
			}
		}

		virtual public void RemoveI1I12many2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.I1I12many2one);
		}



		virtual public global::System.String I1AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(C1Meta.I1AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1AllorsString, value);
			}
		}

		virtual public bool ExistI1AllorsString{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1AllorsString);
			}
		}

		virtual public void RemoveI1AllorsString()
		{
			Strategy.RemoveUnitRole(C1Meta.I1AllorsString);
		}



		virtual public global::System.DateTime? I1DateTimeLessThan 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(C1Meta.I1DateTimeLessThan);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1DateTimeLessThan, value);
			}
		}

		virtual public bool ExistI1DateTimeLessThan{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1DateTimeLessThan);
			}
		}

		virtual public void RemoveI1DateTimeLessThan()
		{
			Strategy.RemoveUnitRole(C1Meta.I1DateTimeLessThan);
		}


		virtual public Allors.Extent<global::Domain.C2> I1C2one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.I1C2one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.I1C2one2many, value);
			}
		}

		virtual public void AddI1C2one2many (global::Domain.C2 value)
		{
			Strategy.AddCompositeRole(C1Meta.I1C2one2many, value);
		}

		virtual public void RemoveI1C2one2many (global::Domain.C2 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.I1C2one2many,value);
		}

		virtual public bool ExistI1C2one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.I1C2one2many);
			}
		}

		virtual public void RemoveI1C2one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.I1C2one2many);
		}



		virtual public global::System.String I1StringLarge 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(C1Meta.I1StringLarge);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1StringLarge, value);
			}
		}

		virtual public bool ExistI1StringLarge{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1StringLarge);
			}
		}

		virtual public void RemoveI1StringLarge()
		{
			Strategy.RemoveUnitRole(C1Meta.I1StringLarge);
		}



		virtual public global::System.Double? I1DoubleLessThan 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(C1Meta.I1DoubleLessThan);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1DoubleLessThan, value);
			}
		}

		virtual public bool ExistI1DoubleLessThan{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1DoubleLessThan);
			}
		}

		virtual public void RemoveI1DoubleLessThan()
		{
			Strategy.RemoveUnitRole(C1Meta.I1DoubleLessThan);
		}



		virtual public global::System.DateTime? I1AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(C1Meta.I1AllorsDateTime);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1AllorsDateTime, value);
			}
		}

		virtual public bool ExistI1AllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1AllorsDateTime);
			}
		}

		virtual public void RemoveI1AllorsDateTime()
		{
			Strategy.RemoveUnitRole(C1Meta.I1AllorsDateTime);
		}


		virtual public global::Domain.C1 I1C1many2one
		{ 
			get
			{
				return (global::Domain.C1) Strategy.GetCompositeRole(C1Meta.I1C1many2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.I1C1many2one ,value);
			}
		}

		virtual public bool ExistI1C1many2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.I1C1many2one);
			}
		}

		virtual public void RemoveI1C1many2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.I1C1many2one);
		}



		virtual public global::System.Int64? I1LongBetweenB 
		{
			get
			{
				return (global::System.Int64?) Strategy.GetUnitRole(C1Meta.I1LongBetweenB);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1LongBetweenB, value);
			}
		}

		virtual public bool ExistI1LongBetweenB{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1LongBetweenB);
			}
		}

		virtual public void RemoveI1LongBetweenB()
		{
			Strategy.RemoveUnitRole(C1Meta.I1LongBetweenB);
		}


		virtual public global::Domain.I12 I1I12one2one
		{ 
			get
			{
				return (global::Domain.I12) Strategy.GetCompositeRole(C1Meta.I1I12one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.I1I12one2one ,value);
			}
		}

		virtual public bool ExistI1I12one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.I1I12one2one);
			}
		}

		virtual public void RemoveI1I12one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.I1I12one2one);
		}



		virtual public global::System.Decimal? I1DecimalGreaterThan 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(C1Meta.I1DecimalGreaterThan);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1DecimalGreaterThan, value);
			}
		}

		virtual public bool ExistI1DecimalGreaterThan{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1DecimalGreaterThan);
			}
		}

		virtual public void RemoveI1DecimalGreaterThan()
		{
			Strategy.RemoveUnitRole(C1Meta.I1DecimalGreaterThan);
		}


		virtual public global::Domain.C1 I1C1one2one
		{ 
			get
			{
				return (global::Domain.C1) Strategy.GetCompositeRole(C1Meta.I1C1one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.I1C1one2one ,value);
			}
		}

		virtual public bool ExistI1C1one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.I1C1one2one);
			}
		}

		virtual public void RemoveI1C1one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.I1C1one2one);
		}



		virtual public global::System.Int64? I1LongLessThan 
		{
			get
			{
				return (global::System.Int64?) Strategy.GetUnitRole(C1Meta.I1LongLessThan);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1LongLessThan, value);
			}
		}

		virtual public bool ExistI1LongLessThan{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1LongLessThan);
			}
		}

		virtual public void RemoveI1LongLessThan()
		{
			Strategy.RemoveUnitRole(C1Meta.I1LongLessThan);
		}


		virtual public Allors.Extent<global::Domain.I2> I1I2many2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.I1I2many2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.I1I2many2many, value);
			}
		}

		virtual public void AddI1I2many2many (global::Domain.I2 value)
		{
			Strategy.AddCompositeRole(C1Meta.I1I2many2many, value);
		}

		virtual public void RemoveI1I2many2many (global::Domain.I2 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.I1I2many2many,value);
		}

		virtual public bool ExistI1I2many2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.I1I2many2many);
			}
		}

		virtual public void RemoveI1I2many2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.I1I2many2many);
		}



		virtual public global::System.Int32? I1IntegerBetweenA 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(C1Meta.I1IntegerBetweenA);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1IntegerBetweenA, value);
			}
		}

		virtual public bool ExistI1IntegerBetweenA{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1IntegerBetweenA);
			}
		}

		virtual public void RemoveI1IntegerBetweenA()
		{
			Strategy.RemoveUnitRole(C1Meta.I1IntegerBetweenA);
		}


		virtual public global::Domain.I34 I1I34many2one
		{ 
			get
			{
				return (global::Domain.I34) Strategy.GetCompositeRole(C1Meta.I1I34many2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.I1I34many2one ,value);
			}
		}

		virtual public bool ExistI1I34many2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.I1I34many2one);
			}
		}

		virtual public void RemoveI1I34many2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.I1I34many2one);
		}



		virtual public global::System.Double? I1DoubleBetweenA 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(C1Meta.I1DoubleBetweenA);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1DoubleBetweenA, value);
			}
		}

		virtual public bool ExistI1DoubleBetweenA{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1DoubleBetweenA);
			}
		}

		virtual public void RemoveI1DoubleBetweenA()
		{
			Strategy.RemoveUnitRole(C1Meta.I1DoubleBetweenA);
		}



		virtual public global::System.Int32? I1IntegerLessThan 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(C1Meta.I1IntegerLessThan);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1IntegerLessThan, value);
			}
		}

		virtual public bool ExistI1IntegerLessThan{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1IntegerLessThan);
			}
		}

		virtual public void RemoveI1IntegerLessThan()
		{
			Strategy.RemoveUnitRole(C1Meta.I1IntegerLessThan);
		}



		virtual public global::System.Int32? I1AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(C1Meta.I1AllorsInteger);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1AllorsInteger, value);
			}
		}

		virtual public bool ExistI1AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1AllorsInteger);
			}
		}

		virtual public void RemoveI1AllorsInteger()
		{
			Strategy.RemoveUnitRole(C1Meta.I1AllorsInteger);
		}


		virtual public global::Domain.S2 I1S2one2one
		{ 
			get
			{
				return (global::Domain.S2) Strategy.GetCompositeRole(C1Meta.I1S2one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.I1S2one2one ,value);
			}
		}

		virtual public bool ExistI1S2one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.I1S2one2one);
			}
		}

		virtual public void RemoveI1S2one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.I1S2one2one);
		}



		virtual public global::System.Boolean? I1AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(C1Meta.I1AllorsBoolean);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1AllorsBoolean, value);
			}
		}

		virtual public bool ExistI1AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1AllorsBoolean);
			}
		}

		virtual public void RemoveI1AllorsBoolean()
		{
			Strategy.RemoveUnitRole(C1Meta.I1AllorsBoolean);
		}


		virtual public global::Domain.I1 I1I1many2one
		{ 
			get
			{
				return (global::Domain.I1) Strategy.GetCompositeRole(C1Meta.I1I1many2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.I1I1many2one ,value);
			}
		}

		virtual public bool ExistI1I1many2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.I1I1many2one);
			}
		}

		virtual public void RemoveI1I1many2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.I1I1many2one);
		}


		virtual public Allors.Extent<global::Domain.C1> I1C1many2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.I1C1many2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.I1C1many2many, value);
			}
		}

		virtual public void AddI1C1many2many (global::Domain.C1 value)
		{
			Strategy.AddCompositeRole(C1Meta.I1C1many2many, value);
		}

		virtual public void RemoveI1C1many2many (global::Domain.C1 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.I1C1many2many,value);
		}

		virtual public bool ExistI1C1many2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.I1C1many2many);
			}
		}

		virtual public void RemoveI1C1many2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.I1C1many2many);
		}


		virtual public global::Domain.I2 I1I2one2one
		{ 
			get
			{
				return (global::Domain.I2) Strategy.GetCompositeRole(C1Meta.I1I2one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.I1I2one2one ,value);
			}
		}

		virtual public bool ExistI1I2one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.I1I2one2one);
			}
		}

		virtual public void RemoveI1I2one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.I1I2one2one);
		}



		virtual public global::System.Int64? I1AllorsLong 
		{
			get
			{
				return (global::System.Int64?) Strategy.GetUnitRole(C1Meta.I1AllorsLong);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1AllorsLong, value);
			}
		}

		virtual public bool ExistI1AllorsLong{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1AllorsLong);
			}
		}

		virtual public void RemoveI1AllorsLong()
		{
			Strategy.RemoveUnitRole(C1Meta.I1AllorsLong);
		}



		virtual public global::System.Decimal? I1AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(C1Meta.I1AllorsDecimal);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1AllorsDecimal, value);
			}
		}

		virtual public bool ExistI1AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1AllorsDecimal);
			}
		}

		virtual public void RemoveI1AllorsDecimal()
		{
			Strategy.RemoveUnitRole(C1Meta.I1AllorsDecimal);
		}


		virtual public Allors.Extent<global::Domain.S1> I1S1many2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.I1S1many2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.I1S1many2many, value);
			}
		}

		virtual public void AddI1S1many2many (global::Domain.S1 value)
		{
			Strategy.AddCompositeRole(C1Meta.I1S1many2many, value);
		}

		virtual public void RemoveI1S1many2many (global::Domain.S1 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.I1S1many2many,value);
		}

		virtual public bool ExistI1S1many2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.I1S1many2many);
			}
		}

		virtual public void RemoveI1S1many2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.I1S1many2many);
		}



		virtual public global::System.DateTime? I1DateTimeGreaterThan 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(C1Meta.I1DateTimeGreaterThan);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1DateTimeGreaterThan, value);
			}
		}

		virtual public bool ExistI1DateTimeGreaterThan{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1DateTimeGreaterThan);
			}
		}

		virtual public void RemoveI1DateTimeGreaterThan()
		{
			Strategy.RemoveUnitRole(C1Meta.I1DateTimeGreaterThan);
		}


		virtual public Allors.Extent<global::Domain.I34> I1I34many2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.I1I34many2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.I1I34many2many, value);
			}
		}

		virtual public void AddI1I34many2many (global::Domain.I34 value)
		{
			Strategy.AddCompositeRole(C1Meta.I1I34many2many, value);
		}

		virtual public void RemoveI1I34many2many (global::Domain.I34 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.I1I34many2many,value);
		}

		virtual public bool ExistI1I34many2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.I1I34many2many);
			}
		}

		virtual public void RemoveI1I34many2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.I1I34many2many);
		}


		virtual public global::Domain.I34 I1I34one2one
		{ 
			get
			{
				return (global::Domain.I34) Strategy.GetCompositeRole(C1Meta.I1I34one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.I1I34one2one ,value);
			}
		}

		virtual public bool ExistI1I34one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.I1I34one2one);
			}
		}

		virtual public void RemoveI1I34one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.I1I34one2one);
		}


		virtual public Allors.Extent<global::Domain.I1> I1I1one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.I1I1one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.I1I1one2many, value);
			}
		}

		virtual public void AddI1I1one2many (global::Domain.I1 value)
		{
			Strategy.AddCompositeRole(C1Meta.I1I1one2many, value);
		}

		virtual public void RemoveI1I1one2many (global::Domain.I1 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.I1I1one2many,value);
		}

		virtual public bool ExistI1I1one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.I1I1one2many);
			}
		}

		virtual public void RemoveI1I1one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.I1I1one2many);
		}


		virtual public Allors.Extent<global::Domain.I1> I1I1many2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.I1I1many2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.I1I1many2many, value);
			}
		}

		virtual public void AddI1I1many2many (global::Domain.I1 value)
		{
			Strategy.AddCompositeRole(C1Meta.I1I1many2many, value);
		}

		virtual public void RemoveI1I1many2many (global::Domain.I1 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.I1I1many2many,value);
		}

		virtual public bool ExistI1I1many2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.I1I1many2many);
			}
		}

		virtual public void RemoveI1I1many2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.I1I1many2many);
		}


		virtual public Allors.Extent<global::Domain.S2> I1S2many2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.I1S2many2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.I1S2many2many, value);
			}
		}

		virtual public void AddI1S2many2many (global::Domain.S2 value)
		{
			Strategy.AddCompositeRole(C1Meta.I1S2many2many, value);
		}

		virtual public void RemoveI1S2many2many (global::Domain.S2 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.I1S2many2many,value);
		}

		virtual public bool ExistI1S2many2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.I1S2many2many);
			}
		}

		virtual public void RemoveI1S2many2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.I1S2many2many);
		}


		virtual public Allors.Extent<global::Domain.I12> I1I12many2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.I1I12many2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.I1I12many2many, value);
			}
		}

		virtual public void AddI1I12many2many (global::Domain.I12 value)
		{
			Strategy.AddCompositeRole(C1Meta.I1I12many2many, value);
		}

		virtual public void RemoveI1I12many2many (global::Domain.I12 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.I1I12many2many,value);
		}

		virtual public bool ExistI1I12many2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.I1I12many2many);
			}
		}

		virtual public void RemoveI1I12many2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.I1I12many2many);
		}



		virtual public global::System.String I1StringEquals 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(C1Meta.I1StringEquals);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1StringEquals, value);
			}
		}

		virtual public bool ExistI1StringEquals{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1StringEquals);
			}
		}

		virtual public void RemoveI1StringEquals()
		{
			Strategy.RemoveUnitRole(C1Meta.I1StringEquals);
		}



		virtual public global::System.Int64? I1LongGreaterThan 
		{
			get
			{
				return (global::System.Int64?) Strategy.GetUnitRole(C1Meta.I1LongGreaterThan);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1LongGreaterThan, value);
			}
		}

		virtual public bool ExistI1LongGreaterThan{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1LongGreaterThan);
			}
		}

		virtual public void RemoveI1LongGreaterThan()
		{
			Strategy.RemoveUnitRole(C1Meta.I1LongGreaterThan);
		}


		virtual public Allors.Extent<global::Domain.I12> I1I12one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.I1I12one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.I1I12one2many, value);
			}
		}

		virtual public void AddI1I12one2many (global::Domain.I12 value)
		{
			Strategy.AddCompositeRole(C1Meta.I1I12one2many, value);
		}

		virtual public void RemoveI1I12one2many (global::Domain.I12 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.I1I12one2many,value);
		}

		virtual public bool ExistI1I12one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.I1I12one2many);
			}
		}

		virtual public void RemoveI1I12one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.I1I12one2many);
		}


		virtual public Allors.Extent<global::Domain.S2> I1S2one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.I1S2one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.I1S2one2many, value);
			}
		}

		virtual public void AddI1S2one2many (global::Domain.S2 value)
		{
			Strategy.AddCompositeRole(C1Meta.I1S2one2many, value);
		}

		virtual public void RemoveI1S2one2many (global::Domain.S2 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.I1S2one2many,value);
		}

		virtual public bool ExistI1S2one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.I1S2one2many);
			}
		}

		virtual public void RemoveI1S2one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.I1S2one2many);
		}


		virtual public Allors.Extent<global::Domain.C2> I1C2many2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.I1C2many2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.I1C2many2many, value);
			}
		}

		virtual public void AddI1C2many2many (global::Domain.C2 value)
		{
			Strategy.AddCompositeRole(C1Meta.I1C2many2many, value);
		}

		virtual public void RemoveI1C2many2many (global::Domain.C2 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.I1C2many2many,value);
		}

		virtual public bool ExistI1C2many2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.I1C2many2many);
			}
		}

		virtual public void RemoveI1C2many2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.I1C2many2many);
		}



		virtual public global::System.Byte[] I1AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(C1Meta.I1AllorsBinary);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1AllorsBinary, value);
			}
		}

		virtual public bool ExistI1AllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1AllorsBinary);
			}
		}

		virtual public void RemoveI1AllorsBinary()
		{
			Strategy.RemoveUnitRole(C1Meta.I1AllorsBinary);
		}



		virtual public global::System.Decimal? I1DecimalBetweenB 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(C1Meta.I1DecimalBetweenB);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1DecimalBetweenB, value);
			}
		}

		virtual public bool ExistI1DecimalBetweenB{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1DecimalBetweenB);
			}
		}

		virtual public void RemoveI1DecimalBetweenB()
		{
			Strategy.RemoveUnitRole(C1Meta.I1DecimalBetweenB);
		}



		virtual public global::System.Int64? I1LongBetweenA 
		{
			get
			{
				return (global::System.Int64?) Strategy.GetUnitRole(C1Meta.I1LongBetweenA);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1LongBetweenA, value);
			}
		}

		virtual public bool ExistI1LongBetweenA{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1LongBetweenA);
			}
		}

		virtual public void RemoveI1LongBetweenA()
		{
			Strategy.RemoveUnitRole(C1Meta.I1LongBetweenA);
		}



		virtual public global::System.Double? I1DoubleGreaterThan 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(C1Meta.I1DoubleGreaterThan);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1DoubleGreaterThan, value);
			}
		}

		virtual public bool ExistI1DoubleGreaterThan{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1DoubleGreaterThan);
			}
		}

		virtual public void RemoveI1DoubleGreaterThan()
		{
			Strategy.RemoveUnitRole(C1Meta.I1DoubleGreaterThan);
		}



		virtual public global::System.Int32? I1IntegerBetweenB 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(C1Meta.I1IntegerBetweenB);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1IntegerBetweenB, value);
			}
		}

		virtual public bool ExistI1IntegerBetweenB{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1IntegerBetweenB);
			}
		}

		virtual public void RemoveI1IntegerBetweenB()
		{
			Strategy.RemoveUnitRole(C1Meta.I1IntegerBetweenB);
		}



		virtual public global::System.DateTime? I1DateTimeBetweenA 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(C1Meta.I1DateTimeBetweenA);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1DateTimeBetweenA, value);
			}
		}

		virtual public bool ExistI1DateTimeBetweenA{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1DateTimeBetweenA);
			}
		}

		virtual public void RemoveI1DateTimeBetweenA()
		{
			Strategy.RemoveUnitRole(C1Meta.I1DateTimeBetweenA);
		}



		virtual public global::System.Double? I1AllorsDouble 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(C1Meta.I1AllorsDouble);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1AllorsDouble, value);
			}
		}

		virtual public bool ExistI1AllorsDouble{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1AllorsDouble);
			}
		}

		virtual public void RemoveI1AllorsDouble()
		{
			Strategy.RemoveUnitRole(C1Meta.I1AllorsDouble);
		}


		virtual public Allors.Extent<global::Domain.S1> I1S1one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.I1S1one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.I1S1one2many, value);
			}
		}

		virtual public void AddI1S1one2many (global::Domain.S1 value)
		{
			Strategy.AddCompositeRole(C1Meta.I1S1one2many, value);
		}

		virtual public void RemoveI1S1one2many (global::Domain.S1 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.I1S1one2many,value);
		}

		virtual public bool ExistI1S1one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.I1S1one2many);
			}
		}

		virtual public void RemoveI1S1one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.I1S1one2many);
		}


		virtual public global::Domain.I1 I1I1one2one
		{ 
			get
			{
				return (global::Domain.I1) Strategy.GetCompositeRole(C1Meta.I1I1one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.I1I1one2one ,value);
			}
		}

		virtual public bool ExistI1I1one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.I1I1one2one);
			}
		}

		virtual public void RemoveI1I1one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.I1I1one2one);
		}



		virtual public global::System.Int32? I1IntegerGreaterThan 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(C1Meta.I1IntegerGreaterThan);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1IntegerGreaterThan, value);
			}
		}

		virtual public bool ExistI1IntegerGreaterThan{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1IntegerGreaterThan);
			}
		}

		virtual public void RemoveI1IntegerGreaterThan()
		{
			Strategy.RemoveUnitRole(C1Meta.I1IntegerGreaterThan);
		}


		virtual public global::Domain.S1 I1S1many2one
		{ 
			get
			{
				return (global::Domain.S1) Strategy.GetCompositeRole(C1Meta.I1S1many2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.I1S1many2one ,value);
			}
		}

		virtual public bool ExistI1S1many2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.I1S1many2one);
			}
		}

		virtual public void RemoveI1S1many2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.I1S1many2one);
		}



		virtual public global::System.Double? I1DoubleBetweenB 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(C1Meta.I1DoubleBetweenB);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1DoubleBetweenB, value);
			}
		}

		virtual public bool ExistI1DoubleBetweenB{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1DoubleBetweenB);
			}
		}

		virtual public void RemoveI1DoubleBetweenB()
		{
			Strategy.RemoveUnitRole(C1Meta.I1DoubleBetweenB);
		}



		virtual public global::System.Decimal? I1DecimalLessThan 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(C1Meta.I1DecimalLessThan);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1DecimalLessThan, value);
			}
		}

		virtual public bool ExistI1DecimalLessThan{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1DecimalLessThan);
			}
		}

		virtual public void RemoveI1DecimalLessThan()
		{
			Strategy.RemoveUnitRole(C1Meta.I1DecimalLessThan);
		}



		virtual public global::System.DateTime? I1DateTimeBetweenB 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(C1Meta.I1DateTimeBetweenB);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1DateTimeBetweenB, value);
			}
		}

		virtual public bool ExistI1DateTimeBetweenB{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1DateTimeBetweenB);
			}
		}

		virtual public void RemoveI1DateTimeBetweenB()
		{
			Strategy.RemoveUnitRole(C1Meta.I1DateTimeBetweenB);
		}



		virtual public global::System.Guid? I1AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(C1Meta.I1AllorsUnique);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I1AllorsUnique, value);
			}
		}

		virtual public bool ExistI1AllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I1AllorsUnique);
			}
		}

		virtual public void RemoveI1AllorsUnique()
		{
			Strategy.RemoveUnitRole(C1Meta.I1AllorsUnique);
		}


		virtual public Allors.Extent<global::Domain.C1> I1C1one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.I1C1one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.I1C1one2many, value);
			}
		}

		virtual public void AddI1C1one2many (global::Domain.C1 value)
		{
			Strategy.AddCompositeRole(C1Meta.I1C1one2many, value);
		}

		virtual public void RemoveI1C1one2many (global::Domain.C1 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.I1C1one2many,value);
		}

		virtual public bool ExistI1C1one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.I1C1one2many);
			}
		}

		virtual public void RemoveI1C1one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.I1C1one2many);
		}


		virtual public global::Domain.S2 I1S2many2one
		{ 
			get
			{
				return (global::Domain.S2) Strategy.GetCompositeRole(C1Meta.I1S2many2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.I1S2many2one ,value);
			}
		}

		virtual public bool ExistI1S2many2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.I1S2many2one);
			}
		}

		virtual public void RemoveI1S2many2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.I1S2many2one);
		}



		virtual public global::System.Decimal? S1AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(C1Meta.S1AllorsDecimal);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.S1AllorsDecimal, value);
			}
		}

		virtual public bool ExistS1AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.S1AllorsDecimal);
			}
		}

		virtual public void RemoveS1AllorsDecimal()
		{
			Strategy.RemoveUnitRole(C1Meta.S1AllorsDecimal);
		}



		virtual public global::System.Int32? S1AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(C1Meta.S1AllorsInteger);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.S1AllorsInteger, value);
			}
		}

		virtual public bool ExistS1AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.S1AllorsInteger);
			}
		}

		virtual public void RemoveS1AllorsInteger()
		{
			Strategy.RemoveUnitRole(C1Meta.S1AllorsInteger);
		}



		virtual public global::System.Byte[] S1AllorsBinary 
		{
			get
			{
				return (global::System.Byte[]) Strategy.GetUnitRole(C1Meta.S1AllorsBinary);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.S1AllorsBinary, value);
			}
		}

		virtual public bool ExistS1AllorsBinary{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.S1AllorsBinary);
			}
		}

		virtual public void RemoveS1AllorsBinary()
		{
			Strategy.RemoveUnitRole(C1Meta.S1AllorsBinary);
		}



		virtual public global::System.Guid? S1AllorsUnique 
		{
			get
			{
				return (global::System.Guid?) Strategy.GetUnitRole(C1Meta.S1AllorsUnique);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.S1AllorsUnique, value);
			}
		}

		virtual public bool ExistS1AllorsUnique{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.S1AllorsUnique);
			}
		}

		virtual public void RemoveS1AllorsUnique()
		{
			Strategy.RemoveUnitRole(C1Meta.S1AllorsUnique);
		}



		virtual public global::System.String S1StringLarge 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(C1Meta.S1StringLarge);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.S1StringLarge, value);
			}
		}

		virtual public bool ExistS1StringLarge{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.S1StringLarge);
			}
		}

		virtual public void RemoveS1StringLarge()
		{
			Strategy.RemoveUnitRole(C1Meta.S1StringLarge);
		}


		virtual public global::Domain.S2 S1S2many2one
		{ 
			get
			{
				return (global::Domain.S2) Strategy.GetCompositeRole(C1Meta.S1S2many2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.S1S2many2one ,value);
			}
		}

		virtual public bool ExistS1S2many2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.S1S2many2one);
			}
		}

		virtual public void RemoveS1S2many2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.S1S2many2one);
		}


		virtual public Allors.Extent<global::Domain.S2> S1S2one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.S1S2one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.S1S2one2many, value);
			}
		}

		virtual public void AddS1S2one2many (global::Domain.S2 value)
		{
			Strategy.AddCompositeRole(C1Meta.S1S2one2many, value);
		}

		virtual public void RemoveS1S2one2many (global::Domain.S2 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.S1S2one2many,value);
		}

		virtual public bool ExistS1S2one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.S1S2one2many);
			}
		}

		virtual public void RemoveS1S2one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.S1S2one2many);
		}



		virtual public global::System.Double? S1AllorsDouble 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(C1Meta.S1AllorsDouble);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.S1AllorsDouble, value);
			}
		}

		virtual public bool ExistS1AllorsDouble{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.S1AllorsDouble);
			}
		}

		virtual public void RemoveS1AllorsDouble()
		{
			Strategy.RemoveUnitRole(C1Meta.S1AllorsDouble);
		}



		virtual public global::System.String S1AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(C1Meta.S1AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.S1AllorsString, value);
			}
		}

		virtual public bool ExistS1AllorsString{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.S1AllorsString);
			}
		}

		virtual public void RemoveS1AllorsString()
		{
			Strategy.RemoveUnitRole(C1Meta.S1AllorsString);
		}


		virtual public global::Domain.C1 S1C1many2one
		{ 
			get
			{
				return (global::Domain.C1) Strategy.GetCompositeRole(C1Meta.S1C1many2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.S1C1many2one ,value);
			}
		}

		virtual public bool ExistS1C1many2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.S1C1many2one);
			}
		}

		virtual public void RemoveS1C1many2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.S1C1many2one);
		}


		virtual public global::Domain.C1 S1C1one2one
		{ 
			get
			{
				return (global::Domain.C1) Strategy.GetCompositeRole(C1Meta.S1C1one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.S1C1one2one ,value);
			}
		}

		virtual public bool ExistS1C1one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.S1C1one2one);
			}
		}

		virtual public void RemoveS1C1one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.S1C1one2one);
		}



		virtual public global::System.Boolean? S1AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(C1Meta.S1AllorsBoolean);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.S1AllorsBoolean, value);
			}
		}

		virtual public bool ExistS1AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.S1AllorsBoolean);
			}
		}

		virtual public void RemoveS1AllorsBoolean()
		{
			Strategy.RemoveUnitRole(C1Meta.S1AllorsBoolean);
		}


		virtual public Allors.Extent<global::Domain.C1> S1C1many2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.S1C1many2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.S1C1many2many, value);
			}
		}

		virtual public void AddS1C1many2many (global::Domain.C1 value)
		{
			Strategy.AddCompositeRole(C1Meta.S1C1many2many, value);
		}

		virtual public void RemoveS1C1many2many (global::Domain.C1 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.S1C1many2many,value);
		}

		virtual public bool ExistS1C1many2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.S1C1many2many);
			}
		}

		virtual public void RemoveS1C1many2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.S1C1many2many);
		}


		virtual public Allors.Extent<global::Domain.S2> S1S2many2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.S1S2many2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.S1S2many2many, value);
			}
		}

		virtual public void AddS1S2many2many (global::Domain.S2 value)
		{
			Strategy.AddCompositeRole(C1Meta.S1S2many2many, value);
		}

		virtual public void RemoveS1S2many2many (global::Domain.S2 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.S1S2many2many,value);
		}

		virtual public bool ExistS1S2many2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.S1S2many2many);
			}
		}

		virtual public void RemoveS1S2many2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.S1S2many2many);
		}


		virtual public global::Domain.S2 S1S2one2one
		{ 
			get
			{
				return (global::Domain.S2) Strategy.GetCompositeRole(C1Meta.S1S2one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.S1S2one2one ,value);
			}
		}

		virtual public bool ExistS1S2one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.S1S2one2one);
			}
		}

		virtual public void RemoveS1S2one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.S1S2one2one);
		}



		virtual public global::System.Int64? S1AllorsLong 
		{
			get
			{
				return (global::System.Int64?) Strategy.GetUnitRole(C1Meta.S1AllorsLong);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.S1AllorsLong, value);
			}
		}

		virtual public bool ExistS1AllorsLong{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.S1AllorsLong);
			}
		}

		virtual public void RemoveS1AllorsLong()
		{
			Strategy.RemoveUnitRole(C1Meta.S1AllorsLong);
		}



		virtual public global::System.DateTime? S1AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(C1Meta.S1AllorsDateTime);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.S1AllorsDateTime, value);
			}
		}

		virtual public bool ExistS1AllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.S1AllorsDateTime);
			}
		}

		virtual public void RemoveS1AllorsDateTime()
		{
			Strategy.RemoveUnitRole(C1Meta.S1AllorsDateTime);
		}


		virtual public Allors.Extent<global::Domain.C1> S1C1one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.S1C1one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.S1C1one2many, value);
			}
		}

		virtual public void AddS1C1one2many (global::Domain.C1 value)
		{
			Strategy.AddCompositeRole(C1Meta.S1C1one2many, value);
		}

		virtual public void RemoveS1C1one2many (global::Domain.C1 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.S1C1one2many,value);
		}

		virtual public bool ExistS1C1one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.S1C1one2many);
			}
		}

		virtual public void RemoveS1C1one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.S1C1one2many);
		}



		virtual public global::System.Double? S1234AllorsDouble 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(C1Meta.S1234AllorsDouble);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.S1234AllorsDouble, value);
			}
		}

		virtual public bool ExistS1234AllorsDouble{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.S1234AllorsDouble);
			}
		}

		virtual public void RemoveS1234AllorsDouble()
		{
			Strategy.RemoveUnitRole(C1Meta.S1234AllorsDouble);
		}



		virtual public global::System.Decimal? S1234AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(C1Meta.S1234AllorsDecimal);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.S1234AllorsDecimal, value);
			}
		}

		virtual public bool ExistS1234AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.S1234AllorsDecimal);
			}
		}

		virtual public void RemoveS1234AllorsDecimal()
		{
			Strategy.RemoveUnitRole(C1Meta.S1234AllorsDecimal);
		}



		virtual public global::System.Int32? S1234AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(C1Meta.S1234AllorsInteger);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.S1234AllorsInteger, value);
			}
		}

		virtual public bool ExistS1234AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.S1234AllorsInteger);
			}
		}

		virtual public void RemoveS1234AllorsInteger()
		{
			Strategy.RemoveUnitRole(C1Meta.S1234AllorsInteger);
		}


		virtual public global::Domain.S1234 S1234many2one
		{ 
			get
			{
				return (global::Domain.S1234) Strategy.GetCompositeRole(C1Meta.S1234many2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.S1234many2one ,value);
			}
		}

		virtual public bool ExistS1234many2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.S1234many2one);
			}
		}

		virtual public void RemoveS1234many2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.S1234many2one);
		}


		virtual public global::Domain.C2 S1234C2one2one
		{ 
			get
			{
				return (global::Domain.C2) Strategy.GetCompositeRole(C1Meta.S1234C2one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.S1234C2one2one ,value);
			}
		}

		virtual public bool ExistS1234C2one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.S1234C2one2one);
			}
		}

		virtual public void RemoveS1234C2one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.S1234C2one2one);
		}


		virtual public Allors.Extent<global::Domain.C2> S1234C2many2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.S1234C2many2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.S1234C2many2many, value);
			}
		}

		virtual public void AddS1234C2many2many (global::Domain.C2 value)
		{
			Strategy.AddCompositeRole(C1Meta.S1234C2many2many, value);
		}

		virtual public void RemoveS1234C2many2many (global::Domain.C2 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.S1234C2many2many,value);
		}

		virtual public bool ExistS1234C2many2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.S1234C2many2many);
			}
		}

		virtual public void RemoveS1234C2many2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.S1234C2many2many);
		}


		virtual public Allors.Extent<global::Domain.S1234> S1234one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.S1234one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.S1234one2many, value);
			}
		}

		virtual public void AddS1234one2many (global::Domain.S1234 value)
		{
			Strategy.AddCompositeRole(C1Meta.S1234one2many, value);
		}

		virtual public void RemoveS1234one2many (global::Domain.S1234 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.S1234one2many,value);
		}

		virtual public bool ExistS1234one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.S1234one2many);
			}
		}

		virtual public void RemoveS1234one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.S1234one2many);
		}


		virtual public Allors.Extent<global::Domain.C2> S1234C2one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.S1234C2one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.S1234C2one2many, value);
			}
		}

		virtual public void AddS1234C2one2many (global::Domain.C2 value)
		{
			Strategy.AddCompositeRole(C1Meta.S1234C2one2many, value);
		}

		virtual public void RemoveS1234C2one2many (global::Domain.C2 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.S1234C2one2many,value);
		}

		virtual public bool ExistS1234C2one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.S1234C2one2many);
			}
		}

		virtual public void RemoveS1234C2one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.S1234C2one2many);
		}


		virtual public Allors.Extent<global::Domain.S1234> S1234many2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.S1234many2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.S1234many2many, value);
			}
		}

		virtual public void AddS1234many2many (global::Domain.S1234 value)
		{
			Strategy.AddCompositeRole(C1Meta.S1234many2many, value);
		}

		virtual public void RemoveS1234many2many (global::Domain.S1234 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.S1234many2many,value);
		}

		virtual public bool ExistS1234many2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.S1234many2many);
			}
		}

		virtual public void RemoveS1234many2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.S1234many2many);
		}



		virtual public global::System.Int64? S1234AllorsLong 
		{
			get
			{
				return (global::System.Int64?) Strategy.GetUnitRole(C1Meta.S1234AllorsLong);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.S1234AllorsLong, value);
			}
		}

		virtual public bool ExistS1234AllorsLong{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.S1234AllorsLong);
			}
		}

		virtual public void RemoveS1234AllorsLong()
		{
			Strategy.RemoveUnitRole(C1Meta.S1234AllorsLong);
		}



		virtual public global::System.String ClassName 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(C1Meta.ClassName);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.ClassName, value);
			}
		}

		virtual public bool ExistClassName{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.ClassName);
			}
		}

		virtual public void RemoveClassName()
		{
			Strategy.RemoveUnitRole(C1Meta.ClassName);
		}



		virtual public global::System.DateTime? S1234AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(C1Meta.S1234AllorsDateTime);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.S1234AllorsDateTime, value);
			}
		}

		virtual public bool ExistS1234AllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.S1234AllorsDateTime);
			}
		}

		virtual public void RemoveS1234AllorsDateTime()
		{
			Strategy.RemoveUnitRole(C1Meta.S1234AllorsDateTime);
		}


		virtual public global::Domain.S1234 S1234one2one
		{ 
			get
			{
				return (global::Domain.S1234) Strategy.GetCompositeRole(C1Meta.S1234one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.S1234one2one ,value);
			}
		}

		virtual public bool ExistS1234one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.S1234one2one);
			}
		}

		virtual public void RemoveS1234one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.S1234one2one);
		}


		virtual public global::Domain.C2 S1234C2many2one
		{ 
			get
			{
				return (global::Domain.C2) Strategy.GetCompositeRole(C1Meta.S1234C2many2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.S1234C2many2one ,value);
			}
		}

		virtual public bool ExistS1234C2many2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.S1234C2many2one);
			}
		}

		virtual public void RemoveS1234C2many2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.S1234C2many2one);
		}



		virtual public global::System.String S1234AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(C1Meta.S1234AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.S1234AllorsString, value);
			}
		}

		virtual public bool ExistS1234AllorsString{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.S1234AllorsString);
			}
		}

		virtual public void RemoveS1234AllorsString()
		{
			Strategy.RemoveUnitRole(C1Meta.S1234AllorsString);
		}



		virtual public global::System.Boolean? S1234AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(C1Meta.S1234AllorsBoolean);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.S1234AllorsBoolean, value);
			}
		}

		virtual public bool ExistS1234AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.S1234AllorsBoolean);
			}
		}

		virtual public void RemoveS1234AllorsBoolean()
		{
			Strategy.RemoveUnitRole(C1Meta.S1234AllorsBoolean);
		}



		virtual public global::System.Boolean? I12AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(C1Meta.I12AllorsBoolean);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I12AllorsBoolean, value);
			}
		}

		virtual public bool ExistI12AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I12AllorsBoolean);
			}
		}

		virtual public void RemoveI12AllorsBoolean()
		{
			Strategy.RemoveUnitRole(C1Meta.I12AllorsBoolean);
		}



		virtual public global::System.Int32? I12AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(C1Meta.I12AllorsInteger);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I12AllorsInteger, value);
			}
		}

		virtual public bool ExistI12AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I12AllorsInteger);
			}
		}

		virtual public void RemoveI12AllorsInteger()
		{
			Strategy.RemoveUnitRole(C1Meta.I12AllorsInteger);
		}


		virtual public Allors.Extent<global::Domain.I34> I12I34one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.I12I34one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.I12I34one2many, value);
			}
		}

		virtual public void AddI12I34one2many (global::Domain.I34 value)
		{
			Strategy.AddCompositeRole(C1Meta.I12I34one2many, value);
		}

		virtual public void RemoveI12I34one2many (global::Domain.I34 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.I12I34one2many,value);
		}

		virtual public bool ExistI12I34one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.I12I34one2many);
			}
		}

		virtual public void RemoveI12I34one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.I12I34one2many);
		}


		virtual public global::Domain.C3 C3many2one
		{ 
			get
			{
				return (global::Domain.C3) Strategy.GetCompositeRole(C1Meta.C3many2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.C3many2one ,value);
			}
		}

		virtual public bool ExistC3many2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.C3many2one);
			}
		}

		virtual public void RemoveC3many2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.C3many2one);
		}


		virtual public global::Domain.C2 I12C2many2one
		{ 
			get
			{
				return (global::Domain.C2) Strategy.GetCompositeRole(C1Meta.I12C2many2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.I12C2many2one ,value);
			}
		}

		virtual public bool ExistI12C2many2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.I12C2many2one);
			}
		}

		virtual public void RemoveI12C2many2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.I12C2many2one);
		}



		virtual public global::System.Double? I12AllorsDouble 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(C1Meta.I12AllorsDouble);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I12AllorsDouble, value);
			}
		}

		virtual public bool ExistI12AllorsDouble{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I12AllorsDouble);
			}
		}

		virtual public void RemoveI12AllorsDouble()
		{
			Strategy.RemoveUnitRole(C1Meta.I12AllorsDouble);
		}


		virtual public global::Domain.I34 I12I34many2one
		{ 
			get
			{
				return (global::Domain.I34) Strategy.GetCompositeRole(C1Meta.I12I34many2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.I12I34many2one ,value);
			}
		}

		virtual public bool ExistI12I34many2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.I12I34many2one);
			}
		}

		virtual public void RemoveI12I34many2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.I12I34many2one);
		}


		virtual public Allors.Extent<global::Domain.I34> I12I34many2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.I12I34many2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.I12I34many2many, value);
			}
		}

		virtual public void AddI12I34many2many (global::Domain.I34 value)
		{
			Strategy.AddCompositeRole(C1Meta.I12I34many2many, value);
		}

		virtual public void RemoveI12I34many2many (global::Domain.I34 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.I12I34many2many,value);
		}

		virtual public bool ExistI12I34many2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.I12I34many2many);
			}
		}

		virtual public void RemoveI12I34many2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.I12I34many2many);
		}


		virtual public global::Domain.C3 I12C3one2one
		{ 
			get
			{
				return (global::Domain.C3) Strategy.GetCompositeRole(C1Meta.I12C3one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.I12C3one2one ,value);
			}
		}

		virtual public bool ExistI12C3one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.I12C3one2one);
			}
		}

		virtual public void RemoveI12C3one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.I12C3one2one);
		}


		virtual public Allors.Extent<global::Domain.C2> I12C2many2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.I12C2many2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.I12C2many2many, value);
			}
		}

		virtual public void AddI12C2many2many (global::Domain.C2 value)
		{
			Strategy.AddCompositeRole(C1Meta.I12C2many2many, value);
		}

		virtual public void RemoveI12C2many2many (global::Domain.C2 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.I12C2many2many,value);
		}

		virtual public bool ExistI12C2many2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.I12C2many2many);
			}
		}

		virtual public void RemoveI12C2many2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.I12C2many2many);
		}



		virtual public global::System.Int64? I12AllorsLong 
		{
			get
			{
				return (global::System.Int64?) Strategy.GetUnitRole(C1Meta.I12AllorsLong);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I12AllorsLong, value);
			}
		}

		virtual public bool ExistI12AllorsLong{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I12AllorsLong);
			}
		}

		virtual public void RemoveI12AllorsLong()
		{
			Strategy.RemoveUnitRole(C1Meta.I12AllorsLong);
		}



		virtual public global::System.Decimal? I12AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(C1Meta.I12AllorsDecimal);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I12AllorsDecimal, value);
			}
		}

		virtual public bool ExistI12AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I12AllorsDecimal);
			}
		}

		virtual public void RemoveI12AllorsDecimal()
		{
			Strategy.RemoveUnitRole(C1Meta.I12AllorsDecimal);
		}


		virtual public global::Domain.C2 I12C2one2one
		{ 
			get
			{
				return (global::Domain.C2) Strategy.GetCompositeRole(C1Meta.I12C2one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.I12C2one2one ,value);
			}
		}

		virtual public bool ExistI12C2one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.I12C2one2one);
			}
		}

		virtual public void RemoveI12C2one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.I12C2one2one);
		}


		virtual public Allors.Extent<global::Domain.C3> I12C3one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.I12C3one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.I12C3one2many, value);
			}
		}

		virtual public void AddI12C3one2many (global::Domain.C3 value)
		{
			Strategy.AddCompositeRole(C1Meta.I12C3one2many, value);
		}

		virtual public void RemoveI12C3one2many (global::Domain.C3 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.I12C3one2many,value);
		}

		virtual public bool ExistI12C3one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.I12C3one2many);
			}
		}

		virtual public void RemoveI12C3one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.I12C3one2many);
		}


		virtual public Allors.Extent<global::Domain.C3> I12C3many2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.I12C3many2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.I12C3many2many, value);
			}
		}

		virtual public void AddI12C3many2many (global::Domain.C3 value)
		{
			Strategy.AddCompositeRole(C1Meta.I12C3many2many, value);
		}

		virtual public void RemoveI12C3many2many (global::Domain.C3 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.I12C3many2many,value);
		}

		virtual public bool ExistI12C3many2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.I12C3many2many);
			}
		}

		virtual public void RemoveI12C3many2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.I12C3many2many);
		}



		virtual public global::System.String PrefetchTest 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(C1Meta.PrefetchTest);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.PrefetchTest, value);
			}
		}

		virtual public bool ExistPrefetchTest{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.PrefetchTest);
			}
		}

		virtual public void RemovePrefetchTest()
		{
			Strategy.RemoveUnitRole(C1Meta.PrefetchTest);
		}



		virtual public global::System.DateTime? I12AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(C1Meta.I12AllorsDateTime);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I12AllorsDateTime, value);
			}
		}

		virtual public bool ExistI12AllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I12AllorsDateTime);
			}
		}

		virtual public void RemoveI12AllorsDateTime()
		{
			Strategy.RemoveUnitRole(C1Meta.I12AllorsDateTime);
		}



		virtual public global::System.String I12AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(C1Meta.I12AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.I12AllorsString, value);
			}
		}

		virtual public bool ExistI12AllorsString{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.I12AllorsString);
			}
		}

		virtual public void RemoveI12AllorsString()
		{
			Strategy.RemoveUnitRole(C1Meta.I12AllorsString);
		}


		virtual public global::Domain.I34 I12I34one2one
		{ 
			get
			{
				return (global::Domain.I34) Strategy.GetCompositeRole(C1Meta.I12I34one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.I12I34one2one ,value);
			}
		}

		virtual public bool ExistI12I34one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.I12I34one2one);
			}
		}

		virtual public void RemoveI12I34one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.I12I34one2one);
		}


		virtual public Allors.Extent<global::Domain.C2> I12C2one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.I12C2one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.I12C2one2many, value);
			}
		}

		virtual public void AddI12C2one2many (global::Domain.C2 value)
		{
			Strategy.AddCompositeRole(C1Meta.I12C2one2many, value);
		}

		virtual public void RemoveI12C2one2many (global::Domain.C2 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.I12C2one2many,value);
		}

		virtual public bool ExistI12C2one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.I12C2one2many);
			}
		}

		virtual public void RemoveI12C2one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.I12C2one2many);
		}



		virtual public global::System.String S12AllorsString 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(C1Meta.S12AllorsString);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.S12AllorsString, value);
			}
		}

		virtual public bool ExistS12AllorsString{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.S12AllorsString);
			}
		}

		virtual public void RemoveS12AllorsString()
		{
			Strategy.RemoveUnitRole(C1Meta.S12AllorsString);
		}



		virtual public global::System.DateTime? S12AllorsDateTime 
		{
			get
			{
				return (global::System.DateTime?) Strategy.GetUnitRole(C1Meta.S12AllorsDateTime);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.S12AllorsDateTime, value);
			}
		}

		virtual public bool ExistS12AllorsDateTime{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.S12AllorsDateTime);
			}
		}

		virtual public void RemoveS12AllorsDateTime()
		{
			Strategy.RemoveUnitRole(C1Meta.S12AllorsDateTime);
		}


		virtual public Allors.Extent<global::Domain.C2> S12C2many2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.S12C2many2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.S12C2many2many, value);
			}
		}

		virtual public void AddS12C2many2many (global::Domain.C2 value)
		{
			Strategy.AddCompositeRole(C1Meta.S12C2many2many, value);
		}

		virtual public void RemoveS12C2many2many (global::Domain.C2 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.S12C2many2many,value);
		}

		virtual public bool ExistS12C2many2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.S12C2many2many);
			}
		}

		virtual public void RemoveS12C2many2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.S12C2many2many);
		}


		virtual public global::Domain.C2 S12C2many2one
		{ 
			get
			{
				return (global::Domain.C2) Strategy.GetCompositeRole(C1Meta.S12C2many2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.S12C2many2one ,value);
			}
		}

		virtual public bool ExistS12C2many2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.S12C2many2one);
			}
		}

		virtual public void RemoveS12C2many2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.S12C2many2one);
		}


		virtual public global::Domain.C2 S12C2one2one
		{ 
			get
			{
				return (global::Domain.C2) Strategy.GetCompositeRole(C1Meta.S12C2one2one);
			}
			set
			{
				Strategy.SetCompositeRole(C1Meta.S12C2one2one ,value);
			}
		}

		virtual public bool ExistS12C2one2one
		{
			get
			{
				return Strategy.ExistCompositeRole(C1Meta.S12C2one2one);
			}
		}

		virtual public void RemoveS12C2one2one()
		{
			Strategy.RemoveCompositeRole(C1Meta.S12C2one2one);
		}


		virtual public Allors.Extent<global::Domain.C2> S12C2one2manies
		{ 
			get
			{
				return Strategy.GetCompositeRoles(C1Meta.S12C2one2many);
			}
			set
			{
				Strategy.SetCompositeRoles(C1Meta.S12C2one2many, value);
			}
		}

		virtual public void AddS12C2one2many (global::Domain.C2 value)
		{
			Strategy.AddCompositeRole(C1Meta.S12C2one2many, value);
		}

		virtual public void RemoveS12C2one2many (global::Domain.C2 value)
		{
			Strategy.RemoveCompositeRole(C1Meta.S12C2one2many,value);
		}

		virtual public bool ExistS12C2one2manies
		{
			get
			{
				return Strategy.ExistCompositeRoles(C1Meta.S12C2one2many);
			}
		}

		virtual public void RemoveS12C2one2manies()
		{
			Strategy.RemoveCompositeRoles(C1Meta.S12C2one2many);
		}



		virtual public global::System.Boolean? S12AllorsBoolean 
		{
			get
			{
				return (global::System.Boolean?) Strategy.GetUnitRole(C1Meta.S12AllorsBoolean);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.S12AllorsBoolean, value);
			}
		}

		virtual public bool ExistS12AllorsBoolean{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.S12AllorsBoolean);
			}
		}

		virtual public void RemoveS12AllorsBoolean()
		{
			Strategy.RemoveUnitRole(C1Meta.S12AllorsBoolean);
		}



		virtual public global::System.Double? S12AllorsDouble 
		{
			get
			{
				return (global::System.Double?) Strategy.GetUnitRole(C1Meta.S12AllorsDouble);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.S12AllorsDouble, value);
			}
		}

		virtual public bool ExistS12AllorsDouble{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.S12AllorsDouble);
			}
		}

		virtual public void RemoveS12AllorsDouble()
		{
			Strategy.RemoveUnitRole(C1Meta.S12AllorsDouble);
		}



		virtual public global::System.Int32? S12AllorsInteger 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(C1Meta.S12AllorsInteger);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.S12AllorsInteger, value);
			}
		}

		virtual public bool ExistS12AllorsInteger{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.S12AllorsInteger);
			}
		}

		virtual public void RemoveS12AllorsInteger()
		{
			Strategy.RemoveUnitRole(C1Meta.S12AllorsInteger);
		}



		virtual public global::System.Decimal? S12AllorsDecimal 
		{
			get
			{
				return (global::System.Decimal?) Strategy.GetUnitRole(C1Meta.S12AllorsDecimal);
			}
			set
			{
				Strategy.SetUnitRole(C1Meta.S12AllorsDecimal, value);
			}
		}

		virtual public bool ExistS12AllorsDecimal{
			get
			{
				return Strategy.ExistUnitRole(C1Meta.S12AllorsDecimal);
			}
		}

		virtual public void RemoveS12AllorsDecimal()
		{
			Strategy.RemoveUnitRole(C1Meta.S12AllorsDecimal);
		}



		virtual public Allors.Extent<global::Domain.C2> C2sWhereC1many2many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(C1Meta.C2sWhereC1many2many);
			}
		}

		virtual public bool ExistC2sWhereC1many2many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(C1Meta.C2sWhereC1many2many);
			}
		}


		virtual public Allors.Extent<global::Domain.C1> C1sWhereC1many2one
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(C1Meta.C1sWhereC1many2one);
			}
		}

		virtual public bool ExistC1sWhereC1many2one
		{
			get
			{
				return Strategy.ExistCompositeAssociations(C1Meta.C1sWhereC1many2one);
			}
		}


		virtual public Allors.Extent<global::Domain.C1> C1sWhereMany2One
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(C1Meta.C1sWhereMany2One);
			}
		}

		virtual public bool ExistC1sWhereMany2One
		{
			get
			{
				return Strategy.ExistCompositeAssociations(C1Meta.C1sWhereMany2One);
			}
		}


		virtual public Allors.Extent<global::Domain.C1> C1sWhereC1many2many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(C1Meta.C1sWhereC1many2many);
			}
		}

		virtual public bool ExistC1sWhereC1many2many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(C1Meta.C1sWhereC1many2many);
			}
		}


		virtual public Allors.Extent<global::Domain.I1> I1sWhereC1many2one
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(C1Meta.I1sWhereC1many2one);
			}
		}

		virtual public bool ExistI1sWhereC1many2one
		{
			get
			{
				return Strategy.ExistCompositeAssociations(C1Meta.I1sWhereC1many2one);
			}
		}


		virtual public global::Domain.I1 I1WhereC1one2one
		{ 
			get
			{
				return (global::Domain.I1) Strategy.GetCompositeAssociation(C1Meta.I1WhereC1one2one);
			}
		} 

		virtual public bool ExistI1WhereC1one2one
		{
			get
			{
				return Strategy.ExistCompositeAssociation(C1Meta.I1WhereC1one2one);
			}
		}


		virtual public global::Domain.C1 C1WhereC1one2one
		{ 
			get
			{
				return (global::Domain.C1) Strategy.GetCompositeAssociation(C1Meta.C1WhereC1one2one);
			}
		} 

		virtual public bool ExistC1WhereC1one2one
		{
			get
			{
				return Strategy.ExistCompositeAssociation(C1Meta.C1WhereC1one2one);
			}
		}


		virtual public Allors.Extent<global::Domain.I1> I1sWhereC1many2many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(C1Meta.I1sWhereC1many2many);
			}
		}

		virtual public bool ExistI1sWhereC1many2many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(C1Meta.I1sWhereC1many2many);
			}
		}


		virtual public Allors.Extent<global::Domain.S1> S1sWhereC1many2one
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(C1Meta.S1sWhereC1many2one);
			}
		}

		virtual public bool ExistS1sWhereC1many2one
		{
			get
			{
				return Strategy.ExistCompositeAssociations(C1Meta.S1sWhereC1many2one);
			}
		}


		virtual public Allors.Extent<global::Domain.C2> C2sWhereC1many2one
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(C1Meta.C2sWhereC1many2one);
			}
		}

		virtual public bool ExistC2sWhereC1many2one
		{
			get
			{
				return Strategy.ExistCompositeAssociations(C1Meta.C2sWhereC1many2one);
			}
		}


		virtual public global::Domain.S1 S1WhereC1one2one
		{ 
			get
			{
				return (global::Domain.S1) Strategy.GetCompositeAssociation(C1Meta.S1WhereC1one2one);
			}
		} 

		virtual public bool ExistS1WhereC1one2one
		{
			get
			{
				return Strategy.ExistCompositeAssociation(C1Meta.S1WhereC1one2one);
			}
		}


		virtual public global::Domain.C2 C2WhereC1one2one
		{ 
			get
			{
				return (global::Domain.C2) Strategy.GetCompositeAssociation(C1Meta.C2WhereC1one2one);
			}
		} 

		virtual public bool ExistC2WhereC1one2one
		{
			get
			{
				return Strategy.ExistCompositeAssociation(C1Meta.C2WhereC1one2one);
			}
		}


		virtual public global::Domain.C1 C1WhereC1one2many
		{ 
			get
			{
				return (global::Domain.C1) Strategy.GetCompositeAssociation(C1Meta.C1WhereC1one2many);
			}
		} 

		virtual public bool ExistC1WhereC1one2many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(C1Meta.C1WhereC1one2many);
			}
		}


		virtual public Allors.Extent<global::Domain.S1> S1sWhereC1many2many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(C1Meta.S1sWhereC1many2many);
			}
		}

		virtual public bool ExistS1sWhereC1many2many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(C1Meta.S1sWhereC1many2many);
			}
		}


		virtual public global::Domain.C2 C2WhereC1one2many
		{ 
			get
			{
				return (global::Domain.C2) Strategy.GetCompositeAssociation(C1Meta.C2WhereC1one2many);
			}
		} 

		virtual public bool ExistC2WhereC1one2many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(C1Meta.C2WhereC1one2many);
			}
		}


		virtual public global::Domain.S1 S1WhereC1one2many
		{ 
			get
			{
				return (global::Domain.S1) Strategy.GetCompositeAssociation(C1Meta.S1WhereC1one2many);
			}
		} 

		virtual public bool ExistS1WhereC1one2many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(C1Meta.S1WhereC1one2many);
			}
		}


		virtual public global::Domain.I3 I3WhereC1one2one
		{ 
			get
			{
				return (global::Domain.I3) Strategy.GetCompositeAssociation(C1Meta.I3WhereC1one2one);
			}
		} 

		virtual public bool ExistI3WhereC1one2one
		{
			get
			{
				return Strategy.ExistCompositeAssociation(C1Meta.I3WhereC1one2one);
			}
		}


		virtual public global::Domain.I1 I1WhereC1one2many
		{ 
			get
			{
				return (global::Domain.I1) Strategy.GetCompositeAssociation(C1Meta.I1WhereC1one2many);
			}
		} 

		virtual public bool ExistI1WhereC1one2many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(C1Meta.I1WhereC1one2many);
			}
		}


		virtual public global::Domain.C1 C1WhereI1one2one
		{ 
			get
			{
				return (global::Domain.C1) Strategy.GetCompositeAssociation(C1Meta.C1WhereI1one2one);
			}
		} 

		virtual public bool ExistC1WhereI1one2one
		{
			get
			{
				return Strategy.ExistCompositeAssociation(C1Meta.C1WhereI1one2one);
			}
		}


		virtual public Allors.Extent<global::Domain.I1> I1sWhereI1many2one
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(C1Meta.I1sWhereI1many2one);
			}
		}

		virtual public bool ExistI1sWhereI1many2one
		{
			get
			{
				return Strategy.ExistCompositeAssociations(C1Meta.I1sWhereI1many2one);
			}
		}


		virtual public Allors.Extent<global::Domain.C1> C1sWhereI1many2many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(C1Meta.C1sWhereI1many2many);
			}
		}

		virtual public bool ExistC1sWhereI1many2many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(C1Meta.C1sWhereI1many2many);
			}
		}


		virtual public Allors.Extent<global::Domain.C1> C1sWhereI1many2one
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(C1Meta.C1sWhereI1many2one);
			}
		}

		virtual public bool ExistC1sWhereI1many2one
		{
			get
			{
				return Strategy.ExistCompositeAssociations(C1Meta.C1sWhereI1many2one);
			}
		}


		virtual public global::Domain.I1 I1WhereI1one2many
		{ 
			get
			{
				return (global::Domain.I1) Strategy.GetCompositeAssociation(C1Meta.I1WhereI1one2many);
			}
		} 

		virtual public bool ExistI1WhereI1one2many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(C1Meta.I1WhereI1one2many);
			}
		}


		virtual public Allors.Extent<global::Domain.I1> I1sWhereI1many2many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(C1Meta.I1sWhereI1many2many);
			}
		}

		virtual public bool ExistI1sWhereI1many2many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(C1Meta.I1sWhereI1many2many);
			}
		}


		virtual public global::Domain.C1 C1WhereI1one2many
		{ 
			get
			{
				return (global::Domain.C1) Strategy.GetCompositeAssociation(C1Meta.C1WhereI1one2many);
			}
		} 

		virtual public bool ExistC1WhereI1one2many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(C1Meta.C1WhereI1one2many);
			}
		}


		virtual public global::Domain.I1 I1WhereI1one2one
		{ 
			get
			{
				return (global::Domain.I1) Strategy.GetCompositeAssociation(C1Meta.I1WhereI1one2one);
			}
		} 

		virtual public bool ExistI1WhereI1one2one
		{
			get
			{
				return Strategy.ExistCompositeAssociation(C1Meta.I1WhereI1one2one);
			}
		}


		virtual public global::Domain.C1 C1WhereS1one2many
		{ 
			get
			{
				return (global::Domain.C1) Strategy.GetCompositeAssociation(C1Meta.C1WhereS1one2many);
			}
		} 

		virtual public bool ExistC1WhereS1one2many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(C1Meta.C1WhereS1one2many);
			}
		}


		virtual public global::Domain.I1 I1WhereS1one2one
		{ 
			get
			{
				return (global::Domain.I1) Strategy.GetCompositeAssociation(C1Meta.I1WhereS1one2one);
			}
		} 

		virtual public bool ExistI1WhereS1one2one
		{
			get
			{
				return Strategy.ExistCompositeAssociation(C1Meta.I1WhereS1one2one);
			}
		}


		virtual public Allors.Extent<global::Domain.C1> C1sWhereS1many2many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(C1Meta.C1sWhereS1many2many);
			}
		}

		virtual public bool ExistC1sWhereS1many2many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(C1Meta.C1sWhereS1many2many);
			}
		}


		virtual public Allors.Extent<global::Domain.C1> C1sWhereS1many2one
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(C1Meta.C1sWhereS1many2one);
			}
		}

		virtual public bool ExistC1sWhereS1many2one
		{
			get
			{
				return Strategy.ExistCompositeAssociations(C1Meta.C1sWhereS1many2one);
			}
		}


		virtual public Allors.Extent<global::Domain.I1> I1sWhereS1many2many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(C1Meta.I1sWhereS1many2many);
			}
		}

		virtual public bool ExistI1sWhereS1many2many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(C1Meta.I1sWhereS1many2many);
			}
		}


		virtual public global::Domain.C1 C1WhereS1one2one
		{ 
			get
			{
				return (global::Domain.C1) Strategy.GetCompositeAssociation(C1Meta.C1WhereS1one2one);
			}
		} 

		virtual public bool ExistC1WhereS1one2one
		{
			get
			{
				return Strategy.ExistCompositeAssociation(C1Meta.C1WhereS1one2one);
			}
		}


		virtual public global::Domain.I1 I1WhereS1one2many
		{ 
			get
			{
				return (global::Domain.I1) Strategy.GetCompositeAssociation(C1Meta.I1WhereS1one2many);
			}
		} 

		virtual public bool ExistI1WhereS1one2many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(C1Meta.I1WhereS1one2many);
			}
		}


		virtual public Allors.Extent<global::Domain.I1> I1sWhereS1many2one
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(C1Meta.I1sWhereS1many2one);
			}
		}

		virtual public bool ExistI1sWhereS1many2one
		{
			get
			{
				return Strategy.ExistCompositeAssociations(C1Meta.I1sWhereS1many2one);
			}
		}


		virtual public Allors.Extent<global::Domain.S1234> S1234sWhereS1234many2one
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(C1Meta.S1234sWhereS1234many2one);
			}
		}

		virtual public bool ExistS1234sWhereS1234many2one
		{
			get
			{
				return Strategy.ExistCompositeAssociations(C1Meta.S1234sWhereS1234many2one);
			}
		}


		virtual public global::Domain.S1234 S1234WhereS1234one2many
		{ 
			get
			{
				return (global::Domain.S1234) Strategy.GetCompositeAssociation(C1Meta.S1234WhereS1234one2many);
			}
		} 

		virtual public bool ExistS1234WhereS1234one2many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(C1Meta.S1234WhereS1234one2many);
			}
		}


		virtual public Allors.Extent<global::Domain.S1234> S1234sWhereS1234many2many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(C1Meta.S1234sWhereS1234many2many);
			}
		}

		virtual public bool ExistS1234sWhereS1234many2many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(C1Meta.S1234sWhereS1234many2many);
			}
		}


		virtual public global::Domain.S1234 S1234WhereS1234one2one
		{ 
			get
			{
				return (global::Domain.S1234) Strategy.GetCompositeAssociation(C1Meta.S1234WhereS1234one2one);
			}
		} 

		virtual public bool ExistS1234WhereS1234one2one
		{
			get
			{
				return Strategy.ExistCompositeAssociation(C1Meta.S1234WhereS1234one2one);
			}
		}


		virtual public global::Domain.C1 C1WhereI12one2one
		{ 
			get
			{
				return (global::Domain.C1) Strategy.GetCompositeAssociation(C1Meta.C1WhereI12one2one);
			}
		} 

		virtual public bool ExistC1WhereI12one2one
		{
			get
			{
				return Strategy.ExistCompositeAssociation(C1Meta.C1WhereI12one2one);
			}
		}


		virtual public Allors.Extent<global::Domain.I1> I1sWhereI12many2one
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(C1Meta.I1sWhereI12many2one);
			}
		}

		virtual public bool ExistI1sWhereI12many2one
		{
			get
			{
				return Strategy.ExistCompositeAssociations(C1Meta.I1sWhereI12many2one);
			}
		}


		virtual public global::Domain.I1 I1WhereI12one2one
		{ 
			get
			{
				return (global::Domain.I1) Strategy.GetCompositeAssociation(C1Meta.I1WhereI12one2one);
			}
		} 

		virtual public bool ExistI1WhereI12one2one
		{
			get
			{
				return Strategy.ExistCompositeAssociation(C1Meta.I1WhereI12one2one);
			}
		}


		virtual public Allors.Extent<global::Domain.C1> C1sWhereI12many2one
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(C1Meta.C1sWhereI12many2one);
			}
		}

		virtual public bool ExistC1sWhereI12many2one
		{
			get
			{
				return Strategy.ExistCompositeAssociations(C1Meta.C1sWhereI12many2one);
			}
		}


		virtual public Allors.Extent<global::Domain.I1> I1sWhereI12many2many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(C1Meta.I1sWhereI12many2many);
			}
		}

		virtual public bool ExistI1sWhereI12many2many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(C1Meta.I1sWhereI12many2many);
			}
		}


		virtual public global::Domain.I1 I1WhereI12one2many
		{ 
			get
			{
				return (global::Domain.I1) Strategy.GetCompositeAssociation(C1Meta.I1WhereI12one2many);
			}
		} 

		virtual public bool ExistI1WhereI12one2many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(C1Meta.I1WhereI12one2many);
			}
		}


		virtual public global::Domain.C1 C1WhereI12one2many
		{ 
			get
			{
				return (global::Domain.C1) Strategy.GetCompositeAssociation(C1Meta.C1WhereI12one2many);
			}
		} 

		virtual public bool ExistC1WhereI12one2many
		{
			get
			{
				return Strategy.ExistCompositeAssociation(C1Meta.C1WhereI12one2many);
			}
		}


		virtual public Allors.Extent<global::Domain.C1> C1sWhereI12many2many
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(C1Meta.C1sWhereI12many2many);
			}
		}

		virtual public bool ExistC1sWhereI12many2many
		{
			get
			{
				return Strategy.ExistCompositeAssociations(C1Meta.C1sWhereI12many2many);
			}
		}

	}
}