// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public  partial class User : UserAllors 
	{
		public User(Allors.IStrategy allors) : base(allors) {}

		public static User Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (User) allorsSession.Instantiate(allorsObjectId);		
		}
	}

	[System.Diagnostics.DebuggerNonUserCode]
	public abstract class UserAllors :  Allors.ObjectBase 
	{
		protected UserAllors(Allors.IStrategy allors) : base(allors){}



		virtual public global::System.String From 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(UserMeta.From);
			}
			set
			{
				Strategy.SetUnitRole(UserMeta.From, value);
			}
		}

		virtual public bool ExistFrom{
			get
			{
				return Strategy.ExistUnitRole(UserMeta.From);
			}
		}

		virtual public void RemoveFrom()
		{
			Strategy.RemoveUnitRole(UserMeta.From);
		}


		virtual public Allors.Extent<global::Domain.User> Selects
		{ 
			get
			{
				return Strategy.GetCompositeRoles(UserMeta.Select);
			}
			set
			{
				Strategy.SetCompositeRoles(UserMeta.Select, value);
			}
		}

		virtual public void AddSelect (global::Domain.User value)
		{
			Strategy.AddCompositeRole(UserMeta.Select, value);
		}

		virtual public void RemoveSelect (global::Domain.User value)
		{
			Strategy.RemoveCompositeRole(UserMeta.Select,value);
		}

		virtual public bool ExistSelects
		{
			get
			{
				return Strategy.ExistCompositeRoles(UserMeta.Select);
			}
		}

		virtual public void RemoveSelects()
		{
			Strategy.RemoveCompositeRoles(UserMeta.Select);
		}



		virtual public Allors.Extent<global::Domain.User> UsersWhereSelect
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(UserMeta.UsersWhereSelect);
			}
		}

		virtual public bool ExistUsersWhereSelect
		{
			get
			{
				return Strategy.ExistCompositeAssociations(UserMeta.UsersWhereSelect);
			}
		}

	}
}