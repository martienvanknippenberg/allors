// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public partial interface S1 :  global::Domain.S1234, Allors.R1.IObject
	{


		global::System.Decimal? S1AllorsDecimal 
		{
			get;
			set;
		}

		bool ExistS1AllorsDecimal{get;}

		void RemoveS1AllorsDecimal();


		global::System.Int32? S1AllorsInteger 
		{
			get;
			set;
		}

		bool ExistS1AllorsInteger{get;}

		void RemoveS1AllorsInteger();


		global::System.Byte[] S1AllorsBinary 
		{
			get;
			set;
		}

		bool ExistS1AllorsBinary{get;}

		void RemoveS1AllorsBinary();


		global::System.Guid? S1AllorsUnique 
		{
			get;
			set;
		}

		bool ExistS1AllorsUnique{get;}

		void RemoveS1AllorsUnique();


		global::System.String S1StringLarge 
		{
			get;
			set;
		}

		bool ExistS1StringLarge{get;}

		void RemoveS1StringLarge();


		global::Domain.S2 S1S2many2one
		{ 
			get;
			set;
		}

		bool ExistS1S2many2one
		{
			get;
		}

		void RemoveS1S2many2one();


		Allors.R1.Extent<global::Domain.S2> S1S2one2manies
		{ 
			get;
			set;
		}

		void AddS1S2one2many (global::Domain.S2 value);

		void RemoveS1S2one2many (global::Domain.S2 value);

		bool ExistS1S2one2manies
		{
			get;
		}

		void RemoveS1S2one2manies();


		global::System.Double? S1AllorsDouble 
		{
			get;
			set;
		}

		bool ExistS1AllorsDouble{get;}

		void RemoveS1AllorsDouble();


		global::System.String S1AllorsString 
		{
			get;
			set;
		}

		bool ExistS1AllorsString{get;}

		void RemoveS1AllorsString();


		global::Domain.C1 S1C1many2one
		{ 
			get;
			set;
		}

		bool ExistS1C1many2one
		{
			get;
		}

		void RemoveS1C1many2one();


		global::Domain.C1 S1C1one2one
		{ 
			get;
			set;
		}

		bool ExistS1C1one2one
		{
			get;
		}

		void RemoveS1C1one2one();


		global::System.Boolean? S1AllorsBoolean 
		{
			get;
			set;
		}

		bool ExistS1AllorsBoolean{get;}

		void RemoveS1AllorsBoolean();


		Allors.R1.Extent<global::Domain.C1> S1C1many2manies
		{ 
			get;
			set;
		}

		void AddS1C1many2many (global::Domain.C1 value);

		void RemoveS1C1many2many (global::Domain.C1 value);

		bool ExistS1C1many2manies
		{
			get;
		}

		void RemoveS1C1many2manies();


		Allors.R1.Extent<global::Domain.S2> S1S2many2manies
		{ 
			get;
			set;
		}

		void AddS1S2many2many (global::Domain.S2 value);

		void RemoveS1S2many2many (global::Domain.S2 value);

		bool ExistS1S2many2manies
		{
			get;
		}

		void RemoveS1S2many2manies();


		global::Domain.S2 S1S2one2one
		{ 
			get;
			set;
		}

		bool ExistS1S2one2one
		{
			get;
		}

		void RemoveS1S2one2one();


		global::System.Int64? S1AllorsLong 
		{
			get;
			set;
		}

		bool ExistS1AllorsLong{get;}

		void RemoveS1AllorsLong();


		global::System.DateTime? S1AllorsDateTime 
		{
			get;
			set;
		}

		bool ExistS1AllorsDateTime{get;}

		void RemoveS1AllorsDateTime();


		Allors.R1.Extent<global::Domain.C1> S1C1one2manies
		{ 
			get;
			set;
		}

		void AddS1C1one2many (global::Domain.C1 value);

		void RemoveS1C1one2many (global::Domain.C1 value);

		bool ExistS1C1one2manies
		{
			get;
		}

		void RemoveS1C1one2manies();



		global::Domain.C1 C1WhereS1one2many
		{
			get;
		}

		bool ExistC1WhereS1one2many
		{
			get;
		}


		global::Domain.I1 I1WhereS1one2one
		{
			get;
		}

		bool ExistI1WhereS1one2one
		{
			get;
		}


		Allors.R1.Extent<global::Domain.C1> C1sWhereS1many2many
		{ 
			get;
		}

		bool ExistC1sWhereS1many2many
		{
			get;
		}


		Allors.R1.Extent<global::Domain.C1> C1sWhereS1many2one
		{ 
			get;
		}

		bool ExistC1sWhereS1many2one
		{
			get;
		}


		Allors.R1.Extent<global::Domain.I1> I1sWhereS1many2many
		{ 
			get;
		}

		bool ExistI1sWhereS1many2many
		{
			get;
		}


		global::Domain.C1 C1WhereS1one2one
		{
			get;
		}

		bool ExistC1WhereS1one2one
		{
			get;
		}


		global::Domain.I1 I1WhereS1one2many
		{
			get;
		}

		bool ExistI1WhereS1one2many
		{
			get;
		}


		Allors.R1.Extent<global::Domain.I1> I1sWhereS1many2one
		{ 
			get;
		}

		bool ExistI1sWhereS1many2one
		{
			get;
		}

	}

}