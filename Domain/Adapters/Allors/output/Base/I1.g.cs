// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public partial interface I1 :  global::Domain.S1,global::Domain.S1234, Allors.IObject
	{


		Allors.Extent<global::Domain.I34> I1I34one2manies
		{ 
			get;
			set;
		}

		void AddI1I34one2many (global::Domain.I34 value);

		void RemoveI1I34one2many (global::Domain.I34 value);

		bool ExistI1I34one2manies
		{
			get;
		}

		void RemoveI1I34one2manies();


		Allors.Extent<global::Domain.I2> I1I2one2manies
		{ 
			get;
			set;
		}

		void AddI1I2one2many (global::Domain.I2 value);

		void RemoveI1I2one2many (global::Domain.I2 value);

		bool ExistI1I2one2manies
		{
			get;
		}

		void RemoveI1I2one2manies();


		global::Domain.I2 I1I2many2one
		{ 
			get;
			set;
		}

		bool ExistI1I2many2one
		{
			get;
		}

		void RemoveI1I2many2one();


		global::Domain.C2 I1C2many2one
		{ 
			get;
			set;
		}

		bool ExistI1C2many2one
		{
			get;
		}

		void RemoveI1C2many2one();


		global::Domain.C2 I1C2one2one
		{ 
			get;
			set;
		}

		bool ExistI1C2one2one
		{
			get;
		}

		void RemoveI1C2one2one();


		global::System.Decimal? I1DecimalBetweenA 
		{
			get;
			set;
		}

		bool ExistI1DecimalBetweenA{get;}

		void RemoveI1DecimalBetweenA();


		global::Domain.S1 I1S1one2one
		{ 
			get;
			set;
		}

		bool ExistI1S1one2one
		{
			get;
		}

		void RemoveI1S1one2one();


		global::Domain.I12 I1I12many2one
		{ 
			get;
			set;
		}

		bool ExistI1I12many2one
		{
			get;
		}

		void RemoveI1I12many2one();


		global::System.String I1AllorsString 
		{
			get;
			set;
		}

		bool ExistI1AllorsString{get;}

		void RemoveI1AllorsString();


		global::System.DateTime? I1DateTimeLessThan 
		{
			get;
			set;
		}

		bool ExistI1DateTimeLessThan{get;}

		void RemoveI1DateTimeLessThan();


		Allors.Extent<global::Domain.C2> I1C2one2manies
		{ 
			get;
			set;
		}

		void AddI1C2one2many (global::Domain.C2 value);

		void RemoveI1C2one2many (global::Domain.C2 value);

		bool ExistI1C2one2manies
		{
			get;
		}

		void RemoveI1C2one2manies();


		global::System.String I1StringLarge 
		{
			get;
			set;
		}

		bool ExistI1StringLarge{get;}

		void RemoveI1StringLarge();


		global::System.Double? I1DoubleLessThan 
		{
			get;
			set;
		}

		bool ExistI1DoubleLessThan{get;}

		void RemoveI1DoubleLessThan();


		global::System.DateTime? I1AllorsDateTime 
		{
			get;
			set;
		}

		bool ExistI1AllorsDateTime{get;}

		void RemoveI1AllorsDateTime();


		global::Domain.C1 I1C1many2one
		{ 
			get;
			set;
		}

		bool ExistI1C1many2one
		{
			get;
		}

		void RemoveI1C1many2one();


		global::System.Int64? I1LongBetweenB 
		{
			get;
			set;
		}

		bool ExistI1LongBetweenB{get;}

		void RemoveI1LongBetweenB();


		global::Domain.I12 I1I12one2one
		{ 
			get;
			set;
		}

		bool ExistI1I12one2one
		{
			get;
		}

		void RemoveI1I12one2one();


		global::System.Decimal? I1DecimalGreaterThan 
		{
			get;
			set;
		}

		bool ExistI1DecimalGreaterThan{get;}

		void RemoveI1DecimalGreaterThan();


		global::Domain.C1 I1C1one2one
		{ 
			get;
			set;
		}

		bool ExistI1C1one2one
		{
			get;
		}

		void RemoveI1C1one2one();


		global::System.Int64? I1LongLessThan 
		{
			get;
			set;
		}

		bool ExistI1LongLessThan{get;}

		void RemoveI1LongLessThan();


		Allors.Extent<global::Domain.I2> I1I2many2manies
		{ 
			get;
			set;
		}

		void AddI1I2many2many (global::Domain.I2 value);

		void RemoveI1I2many2many (global::Domain.I2 value);

		bool ExistI1I2many2manies
		{
			get;
		}

		void RemoveI1I2many2manies();


		global::System.Int32? I1IntegerBetweenA 
		{
			get;
			set;
		}

		bool ExistI1IntegerBetweenA{get;}

		void RemoveI1IntegerBetweenA();


		global::Domain.I34 I1I34many2one
		{ 
			get;
			set;
		}

		bool ExistI1I34many2one
		{
			get;
		}

		void RemoveI1I34many2one();


		global::System.Double? I1DoubleBetweenA 
		{
			get;
			set;
		}

		bool ExistI1DoubleBetweenA{get;}

		void RemoveI1DoubleBetweenA();


		global::System.Int32? I1IntegerLessThan 
		{
			get;
			set;
		}

		bool ExistI1IntegerLessThan{get;}

		void RemoveI1IntegerLessThan();


		global::System.Int32? I1AllorsInteger 
		{
			get;
			set;
		}

		bool ExistI1AllorsInteger{get;}

		void RemoveI1AllorsInteger();


		global::Domain.S2 I1S2one2one
		{ 
			get;
			set;
		}

		bool ExistI1S2one2one
		{
			get;
		}

		void RemoveI1S2one2one();


		global::System.Boolean? I1AllorsBoolean 
		{
			get;
			set;
		}

		bool ExistI1AllorsBoolean{get;}

		void RemoveI1AllorsBoolean();


		global::Domain.I1 I1I1many2one
		{ 
			get;
			set;
		}

		bool ExistI1I1many2one
		{
			get;
		}

		void RemoveI1I1many2one();


		Allors.Extent<global::Domain.C1> I1C1many2manies
		{ 
			get;
			set;
		}

		void AddI1C1many2many (global::Domain.C1 value);

		void RemoveI1C1many2many (global::Domain.C1 value);

		bool ExistI1C1many2manies
		{
			get;
		}

		void RemoveI1C1many2manies();


		global::Domain.I2 I1I2one2one
		{ 
			get;
			set;
		}

		bool ExistI1I2one2one
		{
			get;
		}

		void RemoveI1I2one2one();


		global::System.Int64? I1AllorsLong 
		{
			get;
			set;
		}

		bool ExistI1AllorsLong{get;}

		void RemoveI1AllorsLong();


		global::System.Decimal? I1AllorsDecimal 
		{
			get;
			set;
		}

		bool ExistI1AllorsDecimal{get;}

		void RemoveI1AllorsDecimal();


		Allors.Extent<global::Domain.S1> I1S1many2manies
		{ 
			get;
			set;
		}

		void AddI1S1many2many (global::Domain.S1 value);

		void RemoveI1S1many2many (global::Domain.S1 value);

		bool ExistI1S1many2manies
		{
			get;
		}

		void RemoveI1S1many2manies();


		global::System.DateTime? I1DateTimeGreaterThan 
		{
			get;
			set;
		}

		bool ExistI1DateTimeGreaterThan{get;}

		void RemoveI1DateTimeGreaterThan();


		Allors.Extent<global::Domain.I34> I1I34many2manies
		{ 
			get;
			set;
		}

		void AddI1I34many2many (global::Domain.I34 value);

		void RemoveI1I34many2many (global::Domain.I34 value);

		bool ExistI1I34many2manies
		{
			get;
		}

		void RemoveI1I34many2manies();


		global::Domain.I34 I1I34one2one
		{ 
			get;
			set;
		}

		bool ExistI1I34one2one
		{
			get;
		}

		void RemoveI1I34one2one();


		Allors.Extent<global::Domain.I1> I1I1one2manies
		{ 
			get;
			set;
		}

		void AddI1I1one2many (global::Domain.I1 value);

		void RemoveI1I1one2many (global::Domain.I1 value);

		bool ExistI1I1one2manies
		{
			get;
		}

		void RemoveI1I1one2manies();


		Allors.Extent<global::Domain.I1> I1I1many2manies
		{ 
			get;
			set;
		}

		void AddI1I1many2many (global::Domain.I1 value);

		void RemoveI1I1many2many (global::Domain.I1 value);

		bool ExistI1I1many2manies
		{
			get;
		}

		void RemoveI1I1many2manies();


		Allors.Extent<global::Domain.S2> I1S2many2manies
		{ 
			get;
			set;
		}

		void AddI1S2many2many (global::Domain.S2 value);

		void RemoveI1S2many2many (global::Domain.S2 value);

		bool ExistI1S2many2manies
		{
			get;
		}

		void RemoveI1S2many2manies();


		Allors.Extent<global::Domain.I12> I1I12many2manies
		{ 
			get;
			set;
		}

		void AddI1I12many2many (global::Domain.I12 value);

		void RemoveI1I12many2many (global::Domain.I12 value);

		bool ExistI1I12many2manies
		{
			get;
		}

		void RemoveI1I12many2manies();


		global::System.String I1StringEquals 
		{
			get;
			set;
		}

		bool ExistI1StringEquals{get;}

		void RemoveI1StringEquals();


		global::System.Int64? I1LongGreaterThan 
		{
			get;
			set;
		}

		bool ExistI1LongGreaterThan{get;}

		void RemoveI1LongGreaterThan();


		Allors.Extent<global::Domain.I12> I1I12one2manies
		{ 
			get;
			set;
		}

		void AddI1I12one2many (global::Domain.I12 value);

		void RemoveI1I12one2many (global::Domain.I12 value);

		bool ExistI1I12one2manies
		{
			get;
		}

		void RemoveI1I12one2manies();


		Allors.Extent<global::Domain.S2> I1S2one2manies
		{ 
			get;
			set;
		}

		void AddI1S2one2many (global::Domain.S2 value);

		void RemoveI1S2one2many (global::Domain.S2 value);

		bool ExistI1S2one2manies
		{
			get;
		}

		void RemoveI1S2one2manies();


		Allors.Extent<global::Domain.C2> I1C2many2manies
		{ 
			get;
			set;
		}

		void AddI1C2many2many (global::Domain.C2 value);

		void RemoveI1C2many2many (global::Domain.C2 value);

		bool ExistI1C2many2manies
		{
			get;
		}

		void RemoveI1C2many2manies();


		global::System.Byte[] I1AllorsBinary 
		{
			get;
			set;
		}

		bool ExistI1AllorsBinary{get;}

		void RemoveI1AllorsBinary();


		global::System.Decimal? I1DecimalBetweenB 
		{
			get;
			set;
		}

		bool ExistI1DecimalBetweenB{get;}

		void RemoveI1DecimalBetweenB();


		global::System.Int64? I1LongBetweenA 
		{
			get;
			set;
		}

		bool ExistI1LongBetweenA{get;}

		void RemoveI1LongBetweenA();


		global::System.Double? I1DoubleGreaterThan 
		{
			get;
			set;
		}

		bool ExistI1DoubleGreaterThan{get;}

		void RemoveI1DoubleGreaterThan();


		global::System.Int32? I1IntegerBetweenB 
		{
			get;
			set;
		}

		bool ExistI1IntegerBetweenB{get;}

		void RemoveI1IntegerBetweenB();


		global::System.DateTime? I1DateTimeBetweenA 
		{
			get;
			set;
		}

		bool ExistI1DateTimeBetweenA{get;}

		void RemoveI1DateTimeBetweenA();


		global::System.Double? I1AllorsDouble 
		{
			get;
			set;
		}

		bool ExistI1AllorsDouble{get;}

		void RemoveI1AllorsDouble();


		Allors.Extent<global::Domain.S1> I1S1one2manies
		{ 
			get;
			set;
		}

		void AddI1S1one2many (global::Domain.S1 value);

		void RemoveI1S1one2many (global::Domain.S1 value);

		bool ExistI1S1one2manies
		{
			get;
		}

		void RemoveI1S1one2manies();


		global::Domain.I1 I1I1one2one
		{ 
			get;
			set;
		}

		bool ExistI1I1one2one
		{
			get;
		}

		void RemoveI1I1one2one();


		global::System.Int32? I1IntegerGreaterThan 
		{
			get;
			set;
		}

		bool ExistI1IntegerGreaterThan{get;}

		void RemoveI1IntegerGreaterThan();


		global::Domain.S1 I1S1many2one
		{ 
			get;
			set;
		}

		bool ExistI1S1many2one
		{
			get;
		}

		void RemoveI1S1many2one();


		global::System.Double? I1DoubleBetweenB 
		{
			get;
			set;
		}

		bool ExistI1DoubleBetweenB{get;}

		void RemoveI1DoubleBetweenB();


		global::System.Decimal? I1DecimalLessThan 
		{
			get;
			set;
		}

		bool ExistI1DecimalLessThan{get;}

		void RemoveI1DecimalLessThan();


		global::System.DateTime? I1DateTimeBetweenB 
		{
			get;
			set;
		}

		bool ExistI1DateTimeBetweenB{get;}

		void RemoveI1DateTimeBetweenB();


		global::System.Guid? I1AllorsUnique 
		{
			get;
			set;
		}

		bool ExistI1AllorsUnique{get;}

		void RemoveI1AllorsUnique();


		Allors.Extent<global::Domain.C1> I1C1one2manies
		{ 
			get;
			set;
		}

		void AddI1C1one2many (global::Domain.C1 value);

		void RemoveI1C1one2many (global::Domain.C1 value);

		bool ExistI1C1one2manies
		{
			get;
		}

		void RemoveI1C1one2manies();


		global::Domain.S2 I1S2many2one
		{ 
			get;
			set;
		}

		bool ExistI1S2many2one
		{
			get;
		}

		void RemoveI1S2many2one();



		global::Domain.C1 C1WhereI1one2one
		{
			get;
		}

		bool ExistC1WhereI1one2one
		{
			get;
		}


		Allors.Extent<global::Domain.I1> I1sWhereI1many2one
		{ 
			get;
		}

		bool ExistI1sWhereI1many2one
		{
			get;
		}


		Allors.Extent<global::Domain.C1> C1sWhereI1many2many
		{ 
			get;
		}

		bool ExistC1sWhereI1many2many
		{
			get;
		}


		Allors.Extent<global::Domain.C1> C1sWhereI1many2one
		{ 
			get;
		}

		bool ExistC1sWhereI1many2one
		{
			get;
		}


		global::Domain.I1 I1WhereI1one2many
		{
			get;
		}

		bool ExistI1WhereI1one2many
		{
			get;
		}


		Allors.Extent<global::Domain.I1> I1sWhereI1many2many
		{ 
			get;
		}

		bool ExistI1sWhereI1many2many
		{
			get;
		}


		global::Domain.C1 C1WhereI1one2many
		{
			get;
		}

		bool ExistC1WhereI1one2many
		{
			get;
		}


		global::Domain.I1 I1WhereI1one2one
		{
			get;
		}

		bool ExistI1WhereI1one2one
		{
			get;
		}

	}

}