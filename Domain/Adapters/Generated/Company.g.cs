// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public partial class Company : CompanyAllors , global::Domain.Named
	{
		public Company(Allors.IStrategy allors) : base(allors) {}

		public static Company Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return (Company) allorsSession.Instantiate(allorsObjectId);		
		}
	}

	[System.Diagnostics.DebuggerNonUserCode]
	public abstract class CompanyAllors : Allors.ObjectBase
	{
		protected CompanyAllors(Allors.IStrategy allors) : base(allors){}


		virtual public global::Domain.Person Manager
		{ 
			get
			{
				return (global::Domain.Person) Strategy.GetCompositeRole(CompanyMeta.Manager);
			}
			set
			{
				Strategy.SetCompositeRole(CompanyMeta.Manager ,value);
			}
		}

		virtual public bool ExistManager
		{
			get
			{
				return Strategy.ExistCompositeRole(CompanyMeta.Manager);
			}
		}

		virtual public void RemoveManager()
		{
			Strategy.RemoveCompositeRole(CompanyMeta.Manager);
		}


		virtual public Allors.Extent<global::Domain.Person> Employees
		{ 
			get
			{
				return Strategy.GetCompositeRoles(CompanyMeta.Employee);
			}
			set
			{
				Strategy.SetCompositeRoles(CompanyMeta.Employee, value);
			}
		}

		virtual public void AddEmployee (global::Domain.Person value)
		{
			Strategy.AddCompositeRole(CompanyMeta.Employee, value);
		}

		virtual public void RemoveEmployee (global::Domain.Person value)
		{
			Strategy.RemoveCompositeRole(CompanyMeta.Employee,value);
		}

		virtual public bool ExistEmployees
		{
			get
			{
				return Strategy.ExistCompositeRoles(CompanyMeta.Employee);
			}
		}

		virtual public void RemoveEmployees()
		{
			Strategy.RemoveCompositeRoles(CompanyMeta.Employee);
		}


		virtual public global::Domain.Person FirstPerson
		{ 
			get
			{
				return (global::Domain.Person) Strategy.GetCompositeRole(CompanyMeta.FirstPerson);
			}
			set
			{
				Strategy.SetCompositeRole(CompanyMeta.FirstPerson ,value);
			}
		}

		virtual public bool ExistFirstPerson
		{
			get
			{
				return Strategy.ExistCompositeRole(CompanyMeta.FirstPerson);
			}
		}

		virtual public void RemoveFirstPerson()
		{
			Strategy.RemoveCompositeRole(CompanyMeta.FirstPerson);
		}


		virtual public Allors.Extent<global::Domain.Named> NamedsOneSort2
		{ 
			get
			{
				return Strategy.GetCompositeRoles(CompanyMeta.NamedOneSort2);
			}
			set
			{
				Strategy.SetCompositeRoles(CompanyMeta.NamedOneSort2, value);
			}
		}

		virtual public void AddNamedOneSort2 (global::Domain.Named value)
		{
			Strategy.AddCompositeRole(CompanyMeta.NamedOneSort2, value);
		}

		virtual public void RemoveNamedOneSort2 (global::Domain.Named value)
		{
			Strategy.RemoveCompositeRole(CompanyMeta.NamedOneSort2,value);
		}

		virtual public bool ExistNamedsOneSort2
		{
			get
			{
				return Strategy.ExistCompositeRoles(CompanyMeta.NamedOneSort2);
			}
		}

		virtual public void RemoveNamedsOneSort2()
		{
			Strategy.RemoveCompositeRoles(CompanyMeta.NamedOneSort2);
		}


		virtual public Allors.Extent<global::Domain.Person> Owners
		{ 
			get
			{
				return Strategy.GetCompositeRoles(CompanyMeta.Owner);
			}
			set
			{
				Strategy.SetCompositeRoles(CompanyMeta.Owner, value);
			}
		}

		virtual public void AddOwner (global::Domain.Person value)
		{
			Strategy.AddCompositeRole(CompanyMeta.Owner, value);
		}

		virtual public void RemoveOwner (global::Domain.Person value)
		{
			Strategy.RemoveCompositeRole(CompanyMeta.Owner,value);
		}

		virtual public bool ExistOwners
		{
			get
			{
				return Strategy.ExistCompositeRoles(CompanyMeta.Owner);
			}
		}

		virtual public void RemoveOwners()
		{
			Strategy.RemoveCompositeRoles(CompanyMeta.Owner);
		}


		virtual public Allors.Extent<global::Domain.Person> IndexedMany2ManyPersons
		{ 
			get
			{
				return Strategy.GetCompositeRoles(CompanyMeta.IndexedMany2ManyPerson);
			}
			set
			{
				Strategy.SetCompositeRoles(CompanyMeta.IndexedMany2ManyPerson, value);
			}
		}

		virtual public void AddIndexedMany2ManyPerson (global::Domain.Person value)
		{
			Strategy.AddCompositeRole(CompanyMeta.IndexedMany2ManyPerson, value);
		}

		virtual public void RemoveIndexedMany2ManyPerson (global::Domain.Person value)
		{
			Strategy.RemoveCompositeRole(CompanyMeta.IndexedMany2ManyPerson,value);
		}

		virtual public bool ExistIndexedMany2ManyPersons
		{
			get
			{
				return Strategy.ExistCompositeRoles(CompanyMeta.IndexedMany2ManyPerson);
			}
		}

		virtual public void RemoveIndexedMany2ManyPersons()
		{
			Strategy.RemoveCompositeRoles(CompanyMeta.IndexedMany2ManyPerson);
		}


		virtual public Allors.Extent<global::Domain.Person> PersonsOneSort1
		{ 
			get
			{
				return Strategy.GetCompositeRoles(CompanyMeta.PersonOneSort1);
			}
			set
			{
				Strategy.SetCompositeRoles(CompanyMeta.PersonOneSort1, value);
			}
		}

		virtual public void AddPersonOneSort1 (global::Domain.Person value)
		{
			Strategy.AddCompositeRole(CompanyMeta.PersonOneSort1, value);
		}

		virtual public void RemovePersonOneSort1 (global::Domain.Person value)
		{
			Strategy.RemoveCompositeRole(CompanyMeta.PersonOneSort1,value);
		}

		virtual public bool ExistPersonsOneSort1
		{
			get
			{
				return Strategy.ExistCompositeRoles(CompanyMeta.PersonOneSort1);
			}
		}

		virtual public void RemovePersonsOneSort1()
		{
			Strategy.RemoveCompositeRoles(CompanyMeta.PersonOneSort1);
		}


		virtual public Allors.Extent<global::Domain.Person> PersonsManySort1
		{ 
			get
			{
				return Strategy.GetCompositeRoles(CompanyMeta.PersonManySort1);
			}
			set
			{
				Strategy.SetCompositeRoles(CompanyMeta.PersonManySort1, value);
			}
		}

		virtual public void AddPersonManySort1 (global::Domain.Person value)
		{
			Strategy.AddCompositeRole(CompanyMeta.PersonManySort1, value);
		}

		virtual public void RemovePersonManySort1 (global::Domain.Person value)
		{
			Strategy.RemoveCompositeRole(CompanyMeta.PersonManySort1,value);
		}

		virtual public bool ExistPersonsManySort1
		{
			get
			{
				return Strategy.ExistCompositeRoles(CompanyMeta.PersonManySort1);
			}
		}

		virtual public void RemovePersonsManySort1()
		{
			Strategy.RemoveCompositeRoles(CompanyMeta.PersonManySort1);
		}


		virtual public Allors.Extent<global::Domain.Named> NamedsManySort1
		{ 
			get
			{
				return Strategy.GetCompositeRoles(CompanyMeta.NamedManySort1);
			}
			set
			{
				Strategy.SetCompositeRoles(CompanyMeta.NamedManySort1, value);
			}
		}

		virtual public void AddNamedManySort1 (global::Domain.Named value)
		{
			Strategy.AddCompositeRole(CompanyMeta.NamedManySort1, value);
		}

		virtual public void RemoveNamedManySort1 (global::Domain.Named value)
		{
			Strategy.RemoveCompositeRole(CompanyMeta.NamedManySort1,value);
		}

		virtual public bool ExistNamedsManySort1
		{
			get
			{
				return Strategy.ExistCompositeRoles(CompanyMeta.NamedManySort1);
			}
		}

		virtual public void RemoveNamedsManySort1()
		{
			Strategy.RemoveCompositeRoles(CompanyMeta.NamedManySort1);
		}


		virtual public Allors.Extent<global::Domain.Person> PersonsManySort2
		{ 
			get
			{
				return Strategy.GetCompositeRoles(CompanyMeta.PersonManySort2);
			}
			set
			{
				Strategy.SetCompositeRoles(CompanyMeta.PersonManySort2, value);
			}
		}

		virtual public void AddPersonManySort2 (global::Domain.Person value)
		{
			Strategy.AddCompositeRole(CompanyMeta.PersonManySort2, value);
		}

		virtual public void RemovePersonManySort2 (global::Domain.Person value)
		{
			Strategy.RemoveCompositeRole(CompanyMeta.PersonManySort2,value);
		}

		virtual public bool ExistPersonsManySort2
		{
			get
			{
				return Strategy.ExistCompositeRoles(CompanyMeta.PersonManySort2);
			}
		}

		virtual public void RemovePersonsManySort2()
		{
			Strategy.RemoveCompositeRoles(CompanyMeta.PersonManySort2);
		}


		virtual public Allors.Extent<global::Domain.Person> PersonsOneSort2
		{ 
			get
			{
				return Strategy.GetCompositeRoles(CompanyMeta.PersonOneSort2);
			}
			set
			{
				Strategy.SetCompositeRoles(CompanyMeta.PersonOneSort2, value);
			}
		}

		virtual public void AddPersonOneSort2 (global::Domain.Person value)
		{
			Strategy.AddCompositeRole(CompanyMeta.PersonOneSort2, value);
		}

		virtual public void RemovePersonOneSort2 (global::Domain.Person value)
		{
			Strategy.RemoveCompositeRole(CompanyMeta.PersonOneSort2,value);
		}

		virtual public bool ExistPersonsOneSort2
		{
			get
			{
				return Strategy.ExistCompositeRoles(CompanyMeta.PersonOneSort2);
			}
		}

		virtual public void RemovePersonsOneSort2()
		{
			Strategy.RemoveCompositeRoles(CompanyMeta.PersonOneSort2);
		}


		virtual public global::Domain.Named NamedManySort2
		{ 
			get
			{
				return (global::Domain.Named) Strategy.GetCompositeRole(CompanyMeta.NamedManySort2);
			}
			set
			{
				Strategy.SetCompositeRole(CompanyMeta.NamedManySort2 ,value);
			}
		}

		virtual public bool ExistNamedManySort2
		{
			get
			{
				return Strategy.ExistCompositeRole(CompanyMeta.NamedManySort2);
			}
		}

		virtual public void RemoveNamedManySort2()
		{
			Strategy.RemoveCompositeRole(CompanyMeta.NamedManySort2);
		}


		virtual public Allors.Extent<global::Domain.Person> Many2ManyPersons
		{ 
			get
			{
				return Strategy.GetCompositeRoles(CompanyMeta.Many2ManyPerson);
			}
			set
			{
				Strategy.SetCompositeRoles(CompanyMeta.Many2ManyPerson, value);
			}
		}

		virtual public void AddMany2ManyPerson (global::Domain.Person value)
		{
			Strategy.AddCompositeRole(CompanyMeta.Many2ManyPerson, value);
		}

		virtual public void RemoveMany2ManyPerson (global::Domain.Person value)
		{
			Strategy.RemoveCompositeRole(CompanyMeta.Many2ManyPerson,value);
		}

		virtual public bool ExistMany2ManyPersons
		{
			get
			{
				return Strategy.ExistCompositeRoles(CompanyMeta.Many2ManyPerson);
			}
		}

		virtual public void RemoveMany2ManyPersons()
		{
			Strategy.RemoveCompositeRoles(CompanyMeta.Many2ManyPerson);
		}


		virtual public Allors.Extent<global::Domain.Company> Children
		{ 
			get
			{
				return Strategy.GetCompositeRoles(CompanyMeta.Child);
			}
			set
			{
				Strategy.SetCompositeRoles(CompanyMeta.Child, value);
			}
		}

		virtual public void AddChild (global::Domain.Company value)
		{
			Strategy.AddCompositeRole(CompanyMeta.Child, value);
		}

		virtual public void RemoveChild (global::Domain.Company value)
		{
			Strategy.RemoveCompositeRole(CompanyMeta.Child,value);
		}

		virtual public bool ExistChildren
		{
			get
			{
				return Strategy.ExistCompositeRoles(CompanyMeta.Child);
			}
		}

		virtual public void RemoveChildren()
		{
			Strategy.RemoveCompositeRoles(CompanyMeta.Child);
		}


		virtual public Allors.Extent<global::Domain.Named> NamedsOneSort1
		{ 
			get
			{
				return Strategy.GetCompositeRoles(CompanyMeta.NamedOneSort1);
			}
			set
			{
				Strategy.SetCompositeRoles(CompanyMeta.NamedOneSort1, value);
			}
		}

		virtual public void AddNamedOneSort1 (global::Domain.Named value)
		{
			Strategy.AddCompositeRole(CompanyMeta.NamedOneSort1, value);
		}

		virtual public void RemoveNamedOneSort1 (global::Domain.Named value)
		{
			Strategy.RemoveCompositeRole(CompanyMeta.NamedOneSort1,value);
		}

		virtual public bool ExistNamedsOneSort1
		{
			get
			{
				return Strategy.ExistCompositeRoles(CompanyMeta.NamedOneSort1);
			}
		}

		virtual public void RemoveNamedsOneSort1()
		{
			Strategy.RemoveCompositeRoles(CompanyMeta.NamedOneSort1);
		}



		virtual public global::System.String Name 
		{
			get
			{
				return (global::System.String) Strategy.GetUnitRole(CompanyMeta.Name);
			}
			set
			{
				Strategy.SetUnitRole(CompanyMeta.Name, value);
			}
		}

		virtual public bool ExistName{
			get
			{
				return Strategy.ExistUnitRole(CompanyMeta.Name);
			}
		}

		virtual public void RemoveName()
		{
			Strategy.RemoveUnitRole(CompanyMeta.Name);
		}



		virtual public global::System.Int32? Index 
		{
			get
			{
				return (global::System.Int32?) Strategy.GetUnitRole(CompanyMeta.Index);
			}
			set
			{
				Strategy.SetUnitRole(CompanyMeta.Index, value);
			}
		}

		virtual public bool ExistIndex{
			get
			{
				return Strategy.ExistUnitRole(CompanyMeta.Index);
			}
		}

		virtual public void RemoveIndex()
		{
			Strategy.RemoveUnitRole(CompanyMeta.Index);
		}



		virtual public Allors.Extent<global::Domain.Person> PersonsWhereCompany
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(CompanyMeta.PersonsWhereCompany);
			}
		}

		virtual public bool ExistPersonsWhereCompany
		{
			get
			{
				return Strategy.ExistCompositeAssociations(CompanyMeta.PersonsWhereCompany);
			}
		}


		virtual public global::Domain.Company CompanyWhereChild
		{ 
			get
			{
				return (global::Domain.Company) Strategy.GetCompositeAssociation(CompanyMeta.CompanyWhereChild);
			}
		} 

		virtual public bool ExistCompanyWhereChild
		{
			get
			{
				return Strategy.ExistCompositeAssociation(CompanyMeta.CompanyWhereChild);
			}
		}


		virtual public global::Domain.Company CompanyWhereNamedOneSort2
		{ 
			get
			{
				return (global::Domain.Company) Strategy.GetCompositeAssociation(CompanyMeta.CompanyWhereNamedOneSort2);
			}
		} 

		virtual public bool ExistCompanyWhereNamedOneSort2
		{
			get
			{
				return Strategy.ExistCompositeAssociation(CompanyMeta.CompanyWhereNamedOneSort2);
			}
		}


		virtual public Allors.Extent<global::Domain.Company> CompaniesWhereNamedManySort1
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(CompanyMeta.CompaniesWhereNamedManySort1);
			}
		}

		virtual public bool ExistCompaniesWhereNamedManySort1
		{
			get
			{
				return Strategy.ExistCompositeAssociations(CompanyMeta.CompaniesWhereNamedManySort1);
			}
		}


		virtual public Allors.Extent<global::Domain.Company> CompaniesWhereNamedManySort2
		{ 
			get
			{
				return Strategy.GetCompositeAssociations(CompanyMeta.CompaniesWhereNamedManySort2);
			}
		}

		virtual public bool ExistCompaniesWhereNamedManySort2
		{
			get
			{
				return Strategy.ExistCompositeAssociations(CompanyMeta.CompaniesWhereNamedManySort2);
			}
		}


		virtual public global::Domain.Company CompanyWhereNamedOneSort1
		{ 
			get
			{
				return (global::Domain.Company) Strategy.GetCompositeAssociation(CompanyMeta.CompanyWhereNamedOneSort1);
			}
		} 

		virtual public bool ExistCompanyWhereNamedOneSort1
		{
			get
			{
				return Strategy.ExistCompositeAssociation(CompanyMeta.CompanyWhereNamedOneSort1);
			}
		}

	}

	public static class CompanyMeta
	{
		public static readonly global::Allors.Meta.Class ObjectType = (Allors.Meta.Class)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("b1b6361e-5ee5-434c-9c92-46c6166195c4") );

		public static readonly global::Allors.Meta.RoleType Manager = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("08ab248d-bdb1-49c5-a2da-d6485f49239f"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Employee = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("1a4087de-f116-4f79-9441-31faee8054f3"))).RoleType;
		public static readonly global::Allors.Meta.RoleType FirstPerson = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("28021756-f15f-4671-aa01-a40d3707d61a"))).RoleType;
		public static readonly global::Allors.Meta.RoleType NamedOneSort2 = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("2f9fc05e-c904-4056-83f0-a7081762594a"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Owner = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("44abca14-9fb2-42a7-b8ab-a1ca87d87b2e"))).RoleType;
		public static readonly global::Allors.Meta.RoleType IndexedMany2ManyPerson = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("509c5341-3d87-4da4-a807-5567d897169b"))).RoleType;
		public static readonly global::Allors.Meta.RoleType PersonOneSort1 = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("62b4ddac-efd7-4fc9-bbed-91c831a62f01"))).RoleType;
		public static readonly global::Allors.Meta.RoleType PersonManySort1 = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("64c1be0a-0636-4da0-8404-2a93ab600cd9"))).RoleType;
		public static readonly global::Allors.Meta.RoleType NamedManySort1 = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("996d27ff-3615-4a51-9214-944fac566a11"))).RoleType;
		public static readonly global::Allors.Meta.RoleType PersonManySort2 = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("a9f60154-6bd1-4c76-94eb-edfd5beb6749"))).RoleType;
		public static readonly global::Allors.Meta.RoleType PersonOneSort2 = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("bdf71d38-8082-4a99-9636-4f4ec26fd45c"))).RoleType;
		public static readonly global::Allors.Meta.RoleType NamedManySort2 = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("c1f68661-4999-4851-9224-1878258b6a58"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Many2ManyPerson = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("c53bdaea-c0a5-4179-bfbb-e12de45e2ae0"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Child = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("cde0a8e7-1a14-4f1a-a0ca-a305f0548df8"))).RoleType;
		public static readonly global::Allors.Meta.RoleType NamedOneSort1 = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("cdf04399-aa37-4ea2-9ac8-bf6d19884933"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Name = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("ce43ca5e-4dfb-4fe1-98ea-17d8382e9531"))).RoleType;
		public static readonly global::Allors.Meta.RoleType Index = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("fdad723a-f062-492a-989c-8d8727c52679"))).RoleType;

		public static readonly global::Allors.Meta.AssociationType PersonsWhereCompany = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("6cc83cb8-cb94-4716-bb7d-e25201f06b20"))).AssociationType;
		public static readonly global::Allors.Meta.AssociationType CompanyWhereChild = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("cde0a8e7-1a14-4f1a-a0ca-a305f0548df8"))).AssociationType;
		public static readonly global::Allors.Meta.AssociationType CompanyWhereNamedOneSort2 = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("2f9fc05e-c904-4056-83f0-a7081762594a"))).AssociationType;
		public static readonly global::Allors.Meta.AssociationType CompaniesWhereNamedManySort1 = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("996d27ff-3615-4a51-9214-944fac566a11"))).AssociationType;
		public static readonly global::Allors.Meta.AssociationType CompaniesWhereNamedManySort2 = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("c1f68661-4999-4851-9224-1878258b6a58"))).AssociationType;
		public static readonly global::Allors.Meta.AssociationType CompanyWhereNamedOneSort1 = ((Allors.Meta.RelationType)global::Allors.Meta.Repository.MetaPopulation.Find( new System.Guid("cdf04399-aa37-4ea2-9ac8-bf6d19884933"))).AssociationType;

	}
}