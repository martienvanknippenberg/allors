group AllorsCSharpMeta;

TemplateId() ::= <<14F49218-A676-43ba-9CBD-B8FFA059D1BF>>
TemplateName() ::= <<Allors C# Meta>>
TemplateVersion() ::= <<1.0.85>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(domain,settings) ::= <<
$! 
Copyright 2002-2013 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
	<generation template="domain" output="domain.g.cs"/> 
$domain.compositeObjectTypes:{objectType|<generation template="objectType" input="$objectType.Id $" output="$objectType.SingularName$.g.cs"/>}$
</generations>
>>

domain(domain,settings) ::= <<
namespace $namespace()$
{
	public static class M
	{
		#region Xml
		private const string Xml = @"
$domain.XmlVerbatimStringLiteral$		
		";
		#endregion

		public static readonly global::Allors.R1.Meta.Domain D;
        public static readonly global::System.Reflection.Assembly A;

		static M()
		{
	            using (var stringReader = new System.IO.StringReader(Xml))
        	    {
                	var xmlTextReader = new System.Xml.XmlTextReader(stringReader); 
                	D = global::Allors.R1.Meta.Domain.Load(xmlTextReader);
	            }

    		    A = typeof(M).Assembly;
		}
	}
}
>>

objectType(domain,settings,objectType) ::= <<
namespace $namespace()$
{
	public class $objectType.Name$Meta
	{
		public static readonly global::Allors.R1.Meta.ObjectType ObjectType = (Allors.R1.Meta.ObjectType)global::Domain.M.D.Find( new System.Guid("$objectType.IdAsString$") );

$objectType.RoleTypes:{roleType|$objectTypeRoleType(relationType=roleType.RelationTypeWhereRoleType,associationType=roleType.AssociationType,roleType=roleType)$
}$
$objectType.AssociationTypes:{associationType|$objectTypeAssociationType(relationType=associationType.RelationTypeWhereAssociationType,associationType=associationType,roleType=associationType.RoleType)$
}$
	}
}
>>

objectTypeRoleType(relationType,associationType,roleType) ::= <<
		public static readonly global::Allors.R1.Meta.RoleType $roleType.HierarchySingularName$ = ((Allors.R1.Meta.RelationType)global::Domain.M.D.Find( new System.Guid("$roleType.RelationType.IdAsString$"))).RoleType;
>>

objectTypeAssociationType(relationType,associationType,roleType) ::= <<
		public static readonly global::Allors.R1.Meta.AssociationType $associationType.FullName$ = ((Allors.R1.Meta.RelationType)global::Domain.M.D.Find( new System.Guid("$associationType.RelationType.IdAsString$"))).AssociationType;
>>

boolean(value) ::= "$if(value)$true$else$false$endif$"

namespace() ::= <%
$if(settings.existAllors)$
	$if(settings.allors.ExistNamespace)$
		$settings.allors.namespace$
	$endif$
$else$
	Domain
$endif$
%>