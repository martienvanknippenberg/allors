group AllorsCSharpBase;

TemplateId() ::= <<680A5CEE-D7A0-440a-B14C-879B74B0E769>>
TemplateName() ::= <<Allors C# Base>>
TemplateVersion() ::= <<1.0.65>>
TemplateAllors() ::= <<1.0>>
TemplateConfiguration(domain) ::= <<
$!
Copyright 2002-2013 Allors bvba.

Dual Licensed under
  a) the Lesser General Public Licence v3 (LGPL)
  b) the Allors License

The LGPL License is included in the file lgpl.txt.
The Allors License is an addendum to your contract.

Allors Platform is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For more information visit http://www.allors.com/legal
!$
<generations>
$domain.Interfaces:{interface|<generation template="interface" input="$interface.Id $" output="$interface.SingularName$.g.cs"/>}$
$domain.Classes:{class|<generation template="class" input="$class.Id $" output="$class.SingularName$.g.cs"/>}$
</generations>
>>

interface(domain,objectType) ::= <<
// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public partial interface $objectType.name$ : $if(objectType.existDirectSupertypes)$ $objectType.directSupertypes:{directSupertype|$globalNullableName(directSupertype)$,}$ $endif$Allors.IObject
	{
$objectType.associationTypesWhereObjectType:{associationType|$interfaceRoleType(relationType=associationType.RelationType,associationType=associationType,roleType=associationType.RoleType)$}$
$objectType.roleTypesWhereObjectType:{roleType|$interfaceAssociationType(relationType=roleType.RelationType,associationType=roleType.AssociationType,roleType=roleType)$}$
	}
	
	public static class $objectType.name$Meta
	{
		public static readonly global::Allors.Meta.Interface ObjectType = (Allors.Meta.Interface)global::Domain.M.D.Find( new System.Guid("$objectType.IdAsString$") );

$objectType.RoleTypes:{roleType|$metaRoleType(relationType=roleType.RelationType,associationType=roleType.AssociationType,roleType=roleType)$
}$
$objectType.AssociationTypes:{associationType|$metaAssociationType(relationType=associationType.RelationType,associationType=associationType,roleType=associationType.RoleType)$
}$
	}
}
>>

class(domain,objectType) ::= <<
// Allors generated file. 
// Do not edit this file, changes will be overwritten.
namespace Domain
{
	public partial class $objectType.name$ : $objectType.name$Allors $objectType.directSupertypes:{directSupertype|, $globalNullableName(directSupertype)$}$
	{
		public $objectType.name$(Allors.IStrategy allors) : base(allors) {}

		public static $objectType.name$ Instantiate (Allors.ISession allorsSession, string allorsObjectId)
		{
			return ($objectType.name$) allorsSession.Instantiate(allorsObjectId);		
		}
	}

	[System.Diagnostics.DebuggerNonUserCode]
	public abstract class $objectType.name$Allors : Allors.ObjectBase
	{
		protected $objectType.name$Allors(Allors.IStrategy allors) : base(allors){}
$objectType.RoleTypes:{roleType|$classRoleType(relationType=roleType.RelationType,associationType=roleType.AssociationType,roleType=roleType)$}$
$objectType.AssociationTypes:{associationType|$classAssociationType(relationType=associationType.RelationType,associationType=associationType,roleType=associationType.RoleType)$}$
	}

	public static class $objectType.name$Meta
	{
		public static readonly global::Allors.Meta.Class ObjectType = (Allors.Meta.Class)global::Domain.M.D.Find( new System.Guid("$objectType.IdAsString$") );

$objectType.RoleTypes:{roleType|$metaRoleType(relationType=roleType.RelationType,associationType=roleType.AssociationType,roleType=roleType)$
}$
$objectType.AssociationTypes:{associationType|$metaAssociationType(relationType=associationType.RelationType,associationType=associationType,roleType=associationType.RoleType)$
}$
	}
}
>>

interfaceAssociationType(relationType,associationType,roleType) ::= <<
$\n$
$if(associationType.IsMany)$
		Allors.Extent<$globalNullableName(associationType.ObjectType)$> $associationType.PluralPropertyName$
		{ 
			get;
		}

		bool Exist$associationType.PluralPropertyName$
		{
			get;
		}
$else$
		$globalNullableName(associationType.ObjectType)$ $associationType.SingularPropertyName$
		{
			get;
		}

		bool Exist$associationType.SingularPropertyName$
		{
			get;
		}
$endif$
>>

interfaceRoleType(relationType,associationType,roleType) ::= <<
$\n$
$if(roleType.ObjectType.IsUnit)$
		$globalNullableName(roleType.ObjectType)$ $roleType.SingularPropertyName$ 
		{
			get;
			set;
		}

		bool Exist$roleType.SingularPropertyName${get;}

		void Remove$roleType.SingularPropertyName$();
$else$
$if(roleType.IsMany)$
		Allors.Extent<$globalNullableName(roleType.ObjectType)$> $roleType.PluralPropertyName$
		{ 
			get;
			set;
		}

		void Add$roleType.SingularPropertyName$ ($globalNullableName(roleType.ObjectType)$ value);

		void Remove$roleType.SingularPropertyName$ ($globalNullableName(roleType.ObjectType)$ value);

		bool Exist$roleType.PluralPropertyName$
		{
			get;
		}

		void Remove$roleType.PluralPropertyName$();
$else$
		$globalNullableName(roleType.ObjectType)$ $roleType.SingularPropertyName$
		{ 
			get;
			set;
		}

		bool Exist$roleType.SingularPropertyName$
		{
			get;
		}

		void Remove$roleType.SingularPropertyName$();
$endif$
$endif$
>>

classAssociationType(relationType,associationType,roleType) ::= <<
$\n$
$if(associationType.IsMany)$
		virtual public Allors.Extent<$globalNullableName(associationType.ObjectType)$> $associationType.PluralName$Where$roleType.SingularName$
		{ 
			get
			{
				return Strategy.GetCompositeAssociations($objectType.Name$Meta.$associationType.PropertyName$);
			}
		}

		virtual public bool Exist$associationType.PluralName$Where$roleType.SingularName$
		{
			get
			{
				return Strategy.ExistCompositeAssociations($objectType.Name$Meta.$associationType.PropertyName$);
			}
		}
$else$
		virtual public $globalNullableName(associationType.ObjectType)$ $associationType.SingularName$Where$roleType.SingularName$
		{ 
			get
			{
				return ($globalNullableName(associationType.ObjectType)$) Strategy.GetCompositeAssociation($objectType.Name$Meta.$associationType.PropertyName$);
			}
		} 

		virtual public bool Exist$associationType.SingularName$Where$roleType.SingularName$
		{
			get
			{
				return Strategy.ExistCompositeAssociation($objectType.Name$Meta.$associationType.PropertyName$);
			}
		}
$endif$
>>

classRoleType(relationType,associationType,roleType) ::= <<
$\n$
$if(roleType.ObjectType.IsUnit)$
		
		virtual public $globalNullableName(roleType.ObjectType)$ $roleType.SingularPropertyName$ 
		{
			get
			{
				return ($globalNullableName(roleType.ObjectType)$) Strategy.GetUnitRole($objectType.Name$Meta.$roleType.SingularPropertyName$);
			}
			set
			{
				Strategy.SetUnitRole($objectType.Name$Meta.$roleType.SingularPropertyName$, value);
			}
		}

		virtual public bool Exist$roleType.SingularPropertyName${
			get
			{
				return Strategy.ExistUnitRole($objectType.Name$Meta.$roleType.SingularPropertyName$);
			}
		}

		virtual public void Remove$roleType.SingularPropertyName$()
		{
			Strategy.RemoveUnitRole($objectType.Name$Meta.$roleType.SingularPropertyName$);
		}
$else$
$if(roleType.IsMany)$
		virtual public Allors.Extent<$globalNullableName(roleType.ObjectType)$> $roleType.PluralPropertyName$
		{ 
			get
			{
				return Strategy.GetCompositeRoles($objectType.Name$Meta.$roleType.SingularPropertyName$);
			}
			set
			{
				Strategy.SetCompositeRoles($objectType.Name$Meta.$roleType.SingularPropertyName$, value);
			}
		}

		virtual public void Add$roleType.SingularPropertyName$ ($globalNullableName(roleType.ObjectType)$ value)
		{
			Strategy.AddCompositeRole($objectType.Name$Meta.$roleType.SingularPropertyName$, value);
		}

		virtual public void Remove$roleType.SingularPropertyName$ ($globalNullableName(roleType.ObjectType)$ value)
		{
			Strategy.RemoveCompositeRole($objectType.Name$Meta.$roleType.SingularPropertyName$,value);
		}

		virtual public bool Exist$roleType.PluralPropertyName$
		{
			get
			{
				return Strategy.ExistCompositeRoles($objectType.Name$Meta.$roleType.SingularPropertyName$);
			}
		}

		virtual public void Remove$roleType.PluralPropertyName$()
		{
			Strategy.RemoveCompositeRoles($objectType.Name$Meta.$roleType.SingularPropertyName$);
		}
$else$
		virtual public $globalNullableName(roleType.ObjectType)$ $roleType.SingularPropertyName$
		{ 
			get
			{
				return ($globalNullableName(roleType.ObjectType)$) Strategy.GetCompositeRole($objectType.Name$Meta.$roleType.SingularPropertyName$);
			}
			set
			{
				Strategy.SetCompositeRole($objectType.Name$Meta.$roleType.SingularPropertyName$ ,value);
			}
		}

		virtual public bool Exist$roleType.SingularPropertyName$
		{
			get
			{
				return Strategy.ExistCompositeRole($objectType.Name$Meta.$roleType.SingularPropertyName$);
			}
		}

		virtual public void Remove$roleType.SingularPropertyName$()
		{
			Strategy.RemoveCompositeRole($objectType.Name$Meta.$roleType.SingularPropertyName$);
		}
$endif$
$endif$
>>

metaRoleType(relationType,associationType,roleType) ::= <<
		public static readonly global::Allors.Meta.RoleType $roleType.SingularPropertyName$ = ((Allors.Meta.RelationType)global::Domain.M.D.Find( new System.Guid("$roleType.RelationType.IdAsString$"))).RoleType;
>>

metaAssociationType(relationType,associationType,roleType) ::= <<
		public static readonly global::Allors.Meta.AssociationType $associationType.PropertyName$ = ((Allors.Meta.RelationType)global::Domain.M.D.Find( new System.Guid("$associationType.RelationType.IdAsString$"))).AssociationType;
>>


boolean(value) ::= "$if(value)$true$else$false$endif$"

globalNullableName(objectType) ::= <%
$if(objectType.IsUnit)$
$if(objectType.IsBinary)$
	global::System.Byte[]
$elseif(objectType.IsBoolean)$
	global::System.Boolean?
$elseif(objectType.IsDateTime)$
	global::System.DateTime?
$elseif(objectType.IsDecimal)$
	global::System.Decimal?
$elseif(objectType.IsDouble)$
	global::System.Double?
$elseif(objectType.IsInteger)$
	global::System.Int32?
$elseif(objectType.IsLong)$
	global::System.Int64?
$elseif(objectType.IsString)$
	global::System.String
$elseif(objectType.IsUnique)$
	global::System.Guid?
$endif$
$else$
	global::Domain.$objectType.SingularName$
$endif$
%>